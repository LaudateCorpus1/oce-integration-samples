{
    "openapi": "3.0.0",
    "info": {
        "description": "The REST API for Content Delivery provides access to published assets in Oracle Content and Experience (OCE). Published assets include content items and digital assets, as well as their renditions.\n",
        "version": "2020.04.03",
        "title": "REST API for Content Delivery",
        "x-summary": "The REST API for Content Delivery provides access to published assets in Oracle Content and Experience (OCE).",
        "x-vb": {
            "serviceType": "openapi",
            "sourceUrl": "https://docs.oracle.com/en/cloud/paas/content-cloud/rest-api-content-delivery/swagger.json"
        }
    },
    "servers": [
        {
            "url": "https://ocereference-oce0004.cec.ocp.oraclecloud.com/content",
            "x-vb": {
                "authentication": {
                    "authenticated": {
                        "type": "oauth2_user_assertion",
                        "scope": "https://26629BEC35A1421D9D14C82B0E4F2936.cec.ocp.oraclecloud.com:443/urn:opc:cec:all"
                    }
                }
            }
        }
    ],
    "paths": {
        "/published/api": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get Available Versions of an API",
                "description": "Returns information about the available versions of the API.<br>It is a collection resource, and each item within the collection is a version resource. <br><br>Headers (Optional) : </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>Accept</td><td>application/json</td></table>",
                "operationId": "getVersions",
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Start index of response rows.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of rows to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "Accepts a Boolean value. Setting it to true displays the total results field in the response.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionProperties"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-get",
                "x-filename-id": "published-api-get"
            }
        },
        "/published/api/v1.1": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get v1.1 API Information",
                "description": "Returns information about the v1.1 API.<br>A version resource has the following properties:<ol><li><i>version</i>: Version of the resource.</li><li><i>lifecycle</i>: Whether a version is actively supported or deprecated.</li><li><i>isLatest</i>: Whether it is the latest version.</li><li><i>terminationDate (Optional)</i>: Date of termination.</li><li><i>catalog</i>: A child resource that serves as a metadata catalog for all the resources supported in that version.</li></ol>Headers (Optional): </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>Accept</td><td>application/json</td></table>",
                "operationId": "getVersion",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Version"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-get",
                "x-filename-id": "published-api-v1.1-get"
            }
        },
        "/published/api/v1.1/items": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "Search Published Items",
                "description": "Use this query to filter the published content. You can control the number of items to be fetched, paginated, and sorted. Additionally, this resource can fetch field values of matching items.<br>Query expression syntax supports conditions that match the field values. You can also query across all fields for a specific phrase. Many such query conditions can be joined by using AND/OR operators and grouped with parenthesis. Below are general examples of queries.<br><br><table><tr><td>Query expression</td><td> <i>?q=(type eq \"Employee\" AND (fields.emails co \"example.com\" OR fields.emails co \"example.org\")) </i> </td></tr><tr><td>Query expression usage with this resource</td><td> <i>/published/api/v1.1/items?q=(type eq \"Employee\" AND (fields.emails co \"example.com\" OR fields.emails co \"example.org\")) </i> </td></tr></table><br> <i>Notes: </i> Field names used in the query are case-sensitive. <br><br> In general two forms of filtering are supported by this resource.<br><ul><li><b>Query within a type: </b> Query within a type allows query conditions that apply to fields of the type. <br><b>For example:</b><i>/published/api/v1.1/items?q=(type eq \"Employee\" AND fields.role eq \"Senior Developer\") </i><br>Here, role is a field of type Employee.</li><li><b>Query across types: </b> When no type is specified in the query, all types are queried. Also, multi type query is allowed and its behavior will be similar to Global query across queried types. However, query conditions are limited to standard fields (id, type, name, description, slug, language, createdDate, updatedDate, taxonomies) only. <br><b>For example:</b><i> /published/api/v1.1/items?q=(name eq \"John\")</i> or <i>/published/api/v1.1/items?q=(description co \"users\")</i></li></ul><br> In either form, it is possible to search by matching anywhere (any field) by specifying a default match criteria. Such a criteria is a generic query that matches values of the items across all fields. <br><b>For example:</b><br><i>/published/api/v1.1/items?default=\"coffee\" </i><br><i>/published/api/v1.1/items?q=(type eq \"Employee\"&default=\"senior\")</i><br><br> In either form, while querying using standard fields, <i>name, description, type, slug, language</i> are to be considered as a <i>text</i> data type (single valued), <i>id</i> as <i>reference</i> data type (single valued), <i>createdDate, updatedDate</i> as a <i>datetime</i> data type (single valued) and <i>taxonomies</i> as a reference data type (multi valued).</li></ul><br><br><table border=1><tr><th align=\"left\">Operator</th><th align=\"left\">Example</th><th align=\"left\">Supported data types</th><th align=\"left\">Description</th></tr><tr><td>eq</td><td>?q=(name eq \"John\")<br><br>?q=(type eq \"DigitalAsset\")<br><br>?q=(type eq \"Employee\" and fields.DOB eq \"1994/09/26T16:23:45.208\")<br><br>?q=(taxonomies.categories.id eq \"B9F568DC43C54803AC76012783FA5101\")<br><br>?q=(taxonomies.categories.name eq \"Cars\")<br><br>?q=(taxonomies.categories.apiName eq \"cars-unique\")<br><br>?q=(taxonomies.categories.nodes.id eq \"B9F568DC43C54803AC76012783FA5101\")<br><br>?q=(taxonomies.categories.nodes.name eq \"red\")<br><br>?q=(taxonomies.categories.nodes.apiName eq \"cars\")</td><td><i>text, reference, number, decimal, boolean, datetime.</i></td><td>Equals operator (eq) matches the exact value supplied in the query. This operator is not applicable to multivalued data types. The value provided with this operator is not case-sensitive except for standard fields (<i>type</i>). This operator considers even special characters in the value.</td></tr><tr><td>ne</td><td>?q=(name ne \"John\")</td><td><i>text, reference, number, decimal, boolean, datetime.</i></td><td>Not Equals operator (ne) matches items that do not match the exact value supplied in the query. This operator is not applicable to multivalued data types. The value provided with this operator is not case-sensitive except for standard fields. This operator considers even special characters in the value.</td></tr><tr><td>co</td><td>?q=(type eq \"Employee\" AND name co \"john alex\")<br><br>?q=(type eq \"Car\" AND fields.features co \"manual\")<br><br>?q=(taxonomies.categories.name co \"red\")<br><br>?q=(taxonomies.categories.nodes.name co \"cars\")</td><td><i>text, reference, number, decimal, datetime, largetext</i></td><td>Contains operator (co) matches every word given in the criteria. The words are formed by splitting the value by special characters.  It gives the results that have at least one of the words (in this example, john or alex or both). This operator does not consider special characters in the value while searching. This operator does not perform a search on stop words. Refer to Apache Lucene documentation to know more about stop words. <br><br>This operator is applicable to <i>text, largetext</i> in case of single-valued attributes, whereas for multivalued attributes, it is applicable to <i>text, reference, number, decimal, datetime, largetext</i>. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. The value provided with this operator is not case-sensitive.</td></tr><tr><td>nc</td><td>?q=(name nc \"john alex\")</td><td><i>text, reference, number, decimal, datetime, largetext</i></td><td>Not Contains operator (nc) matches items that would not match a co operator with the same criteria. This operator is not applicable to multivalued data types.</td></tr><tr><td>sw</td><td>?q=(type eq \"Employee\" AND name sw \"Joh\")<br><br>?q=(type eq \"Employee\" AND fields.city sw \"Los\")<br><br>?q=(taxonomies.categories.name sw \"cat\")<br><br>?q=(taxonomies.categories.nodes.name sw \"red\")</td><td><i>text</i></td><td>Starts With operator (sw) matches only the initial character values given in the field condition. This operator is not applicable to multivalued data types. The value provided with this operator is not case-sensitive.</td></tr><tr><td>ge</td><td>?q=(type eq \"Employee\" AND fields.age ge \"40\")<br><br>?q=(type eq \"DigitalAsset\" AND updatedDate ge \"20171026\")</td><td><i>number, decimal, datetime</i></td><td>Greater than or equal to operator (ge) matches only numeric and datetime values. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. This operator is not applicable to multivalued data types.</td></tr><tr><td>le</td><td>?q=(type eq \"Employee\" AND fields.weight le \"60.6\")</td><td><i>number, decimal, datetime</i></td><td>Less than or equal to operator (le) matches only numeric and datetime values. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. This operator is not applicable to multivalued data types.</td></tr><tr><td>gt</td><td>?q=(type eq \"Employee\" AND fields.age gt \"20\")</td><td><i>number, decimal, datetime</i></td><td>Greater than operator (gt) matches only numeric and datetime values. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. This operator is not applicable to multivalued data types.</td></tr><tr><td>lt</td><td>?q=(type eq \"Employee\" AND fields.age lt \"20\")<br><br>?q=(type eq \"Employee\" AND createdDate lt \"1994/09/26T16:23:45.208\")</td><td><i>number, decimal, datetime</i></td><td>Lesser than operator (lt) matches only numeric and datetime values. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. This operator is not applicable to multivalued data types.</td></tr><tr><td>mt</td><td>?q=(type eq \"Car\" AND fields.review mt \"petrol 20KMPL\")<br><br>?q=(type eq \"Employee\" AND name mt \"Jo?n\")<br><br>?q=(type eq \"Employee\" AND name mt \"Jo*\")<br><br>?q=(type eq \"Employee\" AND fields.role mt \"senior*\")</td><td><i>text, largetext</i></td><td>Phrase query or proximity search (matches) operator (mt) enables you to find words that are within a specific distance to one another. Results are sorted by best match. It is useful for searching content items when values given in the criteria \"petrol 20kmpl\"  need to discover actual content that may contain \"<i>petrol</i> fuel mileage runs <i>20KMPL</i> in the speed way\". <br><br>Matches operator also can use a wildcard within the given value and supports both single and multiple character wildcard searches within a single value. Use ? for a single-character wildcard and * for multiple characters. Both \"John\" and \"Joan\" can be searched by \"Jo?n\" for a single character and \"Jo*\" for multiple characters. <br><br>This operator is applicable to both single valued and multivalued data types. This operator does not perform a search on stop words. Refer to Apache Lucene documentation to know more about stop words. The value provided with this operator is not case-sensitive.</td></tr><tr><td>sm</td><td>?q=(type eq \"Employee\" And fields.city sm \"Rome\")</td><td><i>text, largetext</i></td><td>Similarity query operator. This operator allows searching for values that sound like specified criteria - also called fuzzy search, which use by default maximum two edits to match result. \"Rome\" is similar to \"Dome\". This operator is applicable to both single valued and multivalued data types. The value provided with this operator is not case-sensitive.</td></tr><tr><td>AND</td><td>?q=(type eq \"Employee\" AND name eq \"John\" AND fields.age ge \"40\")</td><td>-NA-</td><td>AND operator, can be used to put an AND condition between multiple query conditions. This takes precedence over OR.</td></tr><tr><td>OR</td><td>?q=(type eq \"Employee\" AND (name eq \"John\" OR fields.age ge \"40\"))</td><td>-NA-</td><td>OR operator can be used to put an OR condition between multiple query conditions.</td></tr><tr><td>( )</td><td>?q=(type eq \"Employee\" AND (name eq \"John\" AND fields.age ge \"40\"))<br><br>?q=(type eq \"Employee\" AND ((name eq \"John\" AND fields.age ge \"40\") OR fields.weight ge 60))</td><td>-NA-</td><td>Parenthesis, enclosing operator to group the conditions in the criteria. This takes highest precedence, followed by AND, and then by OR.</td></tr></table> <br><br> <br>Request Headers (Optional):<br>  <table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td></tr><tr><td>Accept</td><td>application/json</td></tr></table></br><table><tr><th colspan=\"2\">Additional Notes</th></tr><tr><td>Type specific query</td><td>This query always uses only the <i>eq</i> operator. <i>eq</i> works with a case-sensitive type name. Multitype query is supported, however it will be query across types. <br> <b>Example:</b><br> q=(type eq \"Employee\") or q=(type eq \"DigitalAsset\") is single type search and q=(type eq \"Employee\" OR type eq \"Address\") is multitype search and considered as query across types. </td></tr><tr><td>Date query</td><td>Date query is a special type of query because of various date formats associated to it. All the datetime values are in the UTC (timezone) only. So query results will always be in UTC timezone format for all datetime fields. Fields with the datatype <i> datetime </i> should use the operators <i> ge, gt, le, lt</i> for range query and use <i>eq</i> for an equals match.<br><br> <b>Example:</b><br> Query Products by manufactureDate (<i>datetime</i>) field using the <i>ge</i> operator.<br> https://cecsdomain/content/published/api/v1.1/items?q=(type eq \"Product\" AND fields.manufactureDate ge \"1989-03-26\"). The given date format is <i>YYYY-MM-DD</i>.<br><br>Explore more date/datetime specific query examples in the <b><a href=''#examples'' data-toggle=''ignore''>Examples</a></b> section and also to understand the accepted date/datetime formats in the section below (supported date/datetime formats).</td></tr><tr>\r\n<td>Decimal values</td>\r\n<td>Decimal number query is supported up to 3 digits after decimal points, and the rest of the digits after 3 will be ignored. https://cecsdomain/content/management/api/v1.1/items?q=(type eq \"Product\" AND fields.price ge 425.3214), will result in all the Product where price is greater than equals to 425.321. </td>\r\n</tr><tr><td>Large text datatype query</td><td>Fields with the datatype <i>largetext</i> are not stored, so the query result cannot return its value. But the field value can be used in a query condition.</tr><tr><td>Generic query search</td><td>Generic query search is a default search query, this can be used when the user can search by only value without using any field name or operators. Internally generic search uses the <i>co</i> operator. This query does not support wildcard characters. This search does not perform search on stop words. Refer to Apache Lucene documentation to know more about stop words.<br><b>Example:</b><br> ?q=(type eq \"Employee\")&fields=all&default=John. This will return the search results for the <i>Employee</i> type where the value <i>John</i> matches to field names , descriptions or any user-defined fields.<br><b>Example:</b><br> ?q=(type eq \"Article\")&default=skating. This will return the search results for <i>Article</i> type where value <i>skating</i> matches to fields name, description or any user defined fields.</td></tr><tr><td>ID search</td><td>Search query using ID attribute. <br> <b>Example:</b><br> ?q=(type eq \"Employee\" AND id eq \"COREAF29AC6ACA9644F9836E36C7B558F316\"). The value of id belongs to the item being queried itself, here id of type Employee. <br> It is possible to include multiple item ids in the query expression <br> <b>Example:</b><br> ?q=(type eq \"Employee\" AND (id eq \"COREAF29AC6ACA9644F9836E36C7B558F316\" OR id eq \"COREAF29AC6ACA9644F9836E36C7B558F987\")).</td></tr><tr><td>Category search</td><td>Search items categorized with given category id, category name, category apiName, category node id, category node name or category node apiName attributes. <br> <b>Example:</b><br> ?q=(taxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\")<br>The value of <i>taxonomies.categories.id</i> belongs to the category assigned to items being queried. It is possible to include multiple category ids or names in the query expression. <br> <b>Example:</b><br> ?q=(taxonomies.categories.name co \"cars\" OR taxonomies.categories.name sw \"red\")<br> <b>Example:</b><br> ?q=(taxonomies.categories.apiName eq \"All-furnitures\")<br>The value of <i>taxonomies.categories.apiName</i> belongs to the category assigned to items being queried. It is possible to include multiple category apiName values in the query expression.<br> <b>Example:</b><br> ?q=(taxonomies.categories.nodes.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\")<br>The value of <i>taxonomies.categories.nodes.id</i> belongs to any node of categories assigned to items being queried. It is possible to include multiple category node ids or node names in the query expression.<br> <b>Example:</b><br> ?q=(taxonomies.categories.nodes.name co \"cars\" OR taxonomies.categories.nodes.name sw \"red\")<br> <b>Example:</b><br> ?q=(taxonomies.categories.nodes.apiName eq \"All-furnitures\" OR taxonomies.categories.nodes.apiName eq \"all-accessories\")<br>The value of <i>taxonomies.categories.nodes.apiName</i> belongs to any node of categories assigned to items being queried. It is possible to include multiple category node apiName values in the query expression.</td></tr><tr><td>Reference field search</td><td>Search query using reference attribute. <br> <b>Example:</b><br> ?q=(type eq \"Employee\" AND fields.department eq \"COREAF29AC6ACA9644F9836E36C7B558F412\"). <br>The value of department belongs to id of an item of type Department.</td></tr></table>  <br> <br> <table><tr><th colspan=2>Supported date/datetime formats (24Hrs)</th></tr><tr><td><b>Format</b></td><td><b>Example</b></td></tr><tr><td>YYYY-MM-DD</td><td>1989-03-26</td></tr><tr><td>YYYY/MM/DD</td><td>1989/03/26</td></tr><tr><td>DD-MM-YYYY</td><td>26-03-1989</td></tr><tr><td>DD/MM/YYYY</td><td>26/03/1989</td></tr><tr><td>YYYY-MM-DD''T''hh:mm:ss</td><td>1989-03-26T18:32:38</td></tr><tr><td>YYYY/MM/DD''T''hh:mm:ss</td><td>1989/03/26T18:32:38</td></tr><tr><td>DD-MM-YYYY''T''hh:mm:ss</td><td>26-03-1989T18:32:38</td></tr><tr><td>DD/MM/YYYY''T''hh:mm:ss</td><td>26/03/1989T18:32:38</td></tr><tr><td>YYYY-MM-DD''T''hh:mm:ss.SSS</td><td>1989-03-26T18:32:38.840</td></tr><tr><td>YYYY/MM/DD''T''hh:mm:ss.SSS</td><td>1989/03/26T18:32:38.840</td></tr><tr><td>DD-MM-YYYY''T''hh:mm:ss.SSS</td><td>26-03-1989T18:32:38.840</td></tr><tr><td>DD/MM/YYYY''T''hh:mm:ss.SSS</td><td>26/03/1989T18:32:38.840</td></tr><tr><td>YYYYMMDD</td><td>19890326</td></tr><tr><td>YYYYMMDDhhmmss</td><td>19890326183238</td></tr><tr><td>YYYYMMDDhhmmssSSS</td><td>19880326183238840</td></tr></table>",
                "operationId": "getItemsForDelivery",
                "parameters": [
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Many such query conditions can be joined using AND/OR operators and grouped with parentheses. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. In case of query across type the field names are limited to standard fields (<i>id</i>, <i>type</i>, <i>name</i>, <i>description</i>, <i>slug</i>, <i>language</i>, <i>createdDate</i>, <i>updatedDate</i>, <i>taxonomies</i>). However in case of type specific query the field names are limited to standard fields and user defined fields (except fields of largeText data type). The only values allowed in the operator are <i>eq</i> (Equals), <i>co</i> (Contains), <i>sw</i> (Startswith), <i>ge</i> (Greater than or equals to), <i>le</i> (Less than or equals to), <i>gt</i> (Greater than), <i>lt</i> (Less than), <i>mt</i> (Matches), <i>sm</i> (Similar).<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/items?q=(name eq \"John\")<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/items?q=(type eq \"Employee\" AND name eq \"John\")<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/items?q=(type eq \"Employee\" AND ((name eq \"John\" AND field.age ge \"40\") OR fields.weight gt \"70\"))<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/items?q=(taxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" OR (taxonomies.categories.name co \"cat\" AND taxonomies.categories.name co \"red\"))<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/items?q=(taxonomies.categories.nodes.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" OR taxonomies.categories.nodes.name co \"cars\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "The fields parameter is used to control the returned fields and values in the queried item. This parameter accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). These fields will be returned for each queried item. As all the field names are case-sensitive, users must provide the correct field names in the search query. When fields is specified as <i>all</i> (case-insensitive), in case of a type-specific query, all the standard fields, and user-defined fields except largetext, json, location datatype are returned for each queried item, whereas in case of a query across all types, only all standard fields are returned. The standard fields id and type are always returned in the response and cannot be filtered out. This parameter is optional in the query and by default query result shows only id, name, description, and type in the response. Any incorrect or invalid field name given in the query will be ignored. <br><br> <b>Example</b>: <i>?q=(type eq \"LocationType\")&fields=fields.state,fields.country,updatedDate</i> <br> This returns id, type, state, country, updatedDate in the search results for a LocationType with <i>state</i> and <i>country</i> fields. <br> <b>Example</b>: <i>?q=(type eq \"LocationType\")&fields=all</i> <br> This will return all standard fields and all user-defined fields except <i> largetext, json, location </i> data types <br> <b>Example</b>: <i>?fields=all</i> <br> This will return only standard fields (id, type, name, description, slug, language, createdDate, updatedDate, taxonomies) since <i>Type</i> is not used in the search query (acts as a Global query) <br> <b>Example</b>: <i>?fields=name,createdDate</i> <br> This will return only standard fields (such as id, name, createdDate and type) since <i>Type</i> is not used in the search query (acts as a Global query) <br>",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name,description"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Start index of response rows.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of rows to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "Accepts a Boolean value. Setting it to true displays the total results field in the response.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "The orderBy parameter is used to control the order (ascending or descending) of queried items. This parameter is optional in the query and by default the results are sorted by <i>updatedDate</i>. This parameter accepts <i>featured()</i> or field names separated by a colon (:), which the user wants to sort the results and sort order. <br> format: <i><b>orderBy={fieldName}:{asc/des}</b></i> (*Note: asc stands for ascending and des for descending. asc and des are always in lower case.) <br> In a type specific query, field names can be <i>name</i>, <i>createdDate</i>, <i>updatedDate</i> (standard fields) or user-defined fields (single-valued data types - <i>number, decimal, datetime</i>). But in case of a query across types, only <i>name</i>, <i>createdDate</i>, <i>updatedDate</i> (standard fields) are allowed. All the user-defined field names should be provided with prefix fields and followed by a period (.). The sort order is optional and by default it is ascending. Any incorrect or invalid field name given in the query will be ignored. When <i>featured()</i> is given, the results are sorted by the relevance of the items to the applied filter. <br><br> <b>Example</b>: <i>orderBy=name:asc</i> <br> Returns all the items in the ascending order of name.</td><br> <b>Example</b>: <i>orderBy=updateDate:asc</i> <br>Returns all the items in the ascending order of updateDate.<br/><b>Example</b> : <i>orderBy=fields.age:des</i> <br>Returns all the items in the descending order of age.<br> <b>Example</b>: <i>orderBy=fields.age</i> <br> Returns all the items in the ascending order of age.<br/> <b>Example</b> : <i>default=apples&orderBy=featured()</i> <br> Returns all the items sorted by the relevance of the items to the apples",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionProperties"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-get",
                "x-filename-id": "published-api-v1.1-items-get"
            }
        },
        "/published/api/v1.1/items/{id}": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Get Published Item",
                "description": "Returns published item. An item is uniquely identified by an id.<br>Each published item has the following information:<ol><li><b>Standard fields: </b> These are fields created by the system.<br><ul> <li><i>id</i>: ID of the item.</li><li><i>type</i> : Type of the item.</li><li><i>name</i>: Name of the item.</li><li><i>description</i> : Description of the item.</li> <li><i>slug</i> : A URL part that identifies content item in human-readable format.</li> <li><i>language</i> : Language of the Item.</li> <li><i>createdDate</i> : First published date of the item on the channel requested.</li><li><i>updatedDate</i> : Last published date of the item on the channel requested.</li></ul></li><li><b>User-defined fields : </b>These are fields created by the user when the Type is defined. All user fields are available under <i>fields</i> node.</li><br>Request Headers (Optional) : </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr><td>Accept</td><td>application/json</td></table>",
                "operationId": "getItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (in lowercase), all the fields of the reference type of the requested item are expanded. When expand is not specified, the item response contains links to the referenced items. <br>Expansion of this form is supported for one level only, a request to expand beyond the first level of referenced fields will produce response HTTP 400. When the expand contains a nonexisting field as per the type definition of the requested item, the resource produces HTTP 400.<br><br><b>Example</b> : expand=<i>fields.field1,fields.field2</i> <br>Returns field1 and field2: names of the user-defined fields in the type to which this item belongs.<br><b>Example</b> : expand=<i>taxonomies</i> <br>Returns taxonomies field containing all categories assigned to this item. Taxonomies must be published to the same channel of this item.<br><b>Example</b> : expand=<i>all</i> <br>Returns all fields available for this item.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-{id}-get",
                "x-filename-id": "published-api-v1.1-items-id-get"
            }
        },
        "/published/api/v1.1/items/{id}/preview": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Get Preview of an Item",
                "description": "Previews the latest management version of the item that is ready for publish or published. An item is uniquely identified by an ID. <br>Note: This API requires authentication to preview the item. <br><br>Each preview item has the following information:<ol><li><b>Standard fields: </b> These are fields created by the system.<br><ul> <li><i>id</i>: ID of the item.</li><li><i>type</i>: Type of the item.</li><li><i>name</i>: Name of the item.</li><li><i>description</i>: Description of the item.</li> <li><i>slug</i> : A URL part that identifies content item in human-readable format.</li> <li><i>language</i> : Language of the Item.</li> <li><i>createdDate</i>: First published date of the item on the channel requested.</li><li><i>updatedDate</i>: Last published date of the item on the channel requested.</li></ul></li><li><b>User-defined fields: </b>These are fields created by the user when the type is defined. All user fields are available under the <i>fields</i> node.</li><br>Request Headers (Optional): </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr><td>Accept</td><td>application/json</td></table>",
                "operationId": "getItemPreview",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (in lowercase), all the fields of the reference type of the requested item are expanded. When expand is not specified, the item response contains links to the referenced items. <br>Expansion of this form is supported for one level only, a request to expand beyond the first level of referenced fields will produce response HTTP 400. When the expand contains a nonexisting field as per the type definition of the requested item, the resource produces HTTP 400.<br>Examples: </br><ol>expand=<i>fields.field1,fields.field2</i></ol><ol>expand=<i>all</i></ol> where field1, field2 are names of the user-defined fields in the type to which this item belongs.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-{id}-preview-get",
                "x-filename-id": "published-api-v1.1-items-id-preview-get"
            }
        },
        "/published/api/v1.1/assets/{id}/{rendition}": {
            "get": {
                "tags": [
                    "Renditions"
                ],
                "summary": "Get Published Rendition",
                "description": "Renders a specific rendition of a published digital asset. The content-type header received in the response has the media type information.<br></li><br>Request Headers (Optional): </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr></table>",
                "operationId": "getDeliveryRendition",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition",
                        "in": "path",
                        "description": "Rendition name of the Digital Asset.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Media type extension of the Digital Asset file. When the rendition has only one format, the format query parameter can be omitted.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Rendition type of the Digital Asset.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "channelToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-assets-{id}-{rendition}-get",
                "x-filename-id": "published-api-v1.1-assets-id-rendition-get"
            }
        },
        "/published/api/v1.1/assets/{id}/{rendition}/{filename}": {
            "get": {
                "tags": [
                    "Renditions"
                ],
                "summary": "Get Published Rendition Using Filename",
                "description": "Get the rendition of a published digital asset using both the ID and filename. The content-type header received in the response has the media type information.<br></li><br>Request Headers (Optional): </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr></table>",
                "operationId": "getDeliveryRenditionWithFileName",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition",
                        "in": "path",
                        "description": "Rendition name of the Digital Asset.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Name of the Digital item",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Media type extension of the Digital Asset file. When the rendition has only one format, the format query parameter can be omitted.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Rendition type of the Digital Asset.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "channelToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-assets-{id}-{rendition}-{filename}-get",
                "x-filename-id": "published-api-v1.1-assets-id-rendition-filename-get"
            }
        },
        "/published/api/v1.1/assets/{id}/native": {
            "get": {
                "tags": [
                    "Renditions"
                ],
                "summary": "Get Published Digital Assets Native File",
                "description": "Renders the native file. In the content-type header received in the response has the media type information.<br></li><br>Request Headers (Optional): </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr></table>",
                "operationId": "getNativeDelivery",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-assets-{id}-native-get",
                "x-filename-id": "published-api-v1.1-assets-id-native-get"
            }
        },
        "/published/api/v1.1/assets/{id}/native/{filename}": {
            "get": {
                "tags": [
                    "Renditions"
                ],
                "summary": "Get Published Native Resource Using Filename",
                "description": "Renders the native file of a published digital asset using both the ID and filename. The content-type header received in the response has the media type information.<br></li><br>Request Headers (Optional): </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr></table>",
                "operationId": "getNativeDeliveryWithFileName",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Name of the Digital item",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-assets-{id}-native-{filename}-get",
                "x-filename-id": "published-api-v1.1-assets-id-native-filename-get"
            }
        },
        "/published/api/v1.1/metadata-catalog": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get Metadata of v1.1 API",
                "description": "It is a collection resource and returns the metadata catalog of all the resources in v1.1 API. <br><br>Headers (Optional): </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>Accept</td><td>application/json</td></table>",
                "operationId": "getVersionCatalogs",
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Start index of response rows.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of rows to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "Accepts a Boolean value. Setting it to true displays the total results field in the response.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "Get Metadata Catalog of Published Items",
                "description": "Returns the metadata and description catalog of the version v1.1 Query on Published Items  <br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json which returns a description of the resource, including the resource name and a links section. <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getQueryItemsMetadataCatalogSwaggerSchema",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/{id}": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get Metadata of an Item Using ID",
                "description": "Returns information about metadata catalog of the published item using ID.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource (including the resource name and a links section). <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemIdMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-{id}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-id-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/{id}/preview": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Get Metadata Catalog of Preview of an Item",
                "description": "Returns information about version v1.1 metadata catalog of an item preview resource.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource, including the resource name and a links section. <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemPreviewMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-{id}-preview-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-id-preview-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/assets/{id}/{rendition}": {
            "get": {
                "tags": [
                    "Renditions"
                ],
                "summary": "Get Metadata Using Rendition Type",
                "description": "Retrieves metadata catalog using an ID and rendition type. The content-type header received in the response has the media type information.",
                "operationId": "getRenditionDescription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-assets-{id}-{rendition}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-assets-id-rendition-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/assets/{id}/{rendition}/{filename}": {
            "get": {
                "tags": [
                    "Renditions"
                ],
                "summary": "Get Metadata Using Rendition Type and Filename",
                "description": "Retrieves metadata catalog using ID, rendition type, and filename. In the content-type header received in the response has the media type information.",
                "operationId": "getRenditionWithFileNameDescription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-assets-{id}-{rendition}-{filename}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-assets-id-rendition-filename-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/assets/{id}/native": {
            "get": {
                "tags": [
                    "Renditions"
                ],
                "summary": "Get Metadata of Native Digital Asset",
                "description": "Retrieves metadata catalog of a Native Digital Asset using the ID.",
                "operationId": "getNativeDescription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-assets-{id}-native-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-assets-id-native-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/assets/{id}/native/{filename}": {
            "get": {
                "tags": [
                    "Renditions"
                ],
                "summary": "Get Digital Assets Native File with FileName Metadata Catalog",
                "description": "Provides access to a native file of a published digital asset. The content-type header in the response is set to the correct value for the file type.",
                "operationId": "getNativeWithFileNameDescription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-assets-{id}-native-{filename}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-assets-id-native-filename-get"
            }
        },
        "/published/api/metadata-catalog": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get Metadata of an API",
                "description": "Retrieves metadata catalog of an API. It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource (including the resource name and a links section). <br>A request with the media type application/schema+json returns the schema for the resource.",
                "operationId": "getVersionMetadataCatalogSwaggerSchema",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/schema+json; qs=0.9": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionProperties"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-metadata-catalog-get",
                "x-filename-id": "published-api-metadata-catalog-get"
            }
        },
        "/published/api/v1.1/items/.by.slug/{slug}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get Published Item by slug",
                "description": "Returns published item by its unique slug value.",
                "operationId": "getItemBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the published Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (in lowercase), all the fields of the reference type of the requested item are expanded. When expand is not specified, the item response contains links to the referenced items. <br>Expansion of this form is supported for one level only, a request to expand beyond the first level of referenced fields will produce response HTTP 400. When the expand contains a nonexisting field as per the type definition of the requested item, the resource produces HTTP 400.<br><br><b>Example</b> : expand=<i>fields.field1,fields.field2</i> <br>Returns field1 and field2: names of the user-defined fields in the type to which this item belongs.<br><b>Example</b> : expand=<i>taxonomies</i> <br>Returns taxonomies field containing all categories assigned to this item. Taxonomies must be published to the same channel of this item.<br><b>Example</b> : expand=<i>all</i> <br>Returns all fields available for this item.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-.by.slug-{slug}-get",
                "x-filename-id": "published-api-v1.1-items-slug-slug-get"
            }
        },
        "/published/api/v1.1/items/.by.slug/{slug}/preview": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get Preview of an Item by slug",
                "description": "Previews the latest management version of the item by its slug value that is ready for publish or published. An item is uniquely identified by its slug. <br>Note: This API requires authentication to preview the item. <br><br>Each preview item has the following information:<ol><li><b>Standard fields: </b> These are fields created by the system.<br><ul> <li><i>id</i>: ID of the item.</li><li><i>type</i>: Type of the item.</li><li><i>name</i>: Name of the item.</li><li><i>description</i>: Description of the item.</li> <li><i>slug</i> : A URL part that identifies content item in human-readable format.</li> <li><i>language</i> : Language of the Item.</li> <li><i>createdDate</i>: First published date of the item on the channel requested.</li><li><i>updatedDate</i>: Last published date of the item on the channel requested.</li></ul></li><li><b>User-defined fields: </b>These are fields created by the user when the type is defined. All user fields are available under the <i>fields</i> node.</li><br>Request Headers (Optional): </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr><td>Accept</td><td>application/json</td></table>",
                "operationId": "getItemPreviewBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the Item to be previewed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (in lowercase), all the fields of the reference type of the requested item are expanded. When expand is not specified, the item response contains links to the referenced items. <br>Expansion of this form is supported for one level only, a request to expand beyond the first level of referenced fields will produce response HTTP 400. When the expand contains a nonexisting field as per the type definition of the requested item, the resource produces HTTP 400.<br>Examples: </br><ol>expand=<i>fields.field1,fields.field2</i></ol><ol>expand=<i>all</i></ol> where field1, field2 are names of the user-defined fields in the type to which this item belongs.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-.by.slug-{slug}-preview-get",
                "x-filename-id": "published-api-v1.1-items-slug-slug-preview-get"
            }
        },
        "/published/api/v1.1/items/.by.slug/{slug}/taxonomies": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List all Taxonomies and Categories of a published Item by slug",
                "description": "Lists all Taxonomies and Categories of a published Item by slug.",
                "operationId": "getItemTaxonomiesBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the published Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxonomiesBean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-.by.slug-{slug}-taxonomies-get",
                "x-filename-id": "published-api-v1.1-items-slug-slug-taxonomies-get"
            }
        },
        "/published/api/v1.1/items/.by.slug/{slug}/variations": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get variations of a published Content Item by its slug",
                "description": "Gets all variations of a published Content Item by its slug value",
                "operationId": "lisItemVariationsBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the published Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListVariationsInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-.by.slug-{slug}-variations-get",
                "x-filename-id": "published-api-v1.1-items-slug-slug-variations-get"
            }
        },
        "/published/api/v1.1/items/.by.slug/{slug}/variations/{varType}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get variations of a published Content Item by its slug filtered by Variation Type",
                "description": "Get all variations of a published Content Item by its slug value filtered by Variation Type",
                "operationId": "listVariationsByTypeBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the published Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationsInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-.by.slug-{slug}-variations-{varType}-get",
                "x-filename-id": "published-api-v1.1-items-slug-slug-variations-vartype-get"
            }
        },
        "/published/api/v1.1/items/.by.slug/{slug}/variations/{varType}/{varValue}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get published item by slug for specified Item Variation",
                "description": "Gets the published Content Item by slug for the Item Variation specified by Variation Type and Variation Value",
                "operationId": "getItemForVariationBySlug",
                "parameters": [
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the published Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varValue",
                        "in": "path",
                        "description": "Value of the variation type. Example: <i>en-US</i>, <i>fr</i> etc.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (in lowercase), all the fields of the reference type of the requested item are expanded. When expand is not specified, the item response contains links to the referenced items. <br>Expansion of this form is supported for one level only, a request to expand beyond the first level of referenced fields will produce response HTTP 400. When the expand contains a nonexisting field as per the type definition of the requested item, the resource produces HTTP 400.<br>Examples: </br><ol>expand=<i>fields.field1,fields.field2</i></ol><ol>expand=<i>all</i></ol> where field1, field2 are names of the user-defined fields in the type to which this item belongs.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-.by.slug-{slug}-variations-{varType}-{varValue}-get",
                "x-filename-id": "published-api-v1.1-items-slug-slug-variations-vartype-varvalue-get"
            }
        },
        "/published/api/v1.1/items/{id}/taxonomies": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Get Taxonomies of Item",
                "description": "Lists all Taxonomies and Categories of a published Item.",
                "operationId": "getItemTaxonomies",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxonomiesBean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-{id}-taxonomies-get",
                "x-filename-id": "published-api-v1.1-items-id-taxonomies-get"
            }
        },
        "/published/api/v1.1/items/{id}/variations": {
            "get": {
                "tags": [
                    "Item Variations"
                ],
                "summary": "Get Item Variations",
                "description": "Gets all Item Variations for the Content Item",
                "operationId": "lisItemVariations",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListVariationsInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-{id}-variations-get",
                "x-filename-id": "published-api-v1.1-items-id-variations-get"
            }
        },
        "/published/api/v1.1/items/{id}/variations/{varType}": {
            "get": {
                "tags": [
                    "Item Variations"
                ],
                "summary": "Get Item Variations by Variation Type",
                "description": "Gets Item Variations of Variation Type for the Content Item",
                "operationId": "listVariationsByType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationsInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-{id}-variations-{varType}-get",
                "x-filename-id": "published-api-v1.1-items-id-variations-vartype-get"
            }
        },
        "/published/api/v1.1/items/{id}/variations/{varType}/{varValue}": {
            "get": {
                "tags": [
                    "Item Variations"
                ],
                "summary": "Get Content Item for Item Variation",
                "description": "Gets the Content Item of the Item Variation specified by Variation Type and Variation Value",
                "operationId": "getItemForVariation",
                "parameters": [
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of an item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varValue",
                        "in": "path",
                        "description": "Value of the variation type. Example: <i>en-US</i>, <i>fr</i> etc.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (in lowercase), all the fields of the reference type of the requested item are expanded. When expand is not specified, the item response contains links to the referenced items. <br>Expansion of this form is supported for one level only, a request to expand beyond the first level of referenced fields will produce response HTTP 400. When the expand contains a nonexisting field as per the type definition of the requested item, the resource produces HTTP 400.<br>Examples: </br><ol>expand=<i>fields.field1,fields.field2</i></ol><ol>expand=<i>all</i></ol> where field1, field2 are names of the user-defined fields in the type to which this item belongs.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "published-api-v1.1-items-{id}-variations-{varType}-{varValue}-get",
                "x-filename-id": "published-api-v1.1-items-id-variations-vartype-varvalue-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/.by.slug/{slug}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get Metadata of an Item Using SLUG",
                "description": "Returns information about metadata catalog of the published item using SLUG.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource (including the resource name and a links section). <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemWithSlugMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-.by.slug-{slug}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-slug-slug-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/.by.slug/{slug}/preview": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get Metadata Catalog of Preview of an Item",
                "description": "Returns information about version v1.1 metadata catalog of an item preview resource.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource, including the resource name and a links section. <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemPreviewBySlugMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-.by.slug-{slug}-preview-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-slug-slug-preview-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/.by.slug/{slug}/taxonomies": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get Metadata Catalog of Taxonomies of Item",
                "description": "Returns information about version v1.1 metadata catalog of an item taxonomies resource.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource, including the resource name and a links section. <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemTaxonomiesBySlugMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-.by.slug-{slug}-taxonomies-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-slug-slug-taxonomies-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/.by.slug/{slug}/variations": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get Metadata of variations of Item",
                "description": "Returns information about version v1.1 metadata catalog of an item variations resource.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource, including the resource name and a links section. <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemVariationsBySlugMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-.by.slug-{slug}-variations-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-slug-slug-variations-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/.by.slug/{slug}/variations/{varType}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get Metadata of variations of Item for specified type",
                "description": "Returns information about version v1.1 metadata catalog of an item variations for specified type.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource, including the resource name and a links section. <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemVariationsOfTypeBySlugMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-.by.slug-{slug}-variations-{varType}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-slug-slug-variations-vartype-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/.by.slug/{slug}/variations/{varType}/{varValue}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Get Metadata of variations of Item for specified value",
                "description": "Returns information about version v1.1 metadata catalog of an item variations for specified value.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource, including the resource name and a links section. <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemVariationsOfValueBySlugMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "varValue",
                        "in": "path",
                        "description": "Value of the variation type. Example: <i>en-US</i>, <i>fr</i> etc.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-.by.slug-{slug}-variations-{varType}-{varValue}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-slug-slug-variations-vartype-varvalue-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/items/{id}/taxonomies": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Get Metadata Catalog of Taxonomies of Item",
                "description": "Returns information about version v1.1 metadata catalog of an item taxonomies resource.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource, including the resource name and a links section. <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getItemTaxonomiesMetadataCatalogSwaggerSchema",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-items-{id}-taxonomies-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-items-id-taxonomies-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/taxonomies": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get Metadata of Published Taxonomies",
                "description": "Returns information about metadata catalog of the published taxonomies.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource (including the resource name and a links section). <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getTaxonomiesDescription",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-taxonomies-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-taxonomies-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/taxonomies/{id}": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get Metadata of a Published Taxonomy Using ID",
                "description": "Returns information about metadata catalog of the published taxonomy using ID.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource (including the resource name and a links section). <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getTaxonomyDescription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-taxonomies-{id}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-taxonomies-id-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/taxonomies/{id}/categories": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get Metadata of Published Categories",
                "description": "Returns information about metadata catalog of the published categories.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource (including the resource name and a links section). <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getCategoriesDescription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-taxonomies-{id}-categories-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-taxonomies-id-categories-get"
            }
        },
        "/published/api/v1.1/metadata-catalog/taxonomies/{id}/categories/{categoryId}": {
            "get": {
                "tags": [
                    "Version Catalog"
                ],
                "summary": "Get Metadata of a Category Using ID",
                "description": "Returns information about metadata catalog of the published category using ID.<br>It supports two media types: <br><ol><li>application/json</li> <li>application/schema+json</li></ol><br>The default value is the application/json, which returns a description of the resource (including the resource name and a links section). <br>A request with the media type application/schema+json returns the schema for the resource.<br> ",
                "operationId": "getCategoryDescription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {},
                            "application/schema+json": {}
                        }
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-metadata-catalog-taxonomies-{id}-categories-{categoryId}-get",
                "x-filename-id": "published-api-v1.1-metadata-catalog-taxonomies-id-categories-categoryid-get"
            }
        },
        "/published/api/v1.1/personalization/recommendationResults/{apiName}": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Obtain the results from the recommendation.",
                "description": "Obtain the results of the recommendation specified by the apiName.  This endpoint is used to run the recommendation by specifying values for the audience attributes defined in the recommendation.  <br/><br/>Audience attributes must be specified as part of the query parameters  as name value pairs prepended with the keyword <b>attribute</b> as follows: <b><i>attribute.\\<category\\>.\\<audienceAttribute\\>=\\<value\\></i></b> <br/><br/><b>Example:</b>  <i>?attribute.custom.myAttribute1=value1&attribute.custom.myAttribute2=value2</i><br/><br/>\n<br/><br/>Where multivalued audience attributes are allowed, they should be provided in the query by repeating the name value pairs. <br/><br/><b>Example:</b>  <i>?attribute.custom.myMultiValue=value1&attribute.custom.myMultiValue=value2</i> etc.<br/><br/>\n",
                "operationId": "invokeRecommendation",
                "parameters": [
                    {
                        "name": "apiName",
                        "in": "path",
                        "description": "API name of the recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "attribute.category.attributeName",
                        "in": "query",
                        "description": "List of audience attributes. The audience attributes should be prefixed with the keyword <b>attribute</b>: <br/><br/><b><i>attribute.\\<category\\>.\\<audienceAttribute\\>=\\<value\\></i></b><br/><br/><b>Example:</b>  <i>?attribute.custom.myAttribute1=value1&attribute.custom.myAttribute2=value2</i><br/><br/>",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "The fields parameter is used to control the returned fields and values in the queried item. This parameter accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). These fields will be returned for each queried item. As all the field names are case-sensitive, users must provide the correct field names in the search query. When fields is specified as <i>all</i> (case-insensitive), in case of a type-specific query, all the standard fields, and user-defined fields except largetext, json, location datatype are returned for each queried item, whereas in case of a query across all types, only all standard fields are returned. The standard fields id and type are always returned in the response and cannot be filtered out. This parameter is optional in the query and by default query result shows only id, name, description, and type in the response. Any incorrect or invalid field name given in the query will be ignored. <br><br> <b>Example</b>: <i>?q=(type eq \"LocationType\")&fields=fields.state,fields.country,updatedDate</i> <br> This returns id, type, state, country, updatedDate in the search results for a LocationType with <i>state</i> and <i>country</i> fields. <br> <b>Example</b>: <i>?q=(type eq \"LocationType\")&fields=all</i> <br> This will return all standard fields and all user-defined fields except <i> largetext, json, location </i> data types <br> <b>Example</b>: <i>?fields=all</i> <br> This will return only standard fields (id, type, name, description, slug, language, createdDate, updatedDate, taxonomies) since <i>Type</i> is not used in the search query (acts as a Global query) <br> <b>Example</b>: <i>?fields=name,createdDate</i> <br> This will return only standard fields (such as id, name, createdDate and type) since <i>Type</i> is not used in the search query (acts as a Global query) <br>",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name,description"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Start index of response rows.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of rows to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "Accepts a Boolean value. Setting it to true displays the total results field in the response.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionProperties"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-personalization-recommendationResults-{apiName}-get",
                "x-filename-id": "published-api-v1.1-personalization-recommendationresults-apiname-get"
            }
        },
        "/published/api/v1.1/taxonomies": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "List Taxonomies",
                "description": "Returns all published taxonomies.",
                "operationId": "getTaxonomies",
                "parameters": [
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Start index of response rows.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of rows to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "Accepts a Boolean value. Setting it to true displays the total results field in the response.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "The orderBy parameter is used to control the order (ascending or descending) of queried taxonomies. This parameter is optional in the query and by default there is no order of results. This parameter accepts field names separated by a colon (:), which the user wants to sort the results and sort order. <br> format: <i><b>orderBy={fieldName}:{asc/des}</b></i> (*Note: asc stands for ascending and des for descending. asc and des are always in lower case.) <br> Field names can be <i>name</i>, <i>createdDate</i>, <i>updatedDate</i> (standard fields). The sort order is optional and by default it is ascending. Any incorrect or invalid field name given in the query will be ignored. <br><br> <b>Example</b>: <i>orderBy=name:asc</i> <br> Returns all the taxonomies in the ascending order of name.</td><br> <b>Example</b>: <i>orderBy=updatedDate:asc</i> <br>Returns all the taxonomies in the ascending order of updatedDate.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the taxonomy's response. Accepts a comma-separated list of field names or <i>all</i>. This field is currently ignored.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionProperties"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-taxonomies-get",
                "x-filename-id": "published-api-v1.1-taxonomies-get"
            }
        },
        "/published/api/v1.1/taxonomies/{id}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read a Published Taxonomy",
                "description": "Returns published taxonomy. A taxonomy is uniquely identified by an id.<br>Each published taxonomy has the following information:<ol><li><b>Standard fields: </b> These are fields created by the system.<br><ul> <li><i>id</i>: ID of the taxonomy.</li><li><i>name</i>: Name of the taxonomy.</li><li><i>description</i> : Description of the taxonomy.</li> <li><i>shortName</i>: Short name of the taxonomy.</li> <li><i>customProperties</i>: Custom properties defined for the taxonomy.</li> <li><i>updatedDate</i> : Last published date of the taxonomy on the channel requested.</li></ul></li><br>Request Headers (Optional) : </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr><td>Accept</td><td>application/json</td></table>",
                "operationId": "getTaxonomy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of a taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the taxonomy's response. Accepts a comma-separated list of field names or <i>all</i>. This field is currently ignored.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Taxonomy"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-taxonomies-{id}-get",
                "x-filename-id": "published-api-v1.1-taxonomies-id-get"
            }
        },
        "/published/api/v1.1/taxonomies/{id}/categories": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Search Published Categories",
                "description": "Use this query to search published categories. You can control the number of categories to be fetched, paginated, and sorted. Additionally, this resource can fetch field values of matching items.<br>Query expression syntax supports conditions that match the field values. Query conditions can be joined by using AND/OR operators and grouped with parenthesis. Below are general examples of queries.<br><br><table><tr><td>Query expression</td><td> <i>?q=(name co \"car\") </i> </td><tr><tr><td>Query expression usage with this resource</td><td> <i>/published/api/v1.1/taxonomies/{id}/categories?q=(name co \"car\")</i> </td> <tr></table><br><br> In general one form of filtering is supported by this resource.<br><ul><li><b>Query all categories within a taxonomy: </b> All categories of the taxonomy are queried. However, query conditions are limited to standard fields (<i>id</i>, <i>name</i>, <i>parent.id</i>) only. <br><b>For example:</b><i> /published/api/v1.1/taxonomies/{id}/categories?q=(id eq \"B0A39B47122C4CE88A6CD52B90C15263\")</i></li></ul><br><br><br> </li></ul><br><br><table border=1><tr><th align=\"left\">Operator</th><th align=\"left\">Example</th><th align=\"left\">Supported data types</th><th align=\"left\">Description</th></tr><tr><td>eq</td><td>?q=(id eq \"B0A39B47122C4CE88A6CD52B90C15263\")<br><br>q=(name eq \"Cars\")<br><br>q=(parent.id eq \"C7117D407B1845DEAABBE00526D112FB\")</td><td><i>text</i></td><td>Equals operator (eq) matches the exact value supplied in the query. The value provided with this operator is not case-sensitive (<i>name</i>) except for identifier fields (<i>id</i>, <i>parent.id</i>). This operator considers even special characters in the value.</td></tr><tr><td>co</td><td>?q=(name co \"car red\")<br></td><td><i>text</i></td><td>Contains operator (co) matches every word given in the criteria. It gives the results that have at least one of the words (in this example, <i>car</i> or <i>red</i> or both). This operator does not consider special characters in the value while searching.  <br><br>This operator is applicable to <i>text</i> in case of single-valued attributes. The value provided with this operator is not case-sensitive.</td></tr><tr><td>sw</td><td>?q=(name sw \"Car\")<br></td><td><i>text</i></td><td>Starts With operator (sw) matches only the initial character values given in the field condition. The value provided with this operator is not case-sensitive.</td></tr></table><br><br> <br>Request Headers (Optional):<br>  <table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td></tr><tr><td>Accept</td><td>application/json</td></tr></table></br><br> <br>",
                "operationId": "searchCategories",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of a taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Many such query conditions can be joined using AND/OR operators and grouped with parentheses. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only values allowed in the operator are <i>eq</i> (Equals), <i>co</i> (Contains) and <i>sw</i> (Startswith).<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/taxonomies/{id}/categories?q=(name eq \"Furnitures\")<br> This will return all categories matching exactly the name \"Furnitures\".<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/taxonomies/{id}/categories?q=(name co \"chairs\" OR name co \"red\")<br> This will return all categories containing the words \"chairs\" or \"red\".<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/taxonomies/{id}/categories?q=(name sw \"cars\")<br> This will return all categories which name start with \"cars\".<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/taxonomies/{id}/categories?q=(id eq \"B0A39B47122C4CE88A6CD52B90C15263\")<br> This will return a category with the given identifier.<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/taxonomies/{id}/categories?q=(parent.id eq \"C7117D407B1845DEAABBE00526D112FB\")&orderBy=position:asc<br> This will return all children categories underneath the given parent identifier sorted by their position in ascending order.<br><b>Example</b>:<br> https://{cecsdomain}/content/published/api/v1.1/taxonomies/{id}/categories?q=(parent.id eq \"C7117D407B1845DEAABBE00526D112FB\" AND name co \"blue\")<br> This will return all children categories underneath the given parent identifier which contains the word \"blue\" in their names.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "The fields parameter is used to control the returned fields and values in the queried category. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each queried category. As all the field names are case-sensitive, users must provide the correct field names in the search query. When fields is specified as <i>all</i> (case-insensitive), all the standard fields and optional fields are returned for each category. Each category has both standard fields (<i>id</i>, <i>name</i>, <i>description</i>, <i>parent</i>) and optional fields (<i>ancestors</i>). The standard field <i>id</i> is always returned in the response and cannot be filtered out. This parameter is optional in the query and by default query result shows only <i>id</i>, <i>name</i> and <i>description</i> in the response. Any incorrect or invalid field name given will result in an error. <br><br> <b>Example</b>: <i>?q=(name co \"car\")&fields=name,description,parent,ancestors</i> <br> This returns <i>id</i>, <i>name</i>, <i>description</i>, <i>parent</i> and <i>ancestors</i> in the search results for a category containing \"car\" in the <i>name</i> field. <br> <b>Example</b>: <i>?fields=name,parent</i> <br> This will return only standard fields (such as <i>id</i>, <i>name</i> and <i>parent</i>) for all categories within the default limit. <br>",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name,description"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Start index of response rows.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of rows to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "Accepts a Boolean value. Setting it to true displays the total results field in the response.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "The orderBy parameter is used to control the order (ascending or descending) of queried items. This parameter is optional in the query and by default there is no order of results. This parameter accepts field names separated by a colon (:), which the user wants to sort the results and sort order. <br> format: <i><b>orderBy={fieldName}:{asc/des}</b></i> (*Note: asc stands for ascending and des for descending. asc and des are always in lower case.) <br> In a category query, fieldName can be <i>name</i> or <i>position</i> (standard field). When sorting results by <i>position</i> it is important to remember that only searches by <i>parent.id</i> can actually benefit from it. The category position is unique only within a given level or under a given parent category. There will be different categories with the same position value at different levels of the taxonomy. The sort order is optional and by default it is ascending. Any incorrect or invalid field name given will result in an error. <br><br> <b>Example</b>: <i>orderBy=name:asc</i> <br> Returns all categories in ascending order of <i>name</i>.<br><br> <b>Example</b>: <i>orderBy=name:des</i> <br> Returns all categories in descending order of <i>name</i>.<br><br> <b>Example</b>: <i>orderBy=position:asc</i> <br> Returns all categories in ascending order of <i>position</i>.<br><br> <b>Example</b>: <i>orderBy=position:des</i> <br> Returns all categories in descending order of <i>position</i>.</td>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionProperties"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-taxonomies-{id}-categories-get",
                "x-filename-id": "published-api-v1.1-taxonomies-id-categories-get"
            }
        },
        "/published/api/v1.1/taxonomies/{id}/categories/{categoryId}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read a Published Category",
                "description": "Returns published category. A category is uniquely identified by an id.<br>Each published category has the following information:<ol><li><b>Standard fields: </b> These are fields created by the system.<br><ul> <li><i>id</i>: ID of the category.</li><li><i>name</i>: Name of the category.</li><li><i>description</i> : Description of the category.</li> <li><i>parent</i>: Parent of the category.</li> <li><i>ancestors</i>: Ancestors of the category. Each position in this array represents an ancestor category from first to last position. First category in the array represents the root category and the last category in the array represents the immediate parent of the requested resource.</li></ul></li><br>Request Headers (Optional) : </br><table><tr><th>Header Name</th><th>Header Value</th></tr><tr><td>channelToken</td><td>{valid channel token value}</td><tr><td>Accept</td><td>application/json</td></table>",
                "operationId": "getCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier (ID) of a taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Unique identifier (ID) for a category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the publish target. A channel token must be provided as either a query parameter or a request header.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the category's response. Accepts a comma-separated list of field names or <i>all</i>. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (with <i>all</i> in lower case), all the fields of the requested category are expanded. When expand is not specified, the category response contains links to the referenced children. Expansion of this form is supported for one level only. When the expand parameter contains a nonexistent field as per category definition, the resource produces HTTP 400.<br><br><b>Example</b> : expand=<i>children</i> <br>Returns children categories sorted by their respective <i>position</i> ascending. This sort order cannot be changed in this request.<br><b>Example</b> : expand=<i>all</i> <br>Returns child resources (<i>children</i>) available for this category. Only the first 1000 children categories will be expanded.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "Accepts a comma-separated list of <i>rel</i> (relation) links, which the client requires in the results. By default, all the applicable links in a resource are included in the response. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>. <br> Example: links=<i>self,canonical</i> will only return the links with the <i>rel</i> property <i>self</i> or <i>canonical</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryInformation"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not changed. The request honors requests with e-tag."
                    },
                    "400": {
                        "description": "Bad Request. The server is unable to process the request on the client side due to malformed syntax, invalid data or message framing."
                    },
                    "403": {
                        "description": "Forbidden. Client is not authorized to perform this request."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error condition encountered in the system."
                    }
                },
                "x-internal-id": "published-api-v1.1-taxonomies-{id}-categories-{categoryId}-get",
                "x-filename-id": "published-api-v1.1-taxonomies-id-categories-categoryid-get"
            }
        }
    },
    "components": {
        "schemas": {
            "CategoryItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the category."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the category"
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the category"
                    },
                    "nodes": {
                        "type": "array",
                        "description": "The nodes of the category assigned to the item.",
                        "items": {
                            "$ref": "#/components/schemas/CategoryNodeItem"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "CategoryItem"
            },
            "CategoryNodeItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Category node."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Category node."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the Category node."
                    }
                },
                "description": "CategoryNodeBean"
            },
            "Item": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the item."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the item."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the item."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the item."
                    },
                    "slug": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    },
                    "translatable": {
                        "type": "boolean"
                    },
                    "createdDate": {
                        "type": "object",
                        "description": "Created date of the item. Map<String,String> having value, timezone, and description"
                    },
                    "updatedDate": {
                        "type": "object",
                        "description": "Last updated date of the item. Map<String,String> having value, timezone, and description"
                    },
                    "fields": {
                        "type": "object",
                        "description": "User-defined fields data. Map<String,Object>",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "itemVariations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemVariation"
                        }
                    },
                    "taxonomies": {
                        "$ref": "#/components/schemas/TaxonomiesBean"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item."
            },
            "ItemVariation": {
                "type": "object",
                "properties": {
                    "sourceVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "status": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "varType": {
                        "type": "string"
                    },
                    "setId": {
                        "type": "string"
                    },
                    "isMaster": {
                        "type": "boolean"
                    },
                    "isPublished": {
                        "type": "boolean"
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "Link": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "The target resource's URI. It could be template URI. It is a required property in the get response."
                    },
                    "rel": {
                        "type": "string",
                        "description": "Relation type. It is a required property in the get response."
                    },
                    "templated": {
                        "type": "boolean",
                        "description": "Whether the URI is a template."
                    },
                    "method": {
                        "type": "string",
                        "description": "What HTTP method can be used to access the target resource."
                    },
                    "profile": {
                        "type": "string",
                        "description": "Link to the metadata that describes the target resource."
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "Media type."
                    }
                },
                "description": "Link of the resource."
            },
            "TaxonomiesBean": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "description": "Item taxonomies.",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyItem"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "TaxonomyCategories": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "description": "Taxonomy Categories",
                        "items": {
                            "$ref": "#/components/schemas/CategoryItem"
                        }
                    }
                },
                "description": "CategoriesBean"
            },
            "TaxonomyItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the taxonomy."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the taxonomy"
                    },
                    "shortName": {
                        "type": "string",
                        "description": "The short name of the taxonomy"
                    },
                    "categories": {
                        "description": "The categories of the taxonomy",
                        "$ref": "#/components/schemas/TaxonomyCategories"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "TaxonomyItem"
            },
            "ItemSubResourceListVariationsInfo": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariationsInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Variations"
            },
            "Language": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the item."
                    },
                    "value": {
                        "type": "string",
                        "description": "Language value"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "LanguageItem"
            },
            "VariationsInfo": {
                "type": "object",
                "properties": {
                    "setId": {
                        "type": "string",
                        "description": "Variation set id."
                    },
                    "varType": {
                        "type": "string",
                        "description": "Variation type name."
                    },
                    "masterItem": {
                        "type": "string",
                        "description": "Master item."
                    },
                    "items": {
                        "type": "array",
                        "description": "Content item variations.",
                        "items": {
                            "$ref": "#/components/schemas/Language"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Variations Info."
            },
            "CollectionProperties": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "properties": {
                        "type": "object",
                        "description": "additional collection properties.",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "type": "object"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "CollectionProperties."
            },
            "Taxonomy": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the taxonomy."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the taxonomy."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the taxonomy."
                    },
                    "shortName": {
                        "type": "string",
                        "description": "The short name of the taxonomy."
                    },
                    "customProperties": {
                        "type": "object",
                        "description": "Custom properties of the taxonomy. This consists of a name-value pairs defined by the user.",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "createdDate": {
                        "description": "Created date of the taxonomy.",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedDate": {
                        "description": "Last updated date of the taxonomy.",
                        "$ref": "#/components/schemas/date"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Taxonomy"
            },
            "date": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "description": "date"
            },
            "CategoryAncestorBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Category ancestor."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Category ancestor."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the Category ancestor"
                    }
                }
            },
            "CategoryChildBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the child Category."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the child Category."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the child Category."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the child Category."
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the child Category among its siblings.",
                        "minimum": 0
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "CategoryChildrenBean": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "description": "The children categories of the requested category.",
                        "items": {
                            "$ref": "#/components/schemas/CategoryChildBean"
                        }
                    }
                }
            },
            "CategoryInformation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Category."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Category."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Category."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the Category."
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the Category among its siblings.",
                        "minimum": 0
                    },
                    "parent": {
                        "description": "The parent of the Category.",
                        "$ref": "#/components/schemas/CategoryAncestorBean"
                    },
                    "ancestors": {
                        "type": "array",
                        "description": "The ancestors of the Category. First element represents the root category and the last element represents the immediate parent of the category.",
                        "items": {
                            "$ref": "#/components/schemas/CategoryAncestorBean"
                        }
                    },
                    "children": {
                        "description": "The children of the Category. Children categories are sorted by position starting from lowest to highest value. Only the first 1000 children categories will be expanded.",
                        "$ref": "#/components/schemas/CategoryChildrenBean"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Category Information"
            },
            "Version": {
                "type": "object",
                "required": [
                    "catalog",
                    "isLatest",
                    "lifecycle",
                    "links",
                    "version"
                ],
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "Version of the resource."
                    },
                    "lifecycle": {
                        "type": "string",
                        "description": "Whether a version is actively supported or deprecated."
                    },
                    "isLatest": {
                        "type": "boolean",
                        "description": "Whether it is latest version."
                    },
                    "catalog": {
                        "description": "A child resource that serves as a metadata catalog for all the resources supported in the version.",
                        "$ref": "#/components/schemas/Version"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "terminationDate ": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When a version is not supported anymore."
                    }
                },
                "description": "Version."
            }
        }
    },
    "tags": [
        {
            "name": "Item",
            "description": "The operations from the Item category."
        },
        {
            "name": "Item Variations",
            "description": "The operations from the Item Variations category."
        },
        {
            "name": "Items",
            "description": "The resources used to search across the published items."
        },
        {
            "name": "Items by slug",
            "description": "The resources to manage items by slug."
        },
        {
            "name": "Recommendations",
            "description": "The resources used to access published recommendation results."
        },
        {
            "name": "Renditions",
            "description": "The resources used to access the published digital asset renditions and native files."
        },
        {
            "name": "Taxonomies",
            "description": "The resources used to access published taxonomies and their respective categories."
        },
        {
            "name": "Version Catalog",
            "description": "Version resources in the delivery API."
        }
    ]
}