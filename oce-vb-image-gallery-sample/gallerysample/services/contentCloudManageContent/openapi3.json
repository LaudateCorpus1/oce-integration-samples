{
    "openapi": "3.0.0",
    "info": {
        "description": "The REST API for Content Management provides access to manage assets in Oracle Content and Experience Cloud. Assets include content items and digital assets and their renditions.\n",
        "version": "2020.04.03",
        "title": "REST API for Content Management",
        "x-summary": "The REST API for Content Management provides access to manage assets in Oracle Content and Experience Cloud.",
        "x-vb": {
            "serviceType": "openapi",
            "sourceUrl": "https://docs.oracle.com/en/cloud/paas/content-cloud/rest-api-manage-content/swagger.json"
        }
    },
    "servers": [
        {
            "url": "https://docs.oracle.com/content",
            "x-vb": {
                "authentication": {
                    "authenticated": {
                        "type": "oauth2_user_assertion",
                        "scope": "https://26629BEC35A1421D9D14C82B0E4F2936.cec.ocp.oraclecloud.com:443/urn:opc:cec:all"
                    }
                },
                "forceProxy": "cors"
            }
        }
    ],
    "paths": {
        "/management/api/v1.1/assets/{id}/native": {
            "get": {
                "tags": [
                    "Digital Item Renditions"
                ],
                "summary": "Get Digital Item Native File",
                "description": "Get original uploaded file of a digital item. Content-type header in the response is set to the correct value for the file type.",
                "operationId": "getNativeManagement",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "asOf",
                        "in": "query",
                        "description": "This parameter describes a specific item revision. Currently it only supports this value, <i>latestPublished</i>, which means the latest published version.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-assets-{id}-native-get",
                "x-filename-id": "management-api-v1.1-assets-id-native-get"
            }
        },
        "/management/api/v1.1/assets/{id}/native/{filename}": {
            "get": {
                "tags": [
                    "Digital Item Renditions"
                ],
                "summary": "Get Digital Item Native File with Filename",
                "description": "Get original uploaded file of a digital item. Content-type header in the response is set to the correct value for the file type.",
                "operationId": "getNativeManagementWithFileName",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Name of the digital item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "asOf",
                        "in": "query",
                        "description": "This parameter describes a specific item revision. Currently it only supports this value, <i>latestPublished</i>, which means the latest published version.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-assets-{id}-native-{filename}-get",
                "x-filename-id": "management-api-v1.1-assets-id-native-filename-get"
            }
        },
        "/management/api/v1.1/assets/{id}/versions/{version}/{rendition}/{filename}": {
            "get": {
                "tags": [
                    "Digital Item Renditions"
                ],
                "summary": "Get Rendition of a Digital Item with Filename",
                "description": "Get a specific rendition of the digital item. Content-type header in the response is set to the correct value for the file type.",
                "operationId": "getManagementRenditionWithFileName",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition",
                        "in": "path",
                        "description": "Rendition name of the digital item.",
                        "required": true,
                        "x-example": "ImageSmall",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of an item revision",
                        "required": true,
                        "x-example": "1.005",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Name of the digital item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Format of the digital item's rendition file. When the rendition has only one format, the format query parameter may be omitted.",
                        "required": false,
                        "x-example": "jpg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Rendition type of the digital item.",
                        "required": false,
                        "x-example": "responsiveimage",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-assets-{id}-versions-{version}-{rendition}-{filename}-get",
                "x-filename-id": "management-api-v1.1-assets-id-versions-version-rendition-filename-get"
            }
        },
        "/management/api/v1.1/assets/{id}/{rendition}": {
            "get": {
                "tags": [
                    "Digital Item Renditions"
                ],
                "summary": "Get Rendition of a Digital Item",
                "description": "Get a specific rendition of the digital item. Content-type header in the response is set to the correct value for the file type.",
                "operationId": "getManagementRendition",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition",
                        "in": "path",
                        "description": "Rendition name of the digital item.",
                        "required": true,
                        "x-example": "ImageSmall",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Format of the digital item's rendition file. When the rendition has only one format, the format query parameter may be omitted.",
                        "required": false,
                        "x-example": "jpg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Rendition type of the digital item.",
                        "required": false,
                        "x-example": "responsiveimage",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "asOf",
                        "in": "query",
                        "description": "This parameter describes a specific item revision. Currently it only supports this value, <i>latestPublished</i>, which means the latest published version.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-assets-{id}-{rendition}-get",
                "x-filename-id": "management-api-v1.1-assets-id-rendition-get"
            }
        },
        "/management/api/v1.1/assets/{id}/{rendition}/{filename}": {
            "get": {
                "tags": [
                    "Digital Item Renditions"
                ],
                "summary": "Get Rendition of a Digital Item with Filename",
                "description": "Get a specific rendition of the digital item. Content-type header in the response is set to the correct value for the file type.",
                "operationId": "getManagementRenditionWithFileName_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition",
                        "in": "path",
                        "description": "Rendition name of the digital item.",
                        "required": true,
                        "x-example": "ImageSmall",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Name of the digital item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Format of the digital item's rendition file. When the rendition has only one format, the format query parameter may be omitted.",
                        "required": false,
                        "x-example": "jpg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Rendition type of the digital item.",
                        "required": false,
                        "x-example": "responsiveimage",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "By default, for files of type image, audio and video are rendered inline. For all other file types are downloaded. User can specify the query parameter download=true/false in a request to override this default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "asOf",
                        "in": "query",
                        "description": "This parameter describes a specific item revision. Currently it only supports this value, <i>latestPublished</i>, which means the latest published version.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/octet-stream": {},
                            "application/json": {}
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-assets-{id}-{rendition}-{filename}-get",
                "x-filename-id": "management-api-v1.1-assets-id-rendition-filename-get"
            }
        },
        "/management/api/v1.1/bulkItemsOperations": {
            "post": {
                "requestBody": {
                    "description": "Details of the bulk items operations.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkItemsOperations"
                            }
                        }
                    }
                },
                "tags": [
                    "Items Bulk Operations"
                ],
                "summary": "Performs Bulk Items Operations",
                "description": "Performs bulk items operations with given payload.",
                "operationId": "itemsBulkUpdate",
                "parameters": [
                    {
                        "name": "Prefer",
                        "in": "header",
                        "description": "This parameter is used to control the interaction type (synchronous/asynchronous) of the request. If the header is provided with value respond-async, it indicates that asynchronous interaction is preferred. Otherwise, synchronous interaction is preferred. Asynchronous request is responded with 202 status with a status link in the location header. Synchronous request is responded with 200 along with response body.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "respond-async"
                            ]
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkItemsOperations"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-bulkItemsOperations-post",
                "x-filename-id": "management-api-v1.1-bulkitemsoperations-post"
            }
        },
        "/management/api/v1.1/bulkItemsOperations/publish/{statusId}/ids": {
            "get": {
                "tags": [
                    "Items Bulk Operations"
                ],
                "summary": "Read Items Bulk Operations Publish Item ids",
                "operationId": "getBulkUpdatePublishJobItemIds",
                "parameters": [
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "status id of the bulk items publish operation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PublishItemIds"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-bulkItemsOperations-publish-{statusId}-ids-get",
                "x-filename-id": "management-api-v1.1-bulkitemsoperations-publish-statusid-ids-get"
            }
        },
        "/management/api/v1.1/bulkItemsOperations/{statusId}": {
            "get": {
                "tags": [
                    "Items Bulk Operations"
                ],
                "summary": "Read Items Bulk Operations Status",
                "description": "Read Items Bulk Operations status.",
                "operationId": "getBulkUpdateJobStatus",
                "parameters": [
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "status id of the bulk items operations.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkItemsOperationsStatus"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-bulkItemsOperations-{statusId}-get",
                "x-filename-id": "management-api-v1.1-bulkitemsoperations-statusid-get"
            }
        },
        "/management/api/v1.1/channels": {
            "get": {
                "tags": [
                    "Channels"
                ],
                "summary": "List All Channels",
                "description": "List all channels.",
                "operationId": "listChannels",
                "parameters": [
                    {
                        "name": "roleName",
                        "in": "query",
                        "description": "This parameter is used to filter the returned channels with the given role name. This parameter is optional in the query and by default all the channels are returned.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "viewer",
                                "contributor",
                                "manager"
                            ]
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only fieldNames allowed for now are <i><b>roleName</b></i>, <i><b>repositoryId</b></i> and <i><b>name</b></i> and only allowed operators for now are <i><b>co</b></i> on <i><b>name</b></i> and <i><b>eq</b></i> on the others. This query param is optional and defaults to <i><b>roleName eq \"viewer\"</b></i> which filters the resources with at least given role. <i><b>name</b></i> is interpreted in the context of the resource being requested. For eg. name for content types implies content type name.<br><b>Example</b>:<br> ?q=roleName eq \"manager\")",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "roleName eq \"viewer\""
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields in each channel in the list. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each channel in the list. All the field names are case-sensitive, and users must provide the correct field names in the query. Each channel has both standard fields (<i>id</i>, <i>name</i>, <i>description</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>, <i>isSiteChannel</i>) and additional fields (<i>channelType</i>, <i>publishPolicy</i>, <i>localizationPolicy</i>, <i>channelTokens</i>). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. The user can filter out only the additional fields. This parameter is optional in the query, and by default the result shows only standard fields in the response. Any incorrect or invalid field name given in the query will throw an error. <br><br> <b>Example</b>: <i>?fields=channelTokens,localizationPolicy</i> <br> This returns all standard fields along with the <i>channelTokens</i> and <i>localizationPolicy</i> additional fields for each channel.<br> <b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each channel. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "This parameter is used to control the order of results. The value of this query parameter follows the format of <i> fieldName:[asc/desc]</i>. <i>asc</i> stands for ascending order  <i>desc</i> stands for descending order, default order is <i>asc</i>. The only field names allowed are <b>name</b> and <b>updatedDate</b>.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Channels"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-get",
                "x-filename-id": "management-api-v1.1-channels-get"
            },
            "post": {
                "requestBody": {
                    "description": "Creates a channel with the given information in the payload. The fields <i>id, createdBy, createdDate, updatedBy, updatedDate, channelTokens, isSiteChannel</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Channel"
                            }
                        }
                    }
                },
                "tags": [
                    "Channels"
                ],
                "summary": "Create a Channel",
                "description": "Creates a channel with the given payload.",
                "operationId": "createChannel",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Channel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "409": {
                        "description": "Conflict."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-post",
                "x-filename-id": "management-api-v1.1-channels-post"
            }
        },
        "/management/api/v1.1/channels/{id}": {
            "get": {
                "tags": [
                    "Channels"
                ],
                "summary": "Read a Channel",
                "description": "Read a channel.",
                "operationId": "getChannel",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the channel.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Channel"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-{id}-get",
                "x-filename-id": "management-api-v1.1-channels-id-get"
            },
            "put": {
                "requestBody": {
                    "description": "Updates a channel with the given information in the payload. The fields <i>createdBy, createdDate, updatedBy, updatedDate, channelTokens, isSiteChannel</i>and <i>links</i> will be ignored even if given in the payload. This payload is optional if the endpoint is being used to refresh the channel token.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Channel"
                            }
                        }
                    }
                },
                "tags": [
                    "Channels"
                ],
                "summary": "Update a Channel",
                "description": "Updates a channel with the given payload. Can also be used to refresh the channel token.",
                "operationId": "updateChannel",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the channel.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "refreshTokens",
                        "in": "query",
                        "description": "Refresh Token",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Channel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-{id}-put",
                "x-filename-id": "management-api-v1.1-channels-id-put"
            },
            "delete": {
                "tags": [
                    "Channels"
                ],
                "summary": "Delete a Channel",
                "description": "Deletes a channel.",
                "operationId": "deleteChannel",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the channel.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-{id}-delete",
                "x-filename-id": "management-api-v1.1-channels-id-delete"
            }
        },
        "/management/api/v1.1/channels/{id}/channelSecret": {
            "post": {
                "tags": [
                    "Channel Secret"
                ],
                "summary": "Generate a channel secret",
                "description": "Generate a secret for given channel",
                "operationId": "createChannelSecret",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Generates a secret for the given channelId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChannelSecretService"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-{id}-channelSecret-post",
                "x-filename-id": "management-api-v1.1-channels-id-channelsecret-post"
            },
            "put": {
                "tags": [
                    "Channel Secret"
                ],
                "summary": "Refresh channel secret",
                "description": "Refresh secret for given channel",
                "operationId": "refreshChannelSecret",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Refreshes secret for the given channelId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChannelSecretService"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-{id}-channelSecret-put",
                "x-filename-id": "management-api-v1.1-channels-id-channelsecret-put"
            },
            "delete": {
                "tags": [
                    "Channel Secret"
                ],
                "summary": "Delete the channel secret",
                "description": "Delete the secret of a given channel",
                "operationId": "deleteSecretKey",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deletes the secret for the given channelId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-{id}-channelSecret-delete",
                "x-filename-id": "management-api-v1.1-channels-id-channelsecret-delete"
            }
        },
        "/management/api/v1.1/channels/{id}/oauthToken": {
            "post": {
                "requestBody": {
                    "description": "Channel Secret of the channel to generate OAuth Token",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChannelSecret"
                            }
                        }
                    }
                },
                "tags": [
                    "OAuth Tokens"
                ],
                "summary": "Generate an OAuth Token",
                "description": "for given channel",
                "operationId": "createToken",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Generates an OAuth token for the given channelId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthToken"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-{id}-oauthToken-post",
                "x-filename-id": "management-api-v1.1-channels-id-oauthtoken-post"
            }
        },
        "/management/api/v1.1/channels/{id}/permissions": {
            "get": {
                "tags": [
                    "Channels"
                ],
                "summary": "List All Permissions on a Channel",
                "description": "List all permissions on a channel.",
                "operationId": "listChannelPermissions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the channel.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourcePermissions"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-channels-{id}-permissions-get",
                "x-filename-id": "management-api-v1.1-channels-id-permissions-get"
            }
        },
        "/management/api/v1.1/connectors": {
            "get": {
                "tags": [
                    "Connectors"
                ],
                "summary": "List All Connectors",
                "description": "List all connectors.",
                "operationId": "getConnectors",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only fieldNames allowed for now are <i><b>name</b></i> and <i><b>connectorType</b></i> and only allowed operators for now are <i><b>co</b></i> on <i><b>name</b></i> and <i><b>eq</b></i> on <i><b>connectorType</b></i>. This query param is optional with no default.<br><b>Example</b>:<br> ?q=name co \"foo\")<br><b>Example</b>:<br> ?q=connectorType eq \"translation\")<br><b>Example</b>:<br> ?q=connectorType eq \"content\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connectors"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-connectors-get",
                "x-filename-id": "management-api-v1.1-connectors-get"
            }
        },
        "/management/api/v1.1/dataTypes": {
            "get": {
                "tags": [
                    "Types"
                ],
                "summary": "List All Data Types",
                "description": "List information of all the data types.",
                "operationId": "listDataTypes",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataTypes"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-dataTypes-get",
                "x-filename-id": "management-api-v1.1-datatypes-get"
            }
        },
        "/management/api/v1.1/items": {
            "get": {
                "tags": [
                    "Items Search"
                ],
                "summary": "Query Items",
                "description": "This resource enables filtering of management content by query. You can control the number of items to be fetched, paginated, and sorted. Additionally, this resource can fetch field values of matching items.<br>Query expression syntax supports conditions that match the field values. A NOT operator is supported and negates the results of matches it applies to - e.g. NOT (type eq \"Type1\"). Note that the space between the NOT and the following opening brace is required. You can also query across all fields for a specific phrase. Many such query conditions can be joined by using AND/OR operators and grouped with parentheses.<br><br><table><tr><td>Query expression</td><td> <i>?q=(type eq \"Employee\" AND (fields.emails co \"example.com\" OR fields.emails co \"example.org\")) </i> </td></tr><tr><td>Query expression usage with this resource</td><td> <i>/management/api/v1.1/items?q=(type eq \"Employee\" AND (fields.emails co \"example.com\" OR fields.emails co \"example.org\")) </i> </td></tr></table><br> <i>Notes: </i> Field names used in the Query are case-sensitive. <br><br> In general, two forms of filtering are supported by this resource.<br><ul><li><b>Query within a type: </b> Query within a type allows query conditions that apply to fields of the type. <br><b>For example:</b><br><i>/management/api/v1.1/items?q=(type eq \"Employee\" AND fields.role eq \"Senior Developer\") </i><br>Here, role is a field of type Employee.</li><li><b>Query across types: </b> When no type is specified in the query, all types are queried. Also, multi type query is allowed and it comes under Global query. However, query conditions are limited to standard fields (<i>id</i>, <i>type</i>, <i>name</i>, <i>description</i>, <i>slug</i>, <i>translatable</i>, <i>language</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>, <i>repositoryId</i>, <i>channels</i>, <i>collections</i>, <i>status</i>, <i>tags</i>, <i>isPublished</i>, <i>languageIsMaster</i>, <i>taxonomies</i>) only. <br><b>For example: </b> <br><i> /management/api/v1.1/items?q=(name eq \"John\")</i> or <i>/management/api/v1.1/items?q=(description co \"users\")</i></li></ul><br> In either form, it is possible to search by matching anywhere (any field) by specifying a default match criteria. Such criteria are specified in a generic query that matches values of the items across all fields. <br><b>For example:</b><br><i>/management/api/v1.1/items?default=\"coffee\" </i><br><i>/management/api/v1.1/items?q=(type eq \"Employee\"&default=\"senior\") </i><br><br> In either form, while querying using standard fields, <i>name, description, type, slug, language, status</i> are to be considered as a <i>text</i> data type (single valued), <i>id</i>, <i>repositoryId</i> as a <i>reference</i> data type (single valued), <i>createdDate, updatedDate</i> as a <i>datetime</i> data type (single valued), <i>translatable, isPublished, languageIsMaster</i> as a boolean data type (single valued) and <i>collections</i>, <i>channels</i>, <i>tags</i>, <i>taxonomies</i>, <i>suggestedTaxonomies</i> as a reference data type (multi valued)</li></ul><br><br><table border=1><tr><th align=\"left\">Operator</th><th align=\"left\">Example</th><th align=\"left\">Supported data types</th><th align=\"left\">Description</th></tr><tr><td>eq</td><td>?q=(name eq \"John\")<br><br>?q=(type eq \"DigitalAsset\")<br><br>?q=(type eq \"Employee\" and fields.DOB eq \"1994/09/26T16:23:45.208\")<br><br>?q=(taxonomies.categories.id eq \"B9F568DC43C54803AC76012783FA5101\")<br><br>?q=(taxonomies.categories.name eq \"cars\")<br><br>?q=(taxonomies.categories.apiName eq \"cars-unique\")<br><br>?q=(taxonomies.categories.nodes.id eq \"B9F568DC43C54803AC76012783FA5101\")<br><br>?q=(taxonomies.categories.nodes.name eq \"cars\")<br><br>?q=(taxonomies.categories.nodes.apiName eq \"cars\")<br/><br/>?q=(suggestedTaxonomies.categories.id eq \"B9F568DC43C54803AC76012783FA5101\")</td><td><i>text, reference, number, decimal, boolean, datetime.</i></td><td>Equals operator (eq) matches the exact value supplied in the query. This operator is not applicable to multivalued data types. The value provided with this operator is not case-sensitive except for standard fields. This operator considers even special characters in the value.</td></tr><tr><td>ne</td><td>?q=(name ne \"John\")</td><td><i>text, reference, number, decimal, boolean, datetime.</i></td><td>Not Equals operator (ne) matches items that do not match the exact value supplied in the query. This operator is not applicable to multivalued data types. The value provided with this operator is not case-sensitive except for standard fields. This operator considers even special characters in the value.</td></tr><tr><td>co</td><td>?q=(type eq \"Employee\" AND name co \"john alex\")<br><br>?q=(type eq \"Car\" AND fields.features co \"manual\")<br><br>?q=(taxonomies.categories.name co \"red\")<br><br>?q=(taxonomies.categories.nodes.name co \"car\")</td><td><i>text, reference, number, decimal, datetime, largetext</i></td><td>Contains operator (co) matches every word given in the criteria. The words are formed by splitting the value by special characters.  It gives the results that have at least one of the words (in this example, john or alex or both). This operator does not consider special characters in the value while searching. This operator does not perform a search on stop words. Refer to Apache Lucene documentation to know more about stop words. <br><br>This operator is applicable to <i>text, largetext</i> in case of single-valued attributes, whereas for multivalued attributes, it is applicable to <i>text, reference, number, decimal, datetime, largetext</i>. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. The value provided with this operator is not case-sensitive.</td></tr><tr><td>nc</td><td>?q=(name nc \"john alex\")</td><td><i>text, reference, number, decimal, datetime, largetext</i></td><td>Not Contains operator (nc) matches items that would not match a co operator with the same criteria. This operator is not applicable to multivalued data types.</td></tr><tr><td>sw</td><td>?q=(type eq \"Employee\" AND name sw \"Joh\")<br><br>?q=(type eq \"Employee\" AND fields.city sw \"Los\")<br><br>?q=(taxonomies.categories.name sw \"cat\")<br><br>?q=(taxonomies.categories.nodes.name sw \"red\")</td><td><i>text</i></td><td>Starts With operator (sw) matches only the initial character values given in the field condition. This operator is not applicable to multivalued data types. The value provided with this operator is not case-sensitive.</td></tr><tr><td>ge</td><td>?q=(type eq \"Employee\" AND fields.age ge \"40\")<br><br>?q=(type eq \"DigitalAsset\" AND updatedDate ge \"20171026\")</td><td><i>number, decimal, datetime</i></td><td>Greater than or equal to operator (ge) matches only numeric and datetime values. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. This operator is not applicable to multivalued data types.</td></tr><tr><td>le</td><td>?q=(type eq \"Employee\" AND fields.weight le \"60.6\")</td><td><i>number, decimal, datetime</i></td><td>Less than or equal to operator (le) matches only numeric and datetime values. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. This operator is not applicable to multivalued data types.</td></tr><tr><td>gt</td><td>?q=(type eq \"Employee\" AND fields.age gt \"20\")</td><td><i>number, decimal, datetime</i></td><td>Greater than operator (gt) matches only numeric and datetime values. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. To understand the possible datetime formats, refer to the <i>Supported date/datetime formats (24Hrs)</i> table below. This operator is not applicable to multivalued data types.</td></tr><tr><td>lt</td><td>?q=(type eq \"Employee\" AND fields.age lt \"20\")<br><br>?q=(type eq \"Employee\" AND createdDate lt \"1994/09/26T16:23:45.208\")</td><td><i>number, decimal, datetime</i></td><td>Less than operator (lt) matches only numeric and datetime values. To understand the possible datetime formats, please refer to the section: <b>Supported date/datetime formats (24Hrs)</b>. This operator is not applicable to multivalued data types.</td></tr><tr><td>mt</td><td>?q=(type eq \"Car\" AND fields.review mt \"petrol 20KMPL\")<br><br>?q=(type eq \"Employee\" AND name mt \"Jo?n\")<br><br>?q=(type eq \"Employee\" AND name mt \"Jo*\")<br><br>?q=(type eq \"Employee\" AND fields.role mt \"senior*\")</td><td><i>text, largetext</i></td><td>Phrase query or proximity search (matches) operator (mt) enables you to find words that are within a specific distance to one another. Results are sorted by best match. It is useful for searching content items when values given in the criteria \"petrol 20kmpl\"  need to discover actual content that may contain \"<i>petrol</i> fuel mileage runs <i>20KMPL</i> in the speed way\". <br><br>Matches operator also can use a wildcard within the given value and supports both single-character and multiple-character wildcard searches within a single value. Use ? for a single-character wildcard and * for multiple characters. Both \"John\" and \"Joan\" can be searched by \"Jo?n\" for a single character and \"Jo*\" for multiple characters. <br><br>This operator is applicable to both single-valued and multivalued data types. This operator does not perform a search on stop words. Refer to Apache Lucene documentation to know more about stop words. The value provided with this operator is not case-sensitive.</td></tr><tr><td>sm</td><td>?q=(type eq \"Employee\" And fields.city sm \"Rome\")</td><td><i>text, largetext</i></td><td>Similarity query operator. This operator allows searching for values that sound like specified criteria - also called fuzzy search, which uses by default a maximum of two edits to match the result. \"Rome\" is similar to \"Dome\". This operator is applicable to both single-valued and multivalued data types. The value provided with this operator is not case-sensitive.</td></tr><tr><td>AND</td><td>?q=(type eq \"Employee\" AND name eq \"John\" AND fields.age ge \"40\")</td><td>-NA-</td><td>AND operator, can be used to put an AND condition between multiple query conditions. This takes precedence over OR.</td></tr><tr><td>OR</td><td>type eq \"Employee\" AND name eq \"John\" OR fields.age ge \"40\"</td><td>-NA-</td><td>OR operator can be used to put an OR condition between multiple query conditions.</td></tr><tr><td>( )</td><td>?q=(type eq \"Employee\" AND (name eq \"John\" AND fields.age ge \"40\"))<br><br>?q=(type eq \"Employee\" AND ( (name eq \"John\" AND fields.age ge \"40\") OR fields.weight ge 60))</td><td>-NA-</td><td>Parenthesis, enclosing operator to group the conditions in the criteria. This takes highest precedence, followed by AND, and then by OR.</td></tr></table> <br><br><table><tr><th colspan=\"2\">Additional Notes</th></tr><tr><td>Type specific query</td><td>This query always uses only the <i>eq</i> operator. <i>eq</i> works with case-sensitive type name. Multitype query is supported, such as q=(type eq \"Employee\" OR type eq \"Address\"), however, it will be query across types. <br> <b>Example:</b><br> q=(type eq \"Employee\" OR type eq \"DigitalAsset\") is supported because of single type search. </td></tr><tr><td>Date query</td><td>Date query is a special type of query because of various date formats associated with it. All the datetime values in the query are assumed to be in the UTC (timezone) only, unless the offset is added in ISO 8901 format. The query results will always be in UTC timezone format for all datetime fields. Fields with the datatype <i> datetime </i> should use the operators <i> ge, gt, le, lt</i> for range query and use <i>eq</i> for an equals match.<br><br> <b>Example:</b><br> Query Products by manufactureDate (<i>datetime</i>) field using the <i>ge</i> operator.<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(type eq \"Product\" AND fields.manufactureDate ge \"1989-03-26\"). The given date format is <i>YYYY-MM-DD</i>.<br><br>Explore more date/datetime specific query examples in the <b><a href=''#examples'' data-toggle=''ignore''>Examples</a></b> section and also to understand the accepted date/datetime formats in the section below (supported date/datetime formats). </td></tr><tr>\r\n<td>Decimal values</td>\r\n<td>Decimal number query is supported up to 3 digits after decimal points, and the rest of the digits after 3 will be ignored. https://{cecsdomain}/content/management/api/v1.1/items?q=(type eq \"Product\" AND fields.price ge 425.3214), will result in all the products where price is greater than or equal to 425.321.</td>\r\n</tr><tr><td>Large text datatype query</td><td>Fields with the datatype <i>largetext</i> are not stored, so the query result cannot return its value. But the field value can be used in a query condition.</tr><tr><td>Generic query search</td><td>Generic query search is a default search query, which can be used when the user can search by only value without using any field name or operators. Internally generic search uses the <i>co</i> operator. This query does not support wildcard characters. This search does not perform search on stop words. Refer to Apache Lucene documentation to know more about stop words.<br><b>Example:</b><br> ?q=(type eq \"Employee\")&fields=all&default=John. This will return the search results for the <i>Employee</i> type where the value <i>John</i> matches to field name , description or any user-defined fields.<br><b>Example:</b><br> ?q=(type eq \"Article\")&default=skating. This will return the search results for <i>Article</i> type where the value <i>skating</i> matches to fields name, description or any user-defined fields.</td></tr><tr><td>ID search</td><td>Search query using id attribute. <br> <b>Example:</b><br> ?q=(type eq \"Employee\" AND id eq \"COREAF29AC6ACA9644F9836E36C7B558F316\"). The value of id belongs to the item being queried itself, here the id of type Employee. <br> It is possible to include multiple item ids in the query expression <br> <b>Example:</b><br> ?q=(type eq \"Employee\" AND (id eq \"COREAF29AC6ACA9644F9836E36C7B558F316\" OR id eq \"COREAF29AC6ACA9644F9836E36C7B558F987\")).</td></tr><tr><td>Category search</td><td>Search items categorized with given category id, category name, category apiName, category node id, category node name or category node apiName attributes. <br> <b>Example:</b><br> ?q=(taxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\")<br>The value of <i>taxonomies.categories.id</i> belongs to the category assigned to items being queried. It is possible to include multiple category ids or names in the query expression. <br> <b>Example:</b><br> ?q=(taxonomies.categories.name co \"cars\" OR taxonomies.categories.name sw \"red\")<br> <b>Example:</b><br> ?q=(taxonomies.categories.apiName eq \"All-furnitures\")<br>The value of <i>taxonomies.categories.apiName</i> belongs to the category assigned to items being queried. It is possible to include multiple category apiName values in the query expression.<br> <b>Example:</b><br> ?q=(taxonomies.categories.nodes.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\")<br>The value of <i>taxonomies.categories.nodes.id</i> belongs to any node of categories assigned to items being queried. It is possible to include multiple category node ids or node names in the query expression.<br> <b>Example:</b><br> ?q=(taxonomies.categories.nodes.name co \"cars\" OR taxonomies.categories.nodes.name sw \"red\")<br> <b>Example:</b><br> ?q=(taxonomies.categories.nodes.apiName eq \"All-furnitures\" OR taxonomies.categories.nodes.apiName eq \"all-accessories\")<br>The value of <i>taxonomies.categories.nodes.apiName</i> belongs to any node of categories assigned to items being queried. It is possible to include multiple category node apiName values in the query expression.</td></tr><tr><td>Suggested Category search</td><td>Search items that could be categorized into a given category with category id, rejected status and language. Only one category id can be used for filtering at a time. <i>repositoryId</i> is mandatory when filtering on suggestedTaxonomy. Default status is NOT rejected. When no language is specified items from all languages are returned.<br/><br/> <b>Example:</b><br/> ?q=(repositoryId eq \"86E125F3D78B409EBF61737636599FE1\" AND suggestedTaxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\")<br/>Lists all the items from all languages that are suggested for the given category id for the given repository and not rejected.<br/> <b>Example:</b><br/> ?q=(repositoryId eq \"86E125F3D78B409EBF61737636599FE1\" AND suggestedTaxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" AND suggestedTaxonomies.categories.isRejected eq \"false\")<br/>Lists all the items from all languages that are suggested for the given category id for the given repository and not rejected.<br/> <b>Example:</b><br/> ?q=(repositoryId eq \"86E125F3D78B409EBF61737636599FE1\" AND suggestedTaxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" AND suggestedTaxonomies.categories.isRejected eq \"false\" AND language co \"en-US\")<br/>Lists all the items from the given language that are suggested for the given category id for the given repository.<br/> <b>Example:</b><br/> ?q=(repositoryId eq \"86E125F3D78B409EBF61737636599FE1\" AND suggestedTaxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" AND suggestedTaxonomies.categories.isRejected eq \"true\" AND language co \"en-US\")<br/>Lists all the items from the given language that are previously rejected for the given category id for the given repository.</td></tr><tr><td>Reference field search</td><td>Search query using reference attribute. <br> <b>Example:</b><br> ?q=(type eq \"Employee\" AND fields.department eq \"COREAF29AC6ACA9644F9836E36C7B558F412\"). <br>The value of department belongs to the id of an item of type Department.</td></tr></table>  <br> <br> <table><tr><th colspan=2>Supported date/datetime formats (24Hrs)</th></tr><tr><td><b>Format</b></td><td><b>Example</b></td></tr><tr><td>YYYY-MM-DD</td><td>1989-03-26</td></tr><tr><td>YYYY/MM/DD</td><td>1989/03/26</td></tr><tr><td>DD-MM-YYYY</td><td>26-03-1989</td></tr><tr><td>DD/MM/YYYY</td><td>26/03/1989</td></tr><tr><td>YYYY-MM-DD''T''hh:mm:ss</td><td>1989-03-26T18:32:38</td></tr><tr><td>YYYY/MM/DD''T''hh:mm:ss</td><td>1989/03/26T18:32:38</td></tr><tr><td>DD-MM-YYYY''T''hh:mm:ss</td><td>26-03-1989T18:32:38</td></tr><tr><td>DD/MM/YYYY''T''hh:mm:ss</td><td>26/03/1989T18:32:38</td></tr><tr><td>YYYY-MM-DD''T''hh:mm:ss.SSS</td><td>1989-03-26T18:32:38.840</td></tr><tr><td>YYYY/MM/DD''T''hh:mm:ss.SSS</td><td>1989/03/26T18:32:38.840</td></tr><tr><td>DD-MM-YYYY''T''hh:mm:ss.SSS</td><td>26-03-1989T18:32:38.840</td></tr><tr><td>DD/MM/YYYY''T''hh:mm:ss.SSS</td><td>26/03/1989T18:32:38.840</td></tr><tr><td>YYYYMMDD</td><td>19890326</td></tr><tr><td>YYYYMMDDhhmmss</td><td>19890326183238</td></tr><tr><td>YYYYMMDDhhmmssSSS</td><td>19880326183238840</td></tr><tr><td>YYYY-MM-DD''T''hh:mm:ss.SSS+/-HH:mm</td><td>1989-03-26T18:32:38.840+05:30</td></tr><tr><td>YYYY-MM-DD''T''hh:mm:ss+/-HH:mm</td><td>1989-03-26T18:32:38+05:30</td></tr></table>.",
                "operationId": "getItemsForManagement",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Many such query conditions can be joined using AND/OR operators and grouped with parentheses. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. In case of query across type the field names are limited to standard fields (<i>id</i>, <i>type</i>, <i>name</i>, <i>description</i>, <i>slug</i>, <i>translatable</i>, <i>language</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>, <i>repositoryId</i>, <i>status</i>, <i>channels</i>, <i>collections</i>, <i>tags</i>, <i>isPublished</i>, <i>languageIsMaster</i>, <i>taxonomies</i>). However in case of type specific query the field names are limited to standard fields and user defined fields (except fields of largeText data type). The only values allowed in the operator are <i>eq</i> (Equals), <i>co</i> (Contains), <i>sw</i> (Startswith), <i>ge</i> (Greater than or equals to), <i>le</i> (Less than or equals to), <i>gt</i> (Greater than), <i>lt</i> (Less than), <i>mt</i> (Matches), <i>sm</i> (Similar).<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(name eq \"John\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(type eq \"Employee\" AND name eq \"John\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(type eq \"Employee\" AND ((name eq \"John\" AND field.age ge \"40\") OR fields.weight gt \"70\"))<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(taxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" OR (taxonomies.categories.name co \"cat\" AND taxonomies.categories.name co \"red\"))<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(taxonomies.categories.nodes.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" OR taxonomies.categories.nodes.name co \"cars\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression, that matches values of the items across all fields.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields in each item in the result. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each items in the result. All the field name are case-sensitive, and users must provide the correct field name in the query. All the user-defined field names should be provided with prefix fields and followed by period (.). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard fields are returned in case of query across types and in case of type specific query, all standard and user fields are returned. This parameter is optional in the query, and by default the result shows only standard fields name, description. The standard fields <i>id</i>, <i>type</i> are always returned irrespective of any field asked. Any incorrect or invalid field name given in the query will throw an error.<br><br><b>Example</b>: This returns standard fields <i>name</i>, user fields <i>state</i> and <i>country</i> of type <i>Address</i> in the search results. <br>https://{cecsdomain}/content/management/api/v1.1/items?q=type eq \"Address\"&fields=fields.state,fields.country <br><br><b>Example</b>: This returns all the attributes for a specific type used in the search results.<br>https://{cecsdomain}/content/management/api/v1.1/items?q=type eq \"Address\"&fields=all<br><br><b>Example</b>: This returns standard fields <i>name</i>, <i>createdBy</i> in the search results for all items across all the types. <br>https://{cecsdomain}/content/management/api/v1.1/items?fields=name,createdBy<br><br><b>Example</b>: This returns all the standard fields in the search results for all items across all the types. <br>https://{cecsdomain}/content/management/api/v1.1/items?fields=all",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name,description"
                        }
                    },
                    {
                        "name": "repositoryId",
                        "in": "query",
                        "description": "This parameter accepts id of a repository and is used to control the returned results. The result will contain only items belonging to the specified repository. This can also be achieved by specifying the repositoryId (standard field of an item) equals query condition (<i>repositoryId eq \"{repositoryId}\"</i>) as one of the query conditions in the <b>q</b> query parameter. This is an optional parameter and by default returns results from all the repositories.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "This parameter accepts channelToken of a channel and is used to control the returned results. The result will contain only items, targeted to the channel that the specified channelToken belongs to. This can also be achieved by specifying the channels (standard field of an item) contains query condition (<i>channels co \"{channelId}\"</i>) as one of the query conditions in the <b>q</b> query parameter. This is an optional parameter and by default returns all the results.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer less than 10000 and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result. If offset+limit > 10000, then we treat limit as 10000-offset and gives results.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "The orderBy parameter is used to control the order (ascending/descending) of queried items.<br/>This parameter is optional in the query and by default the results are sorted by <i>updatedDate</i> when <i>default</i> parameter is empty. When <i>default</i> parameter has value(s), the results are sorted by the relevance of <i>tags</i> of the items to the default values.<br/><br/> This parameter accepts <i>featured()</i> or field name separated by a colon (:) ,for which the user wants to sort the results and sort order. <br> format : <i><b>orderBy={fieldName}:{asc/desc}</b></i> (*Note : asc stands for ascending and desc for descending. asc and desc are always in lower case.)<br> In a type-specific query, field names can be either standard fields (<i>name</i>, <i>createdDate</i>, <i>updatedDate</i>) user-defined fields (single-valued data types (<i>number, decimal, datetime</i>). But in case of a query across types, only <i>name</i>, <i>createdDate</i> and <i>updatedDate</i> (Standard fields) are allowed. All the user-defined field names should be provided with prefix fields and followed by a period (.). While filtering on <i>suggestedTaxonomies</i> the default sort order will by relevance of the suggestion to the item.<br/><br>The sort order is optional, and by default it is descending. Any incorrect or invalid field name given in the query will be ignored. When <i>featured()</i> is given and <i>default</i> parameter has value(s), the results are sorted by the relevance of <i>tags</i> of the items to the default values<br><br> <b>Example</b> : <i>orderBy=name:asc</i> <br> Returns all the items in the ascending order of name.</td><br/> <b>Example</b> : <i>orderBy=updateDate:asc</i> <br>Returns all the items in the ascending order of updateDate.<br/> <b>Example</b> : <i>orderBy=fields.age:desc</i> <br>Returns all the items in the descending order of age.<br/> <b>Example</b> : <i>orderBy=fields.age</i> <br> Returns all the items in the ascending order of age.<br/> <b>Example</b> : <i>default=apples&orderBy=featured()</i> <br> Returns all the items sorted by the relevance of <i>tags</i> of the items to the apples",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchItems"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-get",
                "x-filename-id": "management-api-v1.1-items-get"
            },
            "post": {
                "requestBody": {
                    "description": "Creates an item with the given information in the payload. The fields <i>id, createdBy, createdDate, updatedBy, updatedDate, </i><i>slug, variations, channels, collections, relationships, publishInfo, suggestedTaxonomies</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Item"
                            }
                        }
                    }
                },
                "tags": [
                    "Items"
                ],
                "summary": "Create an Item",
                "description": "Creates an item with the given payload.",
                "operationId": "createItem",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-post",
                "x-filename-id": "management-api-v1.1-items-post"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Read an Item by slug",
                "description": "Read an item by slug.",
                "operationId": "getItemBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (with <i>all</i> in lower case), all the fields of the reference type of the requested item are expanded. When expand is not specified, item response contains links to the referenced items. Expansion of this form is supported for one level only; a request to expand beyond the first level of referenced fields will produce the response HTTP 400. When the expand parameter contains a nonexistent field as per type definition of the requested item, the resource produces HTTP 400.<br><br><b>Example</b> : expand=<i>fields.field1,fields.field2</i> <br>Returns field1 and field2: names of the user-defined fields in the type to which this item belongs.<br><b>Example</b> : expand=<i>taxonomies</i> <br>Returns taxonomies field containing all categories assigned to this item.<br><b>Example</b> : expand=<i>suggestedTaxonomies</i> <br>Returns suggested taxonomies field containing all categories suggested for this item.<br><b>Example</b> : expand=<i>all</i> <br>Returns all fields available for this item.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asOf",
                        "in": "query",
                        "description": "This parameter describes a specific item revision. Currently it only supports this value, <i>latestPublished</i>, which means the latest published version. The slug value passed in the url should always be that of the latest management item.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asOfDate",
                        "in": "query",
                        "description": "This parameter defines a point of time as of which the item revision should be returned. The date string format is <i>yyyy-MM-dd'T'HH:mm:ss'Z'</i> or <i>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</i>.  The slug value passed in the url should always be that of the latest management item.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/channels": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Channels of an Item by slug",
                "description": "Lists all channels of a given Item by slug.",
                "operationId": "listItemChannelsBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListChannelId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-channels-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-channels-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/collections": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Collections of an Item by slug",
                "description": "Lists all collections of a given Item by slug.",
                "operationId": "listItemCollectionsBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListCollectionId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-collections-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-collections-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/publishInfo": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Publish Info of an Item by slug",
                "description": "Lists Publish Info of a given Item by slug.",
                "operationId": "listItemPublishInfoBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListPublishInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-publishInfo-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-publishinfo-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/publishedChannels": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Published Channels of an Item by slug",
                "description": "Lists all published channels of a given Item by slug.",
                "operationId": "listItemPublishedChannelsBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListPublishedChannelId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-publishedChannels-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-publishedchannels-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/relationships": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Relationships of an Item by slug",
                "description": "Lists all Relationships of a given Item by slug.",
                "operationId": "listItemRelationsBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceRelationships"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-relationships-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-relationships-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/tags": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Tags of an Item by slug",
                "description": "Lists all Tags of a given Item by slug.",
                "operationId": "listItemTagsBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListTags"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-tags-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-tags-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/taxonomies": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Taxonomies of an Item by slug",
                "description": "Lists all Taxonomies of a given Item by slug.",
                "operationId": "listItemTaxonomiesBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListTaxonomyId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-taxonomies-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-taxonomies-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/variations": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Variations of an Item by slug",
                "description": "Lists all Variations of a given Item by slug.",
                "operationId": "listItemVariationsBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListVariationsInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-variations-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-variations-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/variations/{variationType}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List all Item Variations of a Variation Type by slug",
                "description": "Lists all item variations of a variation type by slug.",
                "operationId": "listVariationsByTypeBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "x-example": "language",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationsInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-variations-{variationType}-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-variations-variationtype-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/variations/{variationType}/master": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Read master of an Item Variation set by slug",
                "operationId": "getMasterItemBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "x-example": "language",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemVariationId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-variations-{variationType}-master-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-variations-variationtype-master-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/variations/{variationType}/{variationValue}": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "Read Item Variation of a Variation Type Value by slug",
                "description": "Read item variation of a variation type value by slug.",
                "operationId": "getItemForVariationBySlug",
                "parameters": [
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the target channel.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "x-example": "language",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationValue",
                        "in": "path",
                        "description": "Value of the variation type. Example: <i>en-US</i>, <i>fr</i> etc.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationItem"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-variations-{variationType}-{variationValue}-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-variations-variationtype-variationvalue-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/versionInfo": {
            "get": {
                "tags": [
                    "Items by slug"
                ],
                "summary": "List Version Info of an Item by slug",
                "description": "Lists Version Info of a given Item by slug.",
                "operationId": "listItemVersionInfoBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListVersionInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-versionInfo-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-versioninfo-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/versions": {
            "get": {
                "tags": [
                    "Item Revisions"
                ],
                "summary": "List item revisions by slug",
                "description": "List all revisions of an item by its latest management item slug value.",
                "operationId": "getItemRevisionsBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemRevisions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-versions-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-versions-get"
            }
        },
        "/management/api/v1.1/items/.by.slug/{slug}/versions/{version}": {
            "get": {
                "tags": [
                    "Item Revisions"
                ],
                "summary": "Read an item revision by slug",
                "description": "Read an item revision with given version by its latest management item slug value.",
                "operationId": "getItemRevisionBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Slug value of the latest management Item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of an item revision",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (with <i>all</i> in lower case), all the fields of the reference type of the requested item are expanded. When expand is not specified, item response contains links to the referenced items. Expansion of this form is supported for one level only; a request to expand beyond the first level of referenced fields will produce the response HTTP 400. When the expand parameter contains a nonexistent field as per type definition of the requested item, the resource produces HTTP 400.<br>Examples : </br><ol>expand=<i>fields.field1,fields.field2</i></ol><ol>expand=<i>all</i></ol> where field1, field2 are names of the user-defined fields in the type to which this item belongs.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-.by.slug-{slug}-versions-{version}-get",
                "x-filename-id": "management-api-v1.1-items-slug-slug-versions-version-get"
            }
        },
        "/management/api/v1.1/items/{guid}/versions": {
            "get": {
                "tags": [
                    "Item Revisions"
                ],
                "summary": "List item revisions",
                "description": "List all revisions of an item.",
                "operationId": "getItemRevisions",
                "parameters": [
                    {
                        "name": "guid",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemRevisions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{guid}-versions-get",
                "x-filename-id": "management-api-v1.1-items-guid-versions-get"
            }
        },
        "/management/api/v1.1/items/{guid}/versions/{version}": {
            "get": {
                "tags": [
                    "Item Revisions"
                ],
                "summary": "Read an item revision",
                "description": "with given version.",
                "operationId": "getItemRevision",
                "parameters": [
                    {
                        "name": "guid",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of an item revision",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (with <i>all</i> in lower case), all the fields of the reference type of the requested item are expanded. When expand is not specified, item response contains links to the referenced items. Expansion of this form is supported for one level only; a request to expand beyond the first level of referenced fields will produce the response HTTP 400. When the expand parameter contains a nonexistent field as per type definition of the requested item, the resource produces HTTP 400.<br>Examples : </br><ol>expand=<i>fields.field1,fields.field2</i></ol><ol>expand=<i>all</i></ol> where field1, field2 are names of the user-defined fields in the type to which this item belongs.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{guid}-versions-{version}-get",
                "x-filename-id": "management-api-v1.1-items-guid-versions-version-get"
            }
        },
        "/management/api/v1.1/items/{id}": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "Read an Item",
                "description": "Read an item.",
                "operationId": "getItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the item's response. Accepts a comma-separated list of field names or <i>all</i>. All the user-defined field names should be provided with prefix <i>fields</i> and followed by a period (.). If these fields are of a reference type, then the resource expands their data inline in the response. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (with <i>all</i> in lower case), all the fields of the reference type of the requested item are expanded. When expand is not specified, item response contains links to the referenced items. Expansion of this form is supported for one level only; a request to expand beyond the first level of referenced fields will produce the response HTTP 400. When the expand parameter contains a nonexistent field as per type definition of the requested item, the resource produces HTTP 400.<br><br><b>Example</b> : expand=<i>fields.field1,fields.field2</i> <br>Returns field1 and field2: names of the user-defined fields in the type to which this item belongs.<br><b>Example</b> : expand=<i>taxonomies</i> <br>Returns taxonomies field containing all categories assigned to this item.<br><b>Example</b> : expand=<i>suggestedTaxonomies</i> <br>Returns suggested taxonomies field containing all categories suggested for this item.<br><b>Example</b> : expand=<i>all</i> <br>Returns all fields available for this item.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asOf",
                        "in": "query",
                        "description": "This parameter describes a specific item revision. Currently it only supports this value, <i>latestPublished</i>, which means the latest published version.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asOfDate",
                        "in": "query",
                        "description": "This parameter defines a point of time as of which the item revision should be returned. The date string format is <i>yyyy-MM-dd'T'HH:mm:ss'Z'</i> or <i>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-get",
                "x-filename-id": "management-api-v1.1-items-id-get"
            },
            "put": {
                "requestBody": {
                    "description": "Updates an item with the given information in the payload. The fields <i>createdBy, createdDate, updatedBy, updatedDate, </i><i>slug, variations, channels, collections, relationships, publishInfo, suggestedTaxonomies</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Item"
                            }
                        }
                    }
                },
                "tags": [
                    "Items"
                ],
                "summary": "Update an Item",
                "description": "Update an item with the given payload.",
                "operationId": "updateItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-put",
                "x-filename-id": "management-api-v1.1-items-id-put"
            },
            "delete": {
                "tags": [
                    "Items"
                ],
                "summary": "Delete an Item",
                "description": "Deletes the item. The operation allows the user to delete an Item provided the following conditions are met: <br/><ul><li>Item should be independent, i.e. it should not be referenced by any other item.</li><li>Item should be Non Translatable; Translatable items can be deleted by using ItemsBulkOperations (refer examples).</li></ul>",
                "operationId": "deleteItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-delete",
                "x-filename-id": "management-api-v1.1-items-id-delete"
            }
        },
        "/management/api/v1.1/items/{id}/channels": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List Channels of an Item",
                "description": "Lists all channels of a given Item.",
                "operationId": "listItemChannels",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListChannelId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-channels-get",
                "x-filename-id": "management-api-v1.1-items-id-channels-get"
            }
        },
        "/management/api/v1.1/items/{id}/collections": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List Collections of an Item",
                "description": "Lists all collections of a given item.",
                "operationId": "getItemCollections",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListCollectionId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-collections-get",
                "x-filename-id": "management-api-v1.1-items-id-collections-get"
            }
        },
        "/management/api/v1.1/items/{id}/publishInfo": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "Read Publish Info of an Item",
                "description": "Read publish information of a given item.",
                "operationId": "getItemPublishInfo",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListPublishInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-publishInfo-get",
                "x-filename-id": "management-api-v1.1-items-id-publishinfo-get"
            }
        },
        "/management/api/v1.1/items/{id}/publishedChannels": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List Published Channels of an Item",
                "description": "Lists all published channels of a given Item.",
                "operationId": "listItemPublishedChannels",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListPublishedChannelId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-publishedChannels-get",
                "x-filename-id": "management-api-v1.1-items-id-publishedchannels-get"
            }
        },
        "/management/api/v1.1/items/{id}/relationships": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List Relationships of an Item",
                "description": "Lists all relationships for a given item.",
                "operationId": "getItemsRelationships",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceRelationships"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-relationships-get",
                "x-filename-id": "management-api-v1.1-items-id-relationships-get"
            }
        },
        "/management/api/v1.1/items/{id}/similarItems": {
            "get": {
                "tags": [
                    "Items Search"
                ],
                "summary": "Query Similar Items",
                "description": "This resource enables searching for items similar to a given item. Supports both synchronous and asynchronous invocation.<br/><br/>Visual similarity is supported only for Images.<br/>When not provided the query expression defaults to <i>q=repositoryId eq \"{repoId}\" AND (fileGroup eq \"Images\")</i>.<br/><br/>Filter rules specific to Visual search:<br/><b>repositoryId</b>, if provided, should match the id of the repository to which the asset belongs.<br/><b>type</b>, if provided, should be DigitalAsset.<br/><b>fileGroup</b>, if provided, should be Images.<br/><b>Any other values for the above fields will result in an error response.</b><br/><br/>",
                "operationId": "getSimilarItems",
                "parameters": [
                    {
                        "name": "Prefer",
                        "in": "header",
                        "description": "This parameter is used to control the interaction type (synchronous/asynchronous) of the request. If the header is provided with value respond-async, it indicates that asynchronous interaction is preferred. Otherwise, synchronous interaction is preferred. Asynchronous request is responded with 202 status with a status link in the location header. Synchronous request is responded with 200 along with response body.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "respond-async"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.(Digital Asset)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Many such query conditions can be joined using AND/OR operators and grouped with parentheses. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. In case of query across type the field names are limited to standard fields (<i>id</i>, <i>type</i>, <i>name</i>, <i>description</i>, <i>slug</i>, <i>translatable</i>, <i>language</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>, <i>repositoryId</i>, <i>status</i>, <i>channels</i>, <i>collections</i>, <i>tags</i>, <i>isPublished</i>, <i>languageIsMaster</i>, <i>taxonomies</i>). However in case of type specific query the field names are limited to standard fields and user defined fields (except fields of largeText data type). The only values allowed in the operator are <i>eq</i> (Equals), <i>co</i> (Contains), <i>sw</i> (Startswith), <i>ge</i> (Greater than or equals to), <i>le</i> (Less than or equals to), <i>gt</i> (Greater than), <i>lt</i> (Less than), <i>mt</i> (Matches), <i>sm</i> (Similar).<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(name eq \"John\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(type eq \"Employee\" AND name eq \"John\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(type eq \"Employee\" AND ((name eq \"John\" AND field.age ge \"40\") OR fields.weight gt \"70\"))<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(taxonomies.categories.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" OR (taxonomies.categories.name co \"cat\" AND taxonomies.categories.name co \"red\"))<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/items?q=(taxonomies.categories.nodes.id eq \"9E1A79EE600C4C4BB727FE3E39E95489\" OR taxonomies.categories.nodes.name co \"cars\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression, that matches values of the items across all fields.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields in each item in the result. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each items in the result. All the field name are case-sensitive, and users must provide the correct field name in the query. All the user-defined field names should be provided with prefix fields and followed by period (.). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard fields are returned in case of query across types and in case of type specific query, all standard and user fields are returned. This parameter is optional in the query, and by default the result shows only standard fields name, description. The standard fields <i>id</i>, <i>type</i> are always returned irrespective of any field asked. Any incorrect or invalid field name given in the query will throw an error.<br><br><b>Example</b>: This returns standard fields <i>name</i>, user fields <i>state</i> and <i>country</i> of type <i>Address</i> in the search results. <br>https://{cecsdomain}/content/management/api/v1.1/items?q=type eq \"Address\"&fields=fields.state,fields.country <br><br><b>Example</b>: This returns all the attributes for a specific type used in the search results.<br>https://{cecsdomain}/content/management/api/v1.1/items?q=type eq \"Address\"&fields=all<br><br><b>Example</b>: This returns standard fields <i>name</i>, <i>createdBy</i> in the search results for all items across all the types. <br>https://{cecsdomain}/content/management/api/v1.1/items?fields=name,createdBy<br><br><b>Example</b>: This returns all the standard fields in the search results for all items across all the types. <br>https://{cecsdomain}/content/management/api/v1.1/items?fields=all",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name,description"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "This parameter accepts channelToken of a channel and is used to control the returned results. The result will contain only items, targeted to the channel that the specified channelToken belongs to. This can also be achieved by specifying the channels (standard field of an item) contains query condition (<i>channels co \"{channelId}\"</i>) as one of the query conditions in the <b>q</b> query parameter. This is an optional parameter and by default returns all the results.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchItems"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted."
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "429": {
                        "description": "Too Many Requests."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-similarItems-get",
                "x-filename-id": "management-api-v1.1-items-id-similaritems-get"
            }
        },
        "/management/api/v1.1/items/{id}/similarItems/_status/{statusId}": {
            "get": {
                "tags": [
                    "Items Search"
                ],
                "summary": "Get Similar Items Job Status",
                "description": "Returns similar items job status",
                "operationId": "getSimilarItemsJobStatus",
                "parameters": [
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "status id of similar items job.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.(Digital Asset)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SimilarItemsJobStatus"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Repository not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-similarItems-_status-{statusId}-get",
                "x-filename-id": "management-api-v1.1-items-id-similaritems-_status-statusid-get"
            }
        },
        "/management/api/v1.1/items/{id}/suggestedTaxonomies": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List all Suggested Taxonomies and Categories of an Item",
                "description": "Lists all Suggested Taxonomies and Categories of a given item.",
                "operationId": "getItemTaxonomies",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListSuggestedTaxonomyId"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-suggestedTaxonomies-get",
                "x-filename-id": "management-api-v1.1-items-id-suggestedtaxonomies-get"
            }
        },
        "/management/api/v1.1/items/{id}/tags": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List Tags of an Item",
                "description": "Lists all tags of a given item.",
                "operationId": "getItemTags",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListTags"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-tags-get",
                "x-filename-id": "management-api-v1.1-items-id-tags-get"
            }
        },
        "/management/api/v1.1/items/{id}/taxonomies": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List all Taxonomies and Categories of an Item",
                "description": "Lists all Taxonomies and Categories of a given item.",
                "operationId": "getItemTaxonomies_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListTaxonomyId"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-taxonomies-get",
                "x-filename-id": "management-api-v1.1-items-id-taxonomies-get"
            }
        },
        "/management/api/v1.1/items/{id}/variations": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List Variations of an Item",
                "description": "Lists all variations of a given item.",
                "operationId": "lisItemVariations",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListVariationsInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-variations-get",
                "x-filename-id": "management-api-v1.1-items-id-variations-get"
            }
        },
        "/management/api/v1.1/items/{id}/variations/{variationType}": {
            "get": {
                "tags": [
                    "Item Variations"
                ],
                "summary": "List All Item Variations of a Variation Type",
                "description": "Lists all item variations of a variation type.",
                "operationId": "listVariationsByType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "x-example": "language",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationsInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-variations-{variationType}-get",
                "x-filename-id": "management-api-v1.1-items-id-variations-variationtype-get"
            }
        },
        "/management/api/v1.1/items/{id}/variations/{variationType}/master": {
            "get": {
                "tags": [
                    "Item Variations"
                ],
                "summary": "Read Item Variations by Variation Type",
                "description": "Read item variations of a variation type for given item id.",
                "operationId": "getMasterItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "x-example": "language",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemVariationId"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-variations-{variationType}-master-get",
                "x-filename-id": "management-api-v1.1-items-id-variations-variationtype-master-get"
            },
            "put": {
                "requestBody": {
                    "description": "Item variation set payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemVariationId"
                            }
                        }
                    }
                },
                "tags": [
                    "Item Variations"
                ],
                "summary": "Update Master Item of an Item Variations Set",
                "description": "Updates master item of an item variations set.",
                "operationId": "updateMasterItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "x-example": "language",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemVariationId"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-variations-{variationType}-master-put",
                "x-filename-id": "management-api-v1.1-items-id-variations-variationtype-master-put"
            }
        },
        "/management/api/v1.1/items/{id}/variations/{variationType}/{variationValue}": {
            "get": {
                "tags": [
                    "Item Variations"
                ],
                "summary": "Read Item Variation of a Variation Type Value",
                "description": "Read item variation of a variation type value.",
                "operationId": "getItemForVariation",
                "parameters": [
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token of the target channel.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationType",
                        "in": "path",
                        "description": "Type of the variation. Possible value: <i>language</i>",
                        "required": true,
                        "x-example": "language",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variationValue",
                        "in": "path",
                        "description": "Value of the variation type. Example: <i>en-US</i>, <i>fr</i> etc.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationItem"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-variations-{variationType}-{variationValue}-get",
                "x-filename-id": "management-api-v1.1-items-id-variations-variationtype-variationvalue-get"
            }
        },
        "/management/api/v1.1/items/{id}/versionInfo": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "Read Version Info of an Item",
                "description": "Read version information of a given item.",
                "operationId": "getItemVersionInfo",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListVersionInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-items-{id}-versionInfo-get",
                "x-filename-id": "management-api-v1.1-items-id-versioninfo-get"
            }
        },
        "/management/api/v1.1/languageCodes": {
            "get": {
                "tags": [
                    "Languages"
                ],
                "summary": "Read Language",
                "description": "List names of all known language codes, localized for input language.",
                "operationId": "getDisplayLanguages",
                "parameters": [
                    {
                        "name": "inLanguage",
                        "in": "query",
                        "description": "Language in which results are localized",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "en-US"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LanguageCodes"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-languageCodes-get",
                "x-filename-id": "management-api-v1.1-languagecodes-get"
            }
        },
        "/management/api/v1.1/localizationPolicies": {
            "get": {
                "tags": [
                    "Localization Policies"
                ],
                "summary": "List All Localization Policies",
                "description": "List all localization policies.",
                "operationId": "listLocalizationPolicies",
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "This parameter is used to control order of results. The value of this query parameter follow the format of <i> fieldName:[asc/desc]</i>. <i>asc</i> stands for ascending order  <i>desc</i> stands for descending order, default order is <i>asc</i>. The only fields allowed in the field name are <b>name</b> and <b>updatedDate</b>.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only fieldNames allowed for now are <i><b>name</b></i> and <i><b>connectorType</b></i> and only allowed operators for now are <i><b>co</b></i> on <i><b>name</b></i> and <i><b>eq</b></i> on <i><b>connectorType</b></i>. This query param is optional with no default.<br><b>Example</b>:<br> ?q=name co \"foo\")<br><b>Example</b>:<br> ?q=connectorType eq \"translation\")<br><b>Example</b>:<br> ?q=connectorType eq \"content\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocalizationPolicies"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-localizationPolicies-get",
                "x-filename-id": "management-api-v1.1-localizationpolicies-get"
            },
            "post": {
                "requestBody": {
                    "description": "Creates a localization policy with the given information in the payload. The fields <i>id, createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LocalizationPolicy"
                            }
                        }
                    }
                },
                "tags": [
                    "Localization Policies"
                ],
                "summary": "Create a Localization Policy",
                "description": "Creates a localization policy with the given payload.<br/>The created localization policy will ensure <li>to deliver the item having the exact requested language, if published</li><li>to deliver the item in defined default language, if published</li><li>to deliver the item, if published, which referred to the unavailable translation.</li>It will also ensure <li>that a translation for every language specified in LocalizationPolicy.requiredValues must be published with a translation set</li><li>that any translation with a language specified in the LocalizationPolicy.optionalValues may be published with a translation set.</li>",
                "operationId": "createLocalizationPolicy",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocalizationPolicy"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-localizationPolicies-post",
                "x-filename-id": "management-api-v1.1-localizationpolicies-post"
            }
        },
        "/management/api/v1.1/localizationPolicies/{id}": {
            "get": {
                "tags": [
                    "Localization Policies"
                ],
                "summary": "Read a Localization Policy",
                "description": "Read a localization policy.",
                "operationId": "getPolicy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Localization Policy id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocalizationPolicy"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-localizationPolicies-{id}-get",
                "x-filename-id": "management-api-v1.1-localizationpolicies-id-get"
            },
            "put": {
                "requestBody": {
                    "description": "Updates a localization policy with the given information in the payload. The fields <i>createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LocalizationPolicy"
                            }
                        }
                    }
                },
                "tags": [
                    "Localization Policies"
                ],
                "summary": "Update a Localization Policy",
                "description": "Updates a localization policy with the given payload.<br/>The updated localization policy will ensure <li>to deliver the item having the exact requested language, if published</li><li>to deliver the item in defined default language, if published</li><li>to deliver the item, if published, which referred to the unavailable translation.</li>It will also ensure <li>that a translation for every language specified in LocalizationPolicy.requiredValues must be published with a translation set</li><li>that any translation with a language specified in the LocalizationPolicy.optionalValues may be published with a translation set.</li>",
                "operationId": "updatePolicy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Localization Policy id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocalizationPolicy"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-localizationPolicies-{id}-put",
                "x-filename-id": "management-api-v1.1-localizationpolicies-id-put"
            },
            "delete": {
                "tags": [
                    "Localization Policies"
                ],
                "summary": "Delete a Localization Policy",
                "description": "Deletes a localization policy.",
                "operationId": "deletePolicy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Localization Policy id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-localizationPolicies-{id}-delete",
                "x-filename-id": "management-api-v1.1-localizationpolicies-id-delete"
            }
        },
        "/management/api/v1.1/permissionOperations": {
            "post": {
                "requestBody": {
                    "description": "Details of the permission operations.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PermissionOperations"
                            }
                        }
                    }
                },
                "tags": [
                    "Permission Operations"
                ],
                "summary": "Performs Permission Operations on resource",
                "description": "Performs permission operations on resource with given payload.",
                "operationId": "executePermissionOperations",
                "parameters": [
                    {
                        "name": "Prefer",
                        "in": "header",
                        "description": "This parameter is used to control the interaction type (synchronous/asynchronous) of the request. If the header is provided with value respond-async, it indicates that asynchronous interaction is preferred. Otherwise, synchronous interaction is preferred. Asynchronous request is responded with 202 status with a status link in the location header. Synchronous request is responded with 200 along with response body.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "respond-async"
                            ]
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionOperations"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-permissionOperations-post",
                "x-filename-id": "management-api-v1.1-permissionoperations-post"
            }
        },
        "/management/api/v1.1/permissionOperations/{statusId}": {
            "get": {
                "tags": [
                    "Permission Operations"
                ],
                "summary": "Read Permission Operations Status",
                "description": "Read Permission Operations status.",
                "operationId": "getPermissionOperationsStatus",
                "parameters": [
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "status id of the permission operations.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionOperationsStatus"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-permissionOperations-{statusId}-get",
                "x-filename-id": "management-api-v1.1-permissionoperations-statusid-get"
            }
        },
        "/management/api/v1.1/personalization/audienceAttributes": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "List all Audience Attributes.",
                "description": "This resource returns a list of available audience attributes that can be filtered by the attribute's categoryId.  You can control the number of items to be fetched, paginated and sorted.  Refer to the query syntax description to see the limitations.",
                "operationId": "getAudienceAttributes",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field names allowed are <i>name</i> and <i>categoryId</i> The only value allowed in the operator is <i>eq</i> (Equals).<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/properties?q=(categoryId eq \"AWVF3H79KJ2312VB0\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/properties?q=(name eq \"Some property\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a audience attribute. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each property in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each audience attribute has both standard fields (<i>id</i>, <i>name</i>, <i>description</i> and <i>categoryId</i>. When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Users can only filter out the additional fields. This parameter is optional in the query and by default result shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in an error. <br><br><b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each audience attribute. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order by results.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AudienceAttributes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-audienceAttributes-get",
                "x-filename-id": "management-api-v1.1-personalization-audienceattributes-get"
            },
            "post": {
                "requestBody": {
                    "description": "Create a audience attributes with the given information in the payload. The fields <i>id</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/audienceAttributeInputInfo"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Create an Audience Attributes.",
                "description": "Create an audience attributes with given payload.",
                "operationId": "createAudienceAttribute",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/audienceAttributeInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-audienceAttributes-post",
                "x-filename-id": "management-api-v1.1-personalization-audienceattributes-post"
            }
        },
        "/management/api/v1.1/personalization/audienceAttributes/{id}": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Read a specific audience attributes by id.",
                "operationId": "getAudienceAttribute",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the audience attributes.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a audience attribute. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each property in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each audience attribute has both standard fields (<i>id</i>, <i>name</i>, <i>description</i> and <i>categoryId</i>. When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Users can only filter out the additional fields. This parameter is optional in the query and by default result shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in an error. <br><br><b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each audience attribute. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/audienceAttributeInfo"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Audience Attribute not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-audienceAttributes-{id}-get",
                "x-filename-id": "management-api-v1.1-personalization-audienceattributes-id-get"
            },
            "put": {
                "requestBody": {
                    "description": "Update an Audience Attribute with the given information in the payload. ",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/audienceAttributeInputInfo"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Update an Audience Attribute.",
                "description": "Update an Audience Attribute with the given payload.",
                "operationId": "updateAudienceAttribute",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the audience attributes.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/audienceAttributeInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Recommendation not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-audienceAttributes-{id}-put",
                "x-filename-id": "management-api-v1.1-personalization-audienceattributes-id-put"
            },
            "delete": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Delete an audience attribute by id.",
                "description": "Only audience attributes that belong to a custom category can be deleted.",
                "operationId": "deleteAudienceAttributeById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the audience attributes.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Audience Attribute not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-audienceAttributes-{id}-delete",
                "x-filename-id": "management-api-v1.1-personalization-audienceattributes-id-delete"
            }
        },
        "/management/api/v1.1/personalization/categories": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "This resource returns a list of available attribute categories.",
                "description": "This resource returns a list of available attribute categories that can be filtered by the category's name and type.  You can control the number of items to be fetched, paginated and sorted.  Refer to the query syntax description to see the limitations.",
                "operationId": "getCategories",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field names allowed are <i>name</i> and <i>type</i>When listing categories, <i>type</i> can be equal to \"standard\", \"custom\" or \"all\". If <i>type</i> is equals to \"all\", all categories will be retrieved. The only value allowed in the operator is <i>eq</i> (Equals).<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/categories?q=(type eq \"custom\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/categories?q=(name eq \"Some space\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a attribute category. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each category in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each recommendation has both standard fields (<i>id</i>, <i>name</i>, <i>description</i> and <i>type</i>. When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Users can only filter out the additional fields. This parameter is optional in the query and by default result shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in an error. <br><br><b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each category. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order by results.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttributeCategories"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-categories-get",
                "x-filename-id": "management-api-v1.1-personalization-categories-get"
            }
        },
        "/management/api/v1.1/personalization/categories/{id}": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Read a specific category by id.",
                "operationId": "getCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a attribute category. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each category in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each recommendation has both standard fields (<i>id</i>, <i>name</i>, <i>description</i> and <i>type</i>. When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Users can only filter out the additional fields. This parameter is optional in the query and by default result shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in an error. <br><br><b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each category. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttributeCategory"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Recommendation not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-categories-{id}-get",
                "x-filename-id": "management-api-v1.1-personalization-categories-id-get"
            }
        },
        "/management/api/v1.1/personalization/recommendationResults/{apiName}": {
            "post": {
                "requestBody": {
                    "description": "Array of audience attribute name value pairs.  These will be used as input to the recommendation. <br/><br/>Attribute entries can be provided as a single value:<br/> \"\\<category\\>.\\<audienceAttribute\\>\" : \"\\<value\\>\"<br/>or as an array in the case of multi value attributes:<br/>\"\\<category\\>.\\<audienceAttribute\\>\" : [\"\\<value1\\>\", \"\\<value2\\>\", ... ] <br/><br/><b>NOTE:</b> Audience attributes specified in the query will override audience attriobutes specified in the body.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecommendationTest"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Obtain the results from the recommendation.",
                "description": "Obtain the results of the recommendation specified by the apiName.  This endpoint can be used to test the recommendation by specifying values for the audience attributes defined in the recommendation.  Audience attributes can be specified in the query or the body with the following restrictions: <br/><br/>The end point accepts audience attributes as name value pairs prepended with the keyword <b>attribute</b> as follows: <b><i>attribute.\\<category\\>.\\<audienceAttribute\\>=\\<value\\></i></b> <br/><b>session</b> and <b>system</b> categories cannot be given in the query as they can only be provided in the body of the request to simulate a session or system state.<br/><br/><b>Example:</b>  <i>?attribute.custom.myAttribute1=value1&attribute.custom.myAttribute2=value2</i><br/><br/>\n<br/><br/>Where multivalued audience attributes are allowed, they should be provided in the query by repeating the name value pairs. <br/><br/><b>Example:</b>  <i>?attribute.custom.myMultiValue=value1&attribute.custom.myMultiValue=value2</i> etc.<br/><br/>\nAudience attributes specified in the query will override the same audience attribute if it is specified in the body.",
                "operationId": "testRecommendation",
                "parameters": [
                    {
                        "name": "apiName",
                        "in": "path",
                        "description": "API name of the recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field name allowed is <i>repositoryId</i>. The only value allowed in the operator is <i>eq</i> (Equals).<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/recommendations?q=(apiName eq \"TestRecommendation\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/recommendations?q=(repositoryId eq \"EAQWER42DGKJ10PCNMGAE\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "attribute.category.attributeName",
                        "in": "query",
                        "description": "List of audience attributes. The audience attributes should be prefixed with the keyword <b>attribute</b>: <br/><br/><b><i>attribute.\\<category\\>.\\<audienceAttribute\\>=\\<value\\></i></b><br/><br/><b>Example:</b>  <i>?attribute.custom.myAttribute1=value1&attribute.custom.myAttribute2=value2</i><br/><br/><br/><br/>Where multivalued audience attributes are allowed, they should be provided in the query by repeating the name value pairs. <br/><br/><b>Example:</b>  <i>?attribute.custom.myMultiValue=value1&attribute.custom.myMultiValue=value2</i> etc.<br/><br/>\n",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form",
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields in each item in the result. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each items in the result. All the field name are case-sensitive, and users must provide the correct field name in the query. All the user-defined field names should be provided with prefix fields and followed by period (.). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard fields are returned in case of query across types and in case of type specific query, all standard and user fields are returned. This parameter is optional in the query, and by default the result shows only standard fields name, description. The standard fields <i>id</i>, <i>type</i> are always returned irrespective of any field asked. Any incorrect or invalid field name given in the query will throw an error.<br><br><b>Example</b>: This returns standard fields <i>name</i>, user fields <i>state</i> and <i>country</i> of type <i>Address</i> in the search results. <br>https://{cecsdomain}/content/management/api/v1.1/items?q=type eq \"Address\"&fields=fields.state,fields.country <br><br><b>Example</b>: This returns all the attributes for a specific type used in the search results.<br>https://{cecsdomain}/content/management/api/v1.1/items?q=type eq \"Address\"&fields=all<br><br><b>Example</b>: This returns standard fields <i>name</i>, <i>createdBy</i> in the search results for all items across all the types. <br>https://{cecsdomain}/content/management/api/v1.1/items?fields=name,createdBy<br><br><b>Example</b>: This returns all the standard fields in the search results for all items across all the types. <br>https://{cecsdomain}/content/management/api/v1.1/items?fields=all",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name,description"
                        }
                    },
                    {
                        "name": "channelToken",
                        "in": "query",
                        "description": "Channel token to use to test the recommendation against. If no channel is provided, the recommendation will run against all assets in the current repository and not only assets published to or targeted for a specific channel.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecommendationTestResults"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendationResults-{apiName}-post",
                "x-filename-id": "management-api-v1.1-personalization-recommendationresults-apiname-post"
            }
        },
        "/management/api/v1.1/personalization/recommendations": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "List all recommendations",
                "description": "This resource returns a list of available recommendations that can be filtered by the recommendation's name, apiName and updatedAt.  You can control the number of items to be fetched, paginated, and sorted.  Refer to the query syntax description to see the limitations.",
                "operationId": "getRecommendations",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field name allowed is <i>repositoryId</i>. The only value allowed in the operator is <i>eq</i> (Equals).<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/recommendations?q=(apiName eq \"TestRecommendation\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/recommendations?q=(repositoryId eq \"EAQWER42DGKJ10PCNMGAE\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a recommendation. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each recommendation in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each recommendation has both standard fields (<i>id</i>, <i>name</i>, <i>apiName</i>, <i>description</i>, <i>createdBy</i>, <i>createdAt</i>, <i>updatedBy</i>, <i>updatedAt</i>, <i>main</i> and <i>defaults</i>. When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Users can only filter out the additional fields. This parameter is optional in the query and by default result shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in an error. <br><br><b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each recommendation. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order by results. Recommendations can currently only be ordered by name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recommendations"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-get",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-get"
            },
            "post": {
                "requestBody": {
                    "description": "Create a Recommendation with the given information in the payload. The fields <i>id, status, isPublished, createdBy, createdAt, updatedBy, updatedAt</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecommendationInput"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Create a new Recommendation.",
                "description": "Create a new Recommendation with given payload.",
                "operationId": "createRecommendation",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recommendation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-post",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-post"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Read a specific Recommendation by id.",
                "operationId": "getRecommendation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field name allowed is <i>repositoryId</i>. The only value allowed in the operator is <i>eq</i> (Equals).<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/recommendations?q=(apiName eq \"TestRecommendation\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/personalization/recommendations?q=(repositoryId eq \"EAQWER42DGKJ10PCNMGAE\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a recommendation. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each recommendation in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each recommendation has both standard fields (<i>id</i>, <i>name</i>, <i>apiName</i>, <i>description</i>, <i>createdBy</i>, <i>createdAt</i>, <i>updatedBy</i>, <i>updatedAt</i>, <i>main</i> and <i>defaults</i>. When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Users can only filter out the additional fields. This parameter is optional in the query and by default result shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in an error. <br><br><b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each recommendation. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recommendation"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Recommendation not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-get",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-get"
            },
            "put": {
                "requestBody": {
                    "description": "Update a Recommendation with the given information in the payload. ",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecommendationInput"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Update a Recommendation.",
                "description": "Update a Recommendation with given payload.",
                "operationId": "updateRecommendation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recommendation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Recommendation not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-put",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-put"
            },
            "delete": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Delete a Recommendation.",
                "description": "Only recommendations that are not published can be deleted.",
                "operationId": "deleteRecommendationById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Recommendation not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-delete",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-delete"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/approve": {
            "post": {
                "requestBody": {
                    "description": "The information to approve or reject a Recommendation.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecommendationApproval"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Approve or reject a recommendation.",
                "description": "By specifying true / false a recommendation can be approved or rejected.",
                "operationId": "approveRecommendation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Recommendation not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-approve-post",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-approve-post"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/publish": {
            "post": {
                "requestBody": {
                    "description": "The information needed to publish a Recommendation.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecommendationPublish"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Publish a Recommendation.",
                "description": "Publish a Recommendation to optional channel(s).",
                "operationId": "publishRecommendation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "202": {
                        "description": "Accepted."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-publish-post",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-publish-post"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/publish/{statusId}": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Read publish job status.",
                "description": "Read the status of a job that is publishing a recommendation.",
                "operationId": "getPublishJobStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "Status id of the Recommendation publish operation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecommendationPublishJobStatus"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-publish-{statusId}-get",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-publish-statusid-get"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/publish/{statusId}/ids": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Read the Recommendation's published Item ids",
                "operationId": "getRecommendationPublishJobItemIds",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "Status id of the Recommendation publish operation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PublishItemIds"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-publish-{statusId}-ids-get",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-publish-statusid-ids-get"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/submitForApproval": {
            "post": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Submit a recommendation for approval.",
                "operationId": "submitRecommendation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Accepted.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Recommendation not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-submitForApproval-post",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-submitforapproval-post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {}
                    }
                }
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/unpublish": {
            "post": {
                "requestBody": {
                    "description": "The information needed to unpublish a Recommendation.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecommendationUnpublish"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Unpublish a Recommendation.",
                "description": "Unpublish a Recommendation from optional channel(s).",
                "operationId": "unpublishRecommendation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-unpublish-post",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-unpublish-post"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/unpublish/{statusId}": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Read unpublish job status.",
                "description": "Read the status of a job that is unpublishing a recommendation.",
                "operationId": "getUnpublishJobStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "Status id of the Recommendation publish operation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecommendationUnpublishJobStatus"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-unpublish-{statusId}-get",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-unpublish-statusid-get"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/unpublish/{statusId}/ids": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Read the Recommendation's unpublished Item ids",
                "operationId": "getRecommendationUnpublishJobItemIds",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "Status id of the Recommendation publish operation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PublishItemIds"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-unpublish-{statusId}-ids-get",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-unpublish-statusid-ids-get"
            }
        },
        "/management/api/v1.1/personalization/recommendations/{id}/validatePublish": {
            "post": {
                "requestBody": {
                    "description": "The information to validate a Recommendation and its default items for publishing to the provided channel(s).  If no channels are provided, the targeted channels in the recommendation is used.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecommendationValidate"
                            }
                        }
                    }
                },
                "tags": [
                    "Recommendations"
                ],
                "summary": "Validate a recommendation.",
                "description": "The recommendation and all its default items will be validated for publishing to the selected channel(s).",
                "operationId": "validateRecommendation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the Recommendation.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Accepted.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Recommendation not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-personalization-recommendations-{id}-validatePublish-post",
                "x-filename-id": "management-api-v1.1-personalization-recommendations-id-validatepublish-post"
            }
        },
        "/management/api/v1.1/repositories": {
            "get": {
                "tags": [
                    "Repositories"
                ],
                "summary": "List All Repositories",
                "description": "List all repositories.",
                "operationId": "listRepositories",
                "parameters": [
                    {
                        "name": "roleName",
                        "in": "query",
                        "description": "This parameter is used to filter the returned repositories with the given role name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "viewer",
                            "enum": [
                                "viewer",
                                "contributor",
                                "manager"
                            ]
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only fieldNames allowed for now are <i><b>roleName</b></i>, <i><b>repositoryId</b></i> and <i><b>name</b></i> and only allowed operators for now are <i><b>co</b></i> on <i><b>name</b></i> and <i><b>eq</b></i> on the others. This query param is optional and defaults to <i><b>roleName eq \"viewer\"</b></i> which filters the resources with at least given role. <i><b>name</b></i> is interpreted in the context of the resource being requested. For eg. name for content types implies content type name.<br><b>Example</b>:<br> ?q=roleName eq \"manager\")",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "roleName eq \"viewer\""
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields in each repository in the list. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each repository in the list. All the field names are case-sensitive, users must provide the correct field names in the query. Each repository has both standard fields (<i>id</i>, <i>name</i>, <i>description</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>) and additional fields (<i>contentTypes</i>, <i>channels</i>, <i>defaultLanguage</i>, <i>languageOptions</i>)' When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. The user can filter out only the additional fields. This parameter is optional in the query, and by default the result shows only standard fields in the response. Any incorrect or invalid field name given in the query will throw an error. <br><br> <b>Example</b>: <i>?fields=contentTypes,channels</i> <br> This returns all standard fields along with the <i>contentTypes</i> and <i>channels</i> additional fields for each repository.<br> <b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each repository. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "This parameter is used to control order of results. The value of this query parameter follow the format of <i> fieldName:[asc/desc]</i>. <i>asc</i> stands for ascending order  <i>desc</i> stands for descending order, default order is <i>asc</i>.The only fields allowed in the field name are <b>name</b> and <b>updatedDate</b>.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repositories"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-get",
                "x-filename-id": "management-api-v1.1-repositories-get"
            },
            "post": {
                "requestBody": {
                    "description": "Creates a repository with the given information in the payload. The fields <i>id, createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Repository"
                            }
                        }
                    }
                },
                "tags": [
                    "Repositories"
                ],
                "summary": "Create a Repository",
                "description": "Creates a repository with the given payload.",
                "operationId": "createRepository",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repository"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-post",
                "x-filename-id": "management-api-v1.1-repositories-post"
            }
        },
        "/management/api/v1.1/repositories/{id}": {
            "get": {
                "tags": [
                    "Repositories"
                ],
                "summary": "Read a Repository",
                "description": "Read a repository.",
                "operationId": "getRepository",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the repository.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repository"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-get",
                "x-filename-id": "management-api-v1.1-repositories-id-get"
            },
            "put": {
                "requestBody": {
                    "description": "Updates a repository with the given information in the payload. The fields <i>createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Repository"
                            }
                        }
                    }
                },
                "tags": [
                    "Repositories"
                ],
                "summary": "Update a Repository",
                "description": "Updates a repository with the given payload.",
                "operationId": "updateRepository",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the repository.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repository"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-put",
                "x-filename-id": "management-api-v1.1-repositories-id-put"
            },
            "delete": {
                "tags": [
                    "Repositories"
                ],
                "summary": "Delete a Repository",
                "description": "Deletes a repository.",
                "operationId": "deleteRepository",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the repository.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-delete",
                "x-filename-id": "management-api-v1.1-repositories-id-delete"
            }
        },
        "/management/api/v1.1/repositories/{id}/collections": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "List All Collections in a Repository",
                "description": "List all collections in a repository.",
                "operationId": "listCollections",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository id parameter for collections.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields in each collection in the list. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each collection in the list. All the field names are case-sensitive,and users must provide the correct field names in the query. Each collection has both standard fields (<i>id</i>, <i>name</i>, <i>description</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>) and additional fields (<i>repository</i>, <i>channels</i>). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. The user can filter out only the additional fields. This parameter is optional in the query, and by default the result shows only standard fields in the response. Any incorrect or invalid field name given in the query will throw an error. <br><br> <b>Example</b>: <i>?fields=channels</i> <br> This returns all standard fields along with the <i>channels</i> additional fields for each collection.<br> <b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each collection. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "description": "This parameter is used to filter the returned collections with the given role name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "viewer",
                            "enum": [
                                "viewer",
                                "contributor",
                                "manager"
                            ]
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only fieldNames allowed for now are <i><b>roleName</b></i>, <i><b>repositoryId</b></i> and <i><b>name</b></i> and only allowed operators for now are <i><b>co</b></i> on <i><b>name</b></i> and <i><b>eq</b></i> on the others. This query param is optional and defaults to <i><b>roleName eq \"viewer\"</b></i> which filters the resources with at least given role. <i><b>name</b></i> is interpreted in the context of the resource being requested. For eg. name for content types implies content type name.<br><b>Example</b>:<br> ?q=roleName eq \"manager\")",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "roleName eq \"viewer\""
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "This parameter is used to control the order of results. The value of this query parameter follows the format of <i> fieldName:[asc/desc]</i>. <i>asc</i> stands for ascending order  <i>desc</i> stands for descending order, and the default order is <i>asc</i>. The only field names allowed are <b>name</b> and <b>updatedDate</b>.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collections"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-collections-get",
                "x-filename-id": "management-api-v1.1-repositories-id-collections-get"
            },
            "post": {
                "requestBody": {
                    "description": "Creates a collection with the given information in the payload. The fields <i>id, createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Collection"
                            }
                        }
                    }
                },
                "tags": [
                    "Collections"
                ],
                "summary": "Create a Collection",
                "description": "Creates a collection with the given payload.",
                "operationId": "createCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository id parameter for collections.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "409": {
                        "description": "Conflict."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-collections-post",
                "x-filename-id": "management-api-v1.1-repositories-id-collections-post"
            }
        },
        "/management/api/v1.1/repositories/{id}/collections/{collectionId}": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Read a Collection",
                "description": "Read a collection.",
                "operationId": "getCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository id parameter for collections.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "id of the collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-collections-{collectionId}-get",
                "x-filename-id": "management-api-v1.1-repositories-id-collections-collectionid-get"
            },
            "put": {
                "requestBody": {
                    "description": "Updates a collection with the given information in the payload. The fields <i>createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Collection"
                            }
                        }
                    }
                },
                "tags": [
                    "Collections"
                ],
                "summary": "Update a Collection",
                "description": "Update a collection with the given payload.",
                "operationId": "updateCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository id parameter for collections.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "id of the collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-collections-{collectionId}-put",
                "x-filename-id": "management-api-v1.1-repositories-id-collections-collectionid-put"
            },
            "delete": {
                "tags": [
                    "Collections"
                ],
                "summary": "Delete a Collection",
                "description": "Deletes a collection.",
                "operationId": "deleteCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository id parameter for collections.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "id of the collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Collection not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-collections-{collectionId}-delete",
                "x-filename-id": "management-api-v1.1-repositories-id-collections-collectionid-delete"
            }
        },
        "/management/api/v1.1/repositories/{id}/collections/{collectionId}/permissions": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "List All Permissions on a Collection",
                "description": "List all permissions on a collection.",
                "operationId": "listCollectionPermissions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository id parameter for collections.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "id of the collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isCollectionOnly",
                        "in": "query",
                        "description": "This parameter accepts a boolean value. If true, retrieves the list of users with whom the collection is explicitly shared. If false, retrieves the list of users who have access to the collection (through direct and inherited from repository sharing). Default value is false.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourcePermissions"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-collections-{collectionId}-permissions-get",
                "x-filename-id": "management-api-v1.1-repositories-id-collections-collectionid-permissions-get"
            }
        },
        "/management/api/v1.1/repositories/{id}/permissions": {
            "get": {
                "tags": [
                    "Repositories"
                ],
                "summary": "List All Permissions on a Repository",
                "description": "List all permissions on a repository.",
                "operationId": "listRepositoryPermissions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the repository.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourcePermissions"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-repositories-{id}-permissions-get",
                "x-filename-id": "management-api-v1.1-repositories-id-permissions-get"
            }
        },
        "/management/api/v1.1/taxonomies": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "List taxonomies",
                "description": "This resource returns a list of available taxonomies that can be filtered by the taxonomy's status as provided in the query expression.  You can control the number of items to be fetched, paginated, and sorted.  Refer to the query syntax description to see the limitations.",
                "operationId": "getTaxonomies",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field names allowed are <i>status</i> and <i>version</i>. A query cannot include multiple <i>status</i> or <i>version</i> fieldNames. If no value is provided for <i>status</i> it defaults to \"promoted\". When listing taxonomies, <i>status</i> can be equals to \"draft\", \"promoted\" or \"all\". If <i>status</i> is equals to \"all\", all taxonomies will be retrieved - if a taxonomy is currently available in both \"draft\" and \"promoted\" states, only \"draft\" will be returned. In case <i>status</i> equals to \"all\" is used in other endpoints, an error will be returned. The field <i>version</i> is currently ignored.   The only value allowed in the operator is <i>eq</i> (Equals).<br><br>When updating a taxonomy the query parameter should always be provided with status set to \"draft\" as the default status is \"promoted\" and a promoted taxonomy cannot be modified.<br><br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies?q=(status eq \"draft\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies?q=(status eq \"promoted\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a taxonomy. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each taxonomy in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each taxonomy has both standard fields (<i>id</i>, <i>name</i>, <i>description</i>, <i>shortName</i>, <i>status</i>, <i>version</i>, <i>isPublishable</i>, <i>customProperties</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>) and additional fields (<i>availableStates</i> and <i>publishedChannels</i>). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Taxonomy in \"draft\" state will not have a <i>version</i>. Users can only filter out the additional fields. This parameter is optional in the query and by default result shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in error. <br><br> This returns all standard fields along with the additional field <i>availableStates</i> for each taxonomy.<br><b>Example</b>: <i>?fields=availableStates</i> <br><br> This returns all standard fields along with the additional fields <i>availableStates</i> and <i>publishedChannels</i> for each taxonomy.<br><b>Example</b>: <i>?fields=availableStates,publishedChannels</i> <br><br> This returns all standard fields along with all additional fields (<i>availableStates</i> and <i>publishedChannels</i>) for each taxonomy.<br> <b>Example</b>: <i>?fields=all</i> <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order by results.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Taxonomies"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-get",
                "x-filename-id": "management-api-v1.1-taxonomies-get"
            },
            "post": {
                "requestBody": {
                    "description": "Creates a taxonomy with the given information in the payload. The fields id, createdBy, createdDate, updatedBy, updatedDate, status, version, availableStates, publishedChannels and links will be ignored even if given in the payload.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Taxonomy"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Create a taxonomy",
                "description": "with given payload.",
                "operationId": "createTaxonomy",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Taxonomy"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-post",
                "x-filename-id": "management-api-v1.1-taxonomies-post"
            }
        },
        "/management/api/v1.1/taxonomies/{id}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read a taxonomy",
                "description": "Read a specific taxonomy by id.",
                "operationId": "getTaxonomy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field names allowed are <i>status</i> and <i>version</i>. A query cannot include multiple <i>status</i> or <i>version</i> fieldNames. If no value is provided for <i>status</i> it defaults to \"promoted\". When listing taxonomies, <i>status</i> can be equals to \"draft\", \"promoted\" or \"all\". If <i>status</i> is equals to \"all\", all taxonomies will be retrieved - if a taxonomy is currently available in both \"draft\" and \"promoted\" states, only \"draft\" will be returned. In case <i>status</i> equals to \"all\" is used in other endpoints, an error will be returned. The field <i>version</i> is currently ignored.   The only value allowed in the operator is <i>eq</i> (Equals).<br><br>When updating a taxonomy the query parameter should always be provided with status set to \"draft\" as the default status is \"promoted\" and a promoted taxonomy cannot be modified.<br><br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies?q=(status eq \"draft\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies?q=(status eq \"promoted\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a taxonomy. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each taxonomy in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each taxonomy has both standard fields (<i>id</i>, <i>name</i>, <i>description</i>, <i>shortName</i>, <i>status</i>, <i>version</i>, <i>isPublishable</i>, <i>customProperties</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>) and additional fields (<i>availableStates</i> and <i>publishedChannels</i>). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Taxonomy in \"draft\" state will not have a <i>version</i>. Users can only filter out the additional fields. This parameter is optional in the query and by default result shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in error. <br><br> This returns all standard fields along with the additional field <i>availableStates</i> for each taxonomy.<br><b>Example</b>: <i>?fields=availableStates</i> <br><br> This returns all standard fields along with the additional fields <i>availableStates</i> and <i>publishedChannels</i> for each taxonomy.<br><b>Example</b>: <i>?fields=availableStates,publishedChannels</i> <br><br> This returns all standard fields along with all additional fields (<i>availableStates</i> and <i>publishedChannels</i>) for each taxonomy.<br> <b>Example</b>: <i>?fields=all</i> <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Taxonomy"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-get"
            },
            "put": {
                "requestBody": {
                    "description": "Update a taxonomy with the given information in the payload. The fields <i>id, status, version, availableStates, publishedChannels, createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i> will be ignored even if given in the payload.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Taxonomy"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Update a taxonomy",
                "description": "with given payload.",
                "operationId": "updateTaxonomy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field names allowed are <i>status</i> and <i>version</i>. A query cannot include multiple <i>status</i> or <i>version</i> fieldNames. If no value is provided for <i>status</i> it defaults to \"promoted\". When listing taxonomies, <i>status</i> can be equals to \"draft\", \"promoted\" or \"all\". If <i>status</i> is equals to \"all\", all taxonomies will be retrieved - if a taxonomy is currently available in both \"draft\" and \"promoted\" states, only \"draft\" will be returned. In case <i>status</i> equals to \"all\" is used in other endpoints, an error will be returned. The field <i>version</i> is currently ignored.   The only value allowed in the operator is <i>eq</i> (Equals).<br><br>When updating a taxonomy the query parameter should always be provided with status set to \"draft\" as the default status is \"promoted\" and a promoted taxonomy cannot be modified.<br><br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies?q=(status eq \"draft\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies?q=(status eq \"promoted\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Taxonomy"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-put",
                "x-filename-id": "management-api-v1.1-taxonomies-id-put"
            },
            "delete": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Delete a taxonomy",
                "description": "Only <i><b>draft</b></i> taxonomies can be deleted.",
                "operationId": "deleteTaxonomyById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Query conditions can be joined using AND operators and grouped with parentheses. The value of a query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field names allowed are <i>status</i> and <i>version</i>. A query cannot include multiple <i>status</i> or <i>version</i> fieldNames. If no value is provided for <i>status</i> it defaults to \"promoted\". When listing taxonomies, <i>status</i> can be equals to \"draft\", \"promoted\" or \"all\". If <i>status</i> is equals to \"all\", all taxonomies will be retrieved - if a taxonomy is currently available in both \"draft\" and \"promoted\" states, only \"draft\" will be returned. In case <i>status</i> equals to \"all\" is used in other endpoints, an error will be returned. The field <i>version</i> is currently ignored.   The only value allowed in the operator is <i>eq</i> (Equals).<br><br>When updating a taxonomy the query parameter should always be provided with status set to \"draft\" as the default status is \"promoted\" and a promoted taxonomy cannot be modified.<br><br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies?q=(status eq \"draft\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies?q=(status eq \"promoted\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-delete",
                "x-filename-id": "management-api-v1.1-taxonomies-id-delete"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/categories": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Search categories",
                "description": "This resource returns a list of available categories that can be filtered by the taxonomy's status, category's parent id, category's id, category's name, category's api name, or Suggested Items' status as provided in the query expression. You can control the number of items to be fetched, paginated, and sorted. <br/><br/><b>Filtering while traversing the taxonomy tree:</b> <br/>Refer to the query syntax description to see the limitations. <br/><br/><b>Filtering on Suggested Items:</b> <br/> All <i>promoted</i> categories in the taxonomy which have Suggested Items will be returned. Refer to the query syntax description to see the limitations.",
                "operationId": "getCategories_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Many query conditions can be joined using AND/OR operators and grouped with parentheses. The value of the query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i><br/><br/><b>Filtering while traversing the taxonomy tree:</b> <br/>The only field names supported are <i>status</i>, <i>parent.id</i>, <i>parentId</i>, <i>id</i>, <i>name</i>, and <i>apiName</i>. If no value is provided for <i>status</i> it defaults to \"promoted\".  The field <i>parentId</td> is a legacy field from the database search and is interchangeable with <i>parent.id</i>.<br><br>When a <i>parentId</i> or <i>parent.id</i> is provided, only categories with that parent id will be listed.  If no <i>parentId</i> is provided, categories from all levels will be returned in the list.<br><br>When a <i>id</i> is provided, categories matching the criteria with be returned.  The valid operator is <i>eq</i>.<br><br>When a <i>name</i> is provided, categories matching the criteria with be returned.  The valid operators are <i>eq</i>, <i>sw</i>, and <i>co</i>.<br><br>When an <i>apiName</i> is provided, categories matching the criteria with be returned.  The valid operator is <i>eq</i>.<br><br>When updating a category the query parameter should always be provided with status set to \"draft\" as the default status is \"promoted\" and a promoted category cannot be modified.<br><br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(status eq \"draft\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(status eq \"promoted\" and parent.id eq \"DJGSAFWEGSSADWDFEWG235F\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(status eq \"promoted\" and id eq \"DJGSAFWEGSSADWDFEWG235F\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(status eq \"promoted\" and name sw \"car\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(status eq \"promoted\" and apiName eq \"AAAA\")<br/><br/><b>Filtering on Suggested Items:</b> <br/>The only fields supported are <i>suggestedItems.repositoryId</i>, <i>suggestedItems.suggestedTaxonomies.categories.isRejected</i>, <i>suggestedItems.language</i> and <i>name</i>.<br/><br/><i>suggestedItems.repositoryId</i> filter is mandatory while filtering for categories with Suggested Items.<br/><br/><br/><b>Example:</b> Get all categories with Suggested Items in all languages:<br/>https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(suggestedItems.repositoryId eq \"55217949D4764305A4634FA9CC99E848\") AND (suggestedItems.suggestedTaxonomies.categories.isRejected eq \"false\"))&expand=suggestedItems&suggestedItems:totalResults=true&orderBy=suggestedItems.totalResults:desc<br/><br/><b>Example:</b> Get all categories with Suggested Items in a given language:<br/>https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(suggestedItems.repositoryId eq \"55217949D4764305A4634FA9CC99E848\") AND (suggestedItems.suggestedTaxonomies.categories.isRejected eq \"false\") AND (suggestedItems.language co \"en-US\")&expand=suggestedItems&suggestedItems:totalResults=true&orderBy=suggestedItems.totalResults:desc<br/><br/><b>Example:</b> Get all categories with rejected Suggested Items in a given language:<br/>https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(suggestedItems.repositoryId eq \"55217949D4764305A4634FA9CC99E848\") AND (suggestedItems.suggestedTaxonomies.categories.isRejected eq \"true\") AND (suggestedItems.language co \"en-US\")&expand=suggestedItems&suggestedItems:totalResults=true&orderBy=suggestedItems.totalResults:desc",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "The fields parameter is used to control the returned fields and values in the queried category. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each queried category. As all the field names are case-sensitive, users must provide the correct field names in the search query. When fields is specified as <i>all</i> (in lower case), all the standard fields and optional fields are returned for each category. Each category has both standard fields (<i>id</i>, <i>name</i>, <i>apiName</i>, <i>description</i>, <i>parent</i>, <i>parentId</i>, <i>position</i>, <i>status</i>) and optional fields (<i>ancestors</i>). The standard field <i>id</i> is always returned in the response and cannot be filtered out. This parameter is optional in the query and by default query result shows only <i>id</i>, <i>name</i>, <i>description</i>, <i>apiName</i>, <i>status</i>, <i>position</i>, <i>parentId</i> in the response. Any incorrect or invalid field name given will result in an error. <br><br> <b>Example</b>: <i>?q=(name co \"car\")&fields=name,description,parent,ancestors</i> <br> This returns <i>id</i>, <i>name</i>, <i>description</i>, <i>parent</i> and <i>ancestors</i> in the search results for a category containing \"car\" in the <i>name</i> field. <br> <b>Example</b>: <i>?fields=name,parent</i> <br> This will return only standard fields (such as <i>id</i>, <i>name</i> and <i>parent</i>) for all categories within the default limit. <br>",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name,description,apiName,status,position,parentId"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (direct children) inline with the category's response. Accepts a comma-separated list of field names or <i>all</i>. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (with <i>all</i> in lower case), all the fields of the reference type of the requested category is expanded. When expand is not specified, the category response contains links to the referenced children. When the expand parameter contains a nonexistent field as per type definition of the requested category, the resource produces HTTP 400.<br>Examples : </br><ol>expand=<i>suggestedItems</i></ol><ol>expand=<i>all</i></ol>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "This parameter is used to control order of results. The value of this query parameter follow the format of fieldName:[asc/desc]. asc stands for ascending order desc stands for descending order. <br/><br/>Allowed fields while traversing the taxonomy tree are <i>name</i> and <i>position</i>. The default sort order is <i>asc</i>.<br/><br/>Allowed fields while filtering on Suggested Items are <i>name</i>, <i>namePath</i> and <i>suggestedItems.totalResults</i>. The default sort order is <i>desc</i>.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Categories"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-categories-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-categories-get"
            },
            "post": {
                "requestBody": {
                    "description": "Creates a category with the given information in the payload. The fields <i>id, children, idPath, namePath</i> and <i>links</i> will be ignored even if given in the payload.<br><br>The <i>parentId</i> when provided will attach the category to the category with that id. To create a 1st level category, the <i>parentId</i> should be set to the taxonomy <i>id</i>.  The <i>parentId</i> cannot be empty when creating a category.<br><br>The <i>position</i> field can be used to specify the order of the category among its siblings. If no <i>position</i> is provided the category will be placed last among its siblings.<br><br>The <i>apiName</i> field can be used to uniquely identify the category across all taxonomies.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryInformation"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Create a category",
                "description": "with given payload and attach it to the provided parent.",
                "operationId": "createCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryInformation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-categories-post",
                "x-filename-id": "management-api-v1.1-taxonomies-id-categories-post"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/categories/{categoryId}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read a category",
                "description": "Read a specific category by taxonomy id, category id and status.  The status should be provided in the query parameter.",
                "operationId": "getCategory_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Unique identifier (id) for a category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Many query conditions can be joined using AND/OR operators and grouped with parentheses. The value of the query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only field names supported are <i>status</i> and <i>version</i>. If no value is provided for <i>status</i> it defaults to \"promoted\". The field <i>version</i> is currently ignored.  The only value allowed in the operator is <i>eq</i> (Equals).  <br><br>When updating a category the query parameter should always be provided with status set to \"draft\" as the default status is \"promoted\" and a promoted category cannot be modified.<br><br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(status eq \"draft\")<br><b>Example</b>:<br> https://{cecsdomain}/content/management/api/v1.1/taxonomies/{id}/categories?q=(status eq \"promoted\")",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "default",
                        "in": "query",
                        "description": "Default search query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields for a category. This parameter accepts a comma-separated list of field names or <i>all</i>. These fields will be returned for each category in the list. As all the field names are case-sensitive, users must provide the correct field names in the query. Each category has both standard fields (<i>id</i>, <i>name</i>, <i>description</i>, <i>position</i>, <i>parentId</i>) and additional fields (<i>namePath</i>, <i>idPath</i>). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. Users can only filter out the additional fields. This parameter is optional in the query and by default results shows only standard fields in the response. Any incorrect or invalid field name given in the query will result in an error. <br><br><b>Example</b>: <i>?fields=namePath</i> <br> This returns all standard fields along with the <i>namedPath</i> additional field for the category.<br> <b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for the category. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter provides the option of getting child resources (referenced items) inline with the category's response. Accepts a comma-separated list of field names or <i>all</i>. Field names are case-sensitive. When expand is specified as <i><b>all</b></i> (with <i>all</i> in lower case), all the fields of the requested category are expanded. When expand is not specified, the category response contains links to the referenced children. Expansion of this form is supported for one level only. When the expand parameter contains a nonexistent field as per category definition, the resource produces HTTP 400.<br><br><b>Example</b> : expand=<i>children</i> <br>Returns children categories sorted by their respective <i>position</i> ascending. This sort order cannot be changed in this request.<br><b>Example</b> : expand=<i>all</i> <br>Returns child resources (<i>children</i>) available for this category. Only the first 1000 children categories will be expanded.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryInformation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-categories-{categoryId}-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-categories-categoryid-get"
            },
            "put": {
                "requestBody": {
                    "description": "Updates a category with the given information in the payload. The fields <i>id, children, idPath, namePath</i> and <i>links</i> will be ignored even if given in the payload.<br><br>The <i>parentId</i> when provided can be used to move the category and the tree below it to another parent category in the taxonomy. If the <i>parentId</i> is not provided, the category location is not affected. <br><br>The <i>position</i> field can be used to specify the order of the category among its siblings. If no <i>position</i> is provided the category will retain its current position.<br><br>The <i>apiName</i> field can be used to uniquely identify the category across all taxonomies.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryInformation"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Update a category",
                "description": "with given payload.",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Unique identifier (id) for a category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryInformation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-categories-{categoryId}-put",
                "x-filename-id": "management-api-v1.1-taxonomies-id-categories-categoryid-put"
            },
            "delete": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Delete a category",
                "description": "Only categories in a <i><b>draft</b></i> taxonomy can be deleted.",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Unique identifier (id) for a category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query expression.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-categories-{categoryId}-delete",
                "x-filename-id": "management-api-v1.1-taxonomies-id-categories-categoryid-delete"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/categories/{categoryId}/copy": {
            "post": {
                "requestBody": {
                    "description": "Category copy request payload. The <i>status</i> and <i>version</i> will be used to determine the source taxonomy. Currently, the <i>status</i> and <i>version</i> are not used because copy is supported only on <i><b>draft</b></i> taxonomies.The <i>targetParentId</i> is the parent category for the newly created copy. The <i>targetPosition</i> will be the position of the copy category among its new siblings. This is an asynchronous operation. Asynchronous request is responded with 202 status with a status link in the location header.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryOperationRequest"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Copy a category",
                "description": "and all descendants under a target category.",
                "operationId": "copyCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Unique identifier (id) for a category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "The requested resource was not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-categories-{categoryId}-copy-post",
                "x-filename-id": "management-api-v1.1-taxonomies-id-categories-categoryid-copy-post"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/categories/{categoryId}/copy/{jobTokenId}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read copy category status",
                "description": "Read the status of the job that is copying a category under a target category.",
                "operationId": "getCopyCategoryJobStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Unique identifier (id) for a category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "jobTokenId",
                        "in": "path",
                        "description": "id for the job.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Job not found. The requested resource not found in the system."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-categories-{categoryId}-copy-{jobTokenId}-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-categories-categoryid-copy-jobtokenid-get"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/categories/{categoryId}/suggestedItems": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "List all Suggested Items of a Category",
                "operationId": "getCategorySuggestedItems",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Unique identifier (id) for a category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. Many query conditions can be joined using AND/OR operators and grouped with parentheses. The value of the query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i><br/><br/>The only fields supported are repositoryId, suggestedTaxonomies.categories.isRejected and language.<br/><br/>suggestedItems.repositoryId filter is mandatory while filtering for categories with Suggested Items.<br/><br/><b>Example:</b> Get Suggested Items information for a repository and language which are not rejected for a given category <br/>/content/management/api/v1.1/taxonomies/{taxonomyId}/categories/{categoryId}/suggestedItems?q=(repositoryId eq \"338A5374D9834979AE5ED388CB6FEC01\") AND (suggestedTaxonomies.categories.isRejected eq \"false\") AND (language co \"en\")&totalResults=true<b>Example:</b> Get Suggested Items information for a repository and language which are rejected for a given category <br/>/content/management/api/v1.1/taxonomies/{taxonomyId}/categories/{categoryId}/suggestedItems?q=(repositoryId eq \"338A5374D9834979AE5ED388CB6FEC01\") AND (suggestedTaxonomies.categories.isRejected eq \"true\") AND (language co \"en\")&totalResults=true",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemSubResourceListItems"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-categories-{categoryId}-suggestedItems-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-categories-categoryid-suggesteditems-get"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/createDraft": {
            "post": {
                "requestBody": {
                    "description": "Taxonomy create draft request payload. The <i>status</i> and <i>version</i> will be used to determine the source taxonomy.  Currently, the <i>version</i> is not used. This is an asynchronous operation. Asynchronous request is responded with 202 status with a status link in the location header.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxonomyOperationCreateDraftRequest"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Create a new draft version",
                "description": "Create a new draft taxonomy from an existing taxonomy.",
                "operationId": "createDraftTaxonomy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-createDraft-post",
                "x-filename-id": "management-api-v1.1-taxonomies-id-createdraft-post"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/createDraft/{jobTokenId}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read draft creation status",
                "description": "Read the status of the job that is creating a new draft from an existing taxonomy.",
                "operationId": "getCreateDraftJobStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "jobTokenId",
                        "in": "path",
                        "description": "id for the job.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Job not found. The requested resource not found in the system."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-createDraft-{jobTokenId}-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-createdraft-jobtokenid-get"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/promote": {
            "post": {
                "requestBody": {
                    "description": "Taxonomy promote request payload.  Currently, only <i><b>draft</b></i> taxonomies can be promoted and thus the payload is ignored. This is an asynchronous operation. Asynchronous request is responded with 202 status with a status link in the location header.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxonomyOperationPromoteRequest"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Promote a taxonomy",
                "description": "Promote a draft taxonomy to be the new promoted taxonomy. Only one promote request at a time can be active on a draft taxonomy.  If a promotion is in progress on a draft taxonomy, any subsequent requests will result in a failure until the initial promotion has completed.",
                "operationId": "promoteTaxonomy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-promote-post",
                "x-filename-id": "management-api-v1.1-taxonomies-id-promote-post"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/promote/{jobTokenId}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read promote status",
                "description": "Read the status of the job that is promoting a draft taxonomy.",
                "operationId": "getPromoteJobStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "jobTokenId",
                        "in": "path",
                        "description": "id for the job.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Job not found. The requested resource not found in the system."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-promote-{jobTokenId}-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-promote-jobtokenid-get"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/publish": {
            "post": {
                "requestBody": {
                    "description": "Taxonomy publishing request payload. Currently, only <i><b>promoted</b></i> taxonomies can be published and thus the <i>status</i> and the <i>version</i> are not used. This is an asynchronous operation. Asynchronous request is responded with 202 status with a status link in the location header.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxonomyOperationPublishRequest"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Publish a taxonomy",
                "description": "Publish a promoted taxonomy to the selected channels. Any existing asset categorization for the same promoted taxonomy will become available on the selected channels. User needs to be a contributor on selected channels only when promoted and published taxonomy versions are the same. In case taxonomy promoted version is different than published version, user needs to be a contributor on selected channels and all previously published channels. Only one publish or unpublish request at a time can be active on a taxonomy. If publishing is in progress on a promoted taxonomy, any subsequent requests will result in failure until the initial publishing has completed.",
                "operationId": "publishTaxonomy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-publish-post",
                "x-filename-id": "management-api-v1.1-taxonomies-id-publish-post"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/publish/{jobTokenId}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read publish job status",
                "description": "Read the status of the job that is publishing a taxonomy.",
                "operationId": "getPublishJobStatus_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "jobTokenId",
                        "in": "path",
                        "description": "id for the job.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Job not found. The requested resource not found in the system."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-publish-{jobTokenId}-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-publish-jobtokenid-get"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/unpublish": {
            "post": {
                "requestBody": {
                    "description": "Taxonomy unpublishing request payload. Currently, only <i><b>published</b></i> taxonomies can be unpublished and thus the <i>status</i> and the <i>version</i> are not used. This is an asynchronous operation. Asynchronous request is responded with 202 status with a status link in the location header.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxonomyOperationUnPublishRequest"
                            }
                        }
                    }
                },
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Unpublish a taxonomy",
                "description": "from the selected channels. Taxonomy will no longer be available for the selected channels and any existing categorization information on assets will also be removed. User needs to be a contributor on selected channels. Only one unpublish or publish request at a time can be active on a taxonomy. If unpublishing is in progress on a taxonomy, any subsequent requests will result in failure until the initial unpublishing has completed.",
                "operationId": "unpublishTaxonomy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted.",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Taxonomy not found. The requested resource not found."
                    },
                    "409": {
                        "description": "The requested resource operation is temporarily unavailable"
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-unpublish-post",
                "x-filename-id": "management-api-v1.1-taxonomies-id-unpublish-post"
            }
        },
        "/management/api/v1.1/taxonomies/{id}/unpublish/{jobTokenId}": {
            "get": {
                "tags": [
                    "Taxonomies"
                ],
                "summary": "Read unpublish status",
                "description": "Read the status of the job that is unpublishing a taxonomy.",
                "operationId": "getUnpublishJobStatus_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the taxonomy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "jobTokenId",
                        "in": "path",
                        "description": "id for the job.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Job not found. The requested resource not found in the system."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-taxonomies-{id}-unpublish-{jobTokenId}-get",
                "x-filename-id": "management-api-v1.1-taxonomies-id-unpublish-jobtokenid-get"
            }
        },
        "/management/api/v1.1/timeZones": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "List All Time Zones",
                "description": "Lists all time zones.",
                "operationId": "listTimeZones",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TimeZones"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-timeZones-get",
                "x-filename-id": "management-api-v1.1-timezones-get"
            }
        },
        "/management/api/v1.1/token": {
            "get": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Read a CSRF Token",
                "description": "Read a Cross-Site Request Forgery (CSRF) valid token.",
                "operationId": "getCSRFToken",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-token-get",
                "x-filename-id": "management-api-v1.1-token-get"
            }
        },
        "/management/api/v1.1/types": {
            "get": {
                "tags": [
                    "Types"
                ],
                "summary": "List All Types",
                "description": "List all the types.",
                "operationId": "listTypes",
                "parameters": [
                    {
                        "name": "roleName",
                        "in": "query",
                        "description": "This parameter is used to filter the returned types with the given role name. This parameter is optional in the query and by default all the types are returned.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "viewer",
                                "contributor",
                                "manager"
                            ]
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "This parameter accepts a query expression condition that matches the field values. The value of query condition follows the format of <i><b>{fieldName} {operator} \"{fieldValue}\"</b></i>. The only fieldNames allowed for now are <i><b>roleName</b></i>, <i><b>repositoryId</b></i> and <i><b>name</b></i> and only allowed operators for now are <i><b>co</b></i> on <i><b>name</b></i> and <i><b>eq</b></i> on the others. This query param is optional and defaults to <i><b>roleName eq \"viewer\"</b></i> which filters the resources with at least given role. <i><b>name</b></i> is interpreted in the context of the resource being requested. For eg. name for content types implies content type name.<br><b>Example</b>:<br> ?q=roleName eq \"manager\")",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "roleName eq \"viewer\""
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "This parameter is used to control the returned fields in each type in the list. All the field names are case-sensitive. Each type has both standard fields (<i>id</i>, <i>name</i>, <i>description</i>, <i>createdBy</i>, <i>createdDate</i>, <i>updatedBy</i>, <i>updatedDate</i>, <i>roleName</i>, <i>allowedActions</i>) and additional fields (<i>fields</i>, <i>properties</i>, <i>connectorInfos</i>). When <i>fields</i> is specified as <i>all</i> (case-insensitive), all the standard and additional fields are returned. The standard fields are always returned in the response and cannot be filtered out. The user can filter out only the additional fields. This parameter is optional in the query, and by default the result shows all standard and additional fields in the response. Any incorrect or invalid field name given in the query will throw an error. <br><br> <b>Example</b>: <i>?fields=fields,connectorInfos</i> <br> This returns all standard fields along with the <i>fields</i> and <i>connectorInfos</i> additional fields for each type.<br> <b>Example</b>: <i>?fields=all</i> <br> This will return all standard fields and all additional fields for each type. <br> ",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "This parameter is used to control the order of results. The value of this query parameter follows the format of <i> fieldName:[asc/desc]</i>. <i>asc</i> stands for ascending order  <i>desc</i> stands for descending order, default order is <i>asc</i>.The only fields allowed in the field name are <b>name</b> and <b>updatedDate</b>.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AggregatedTypes"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-types-get",
                "x-filename-id": "management-api-v1.1-types-get"
            },
            "post": {
                "requestBody": {
                    "description": "Creates a type with the given information in the payload. Type name is case-insensitive i.e., cannot create a type with existing type name even in a different case. The fields <i>id, createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i>  will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Type"
                            }
                        }
                    }
                },
                "tags": [
                    "Types"
                ],
                "summary": "Create a Type",
                "description": "Creates a type with the given payload.",
                "operationId": "createType",
                "parameters": [
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "409": {
                        "description": "Conflict."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-types-post",
                "x-filename-id": "management-api-v1.1-types-post"
            }
        },
        "/management/api/v1.1/types/{name}": {
            "get": {
                "tags": [
                    "Types"
                ],
                "summary": "Read a Type",
                "description": "Read a type.",
                "operationId": "getType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Type name identifier is case-sensitive",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-types-{name}-get",
                "x-filename-id": "management-api-v1.1-types-name-get"
            },
            "put": {
                "requestBody": {
                    "description": "Updates a type with the given information in the payload. The fields <i>createdBy, createdDate, updatedBy, updatedDate</i> and <i>links</i>  will be ignored even if given in the payload.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Type"
                            }
                        }
                    }
                },
                "tags": [
                    "Types"
                ],
                "summary": "Update a Type",
                "description": "Updates a type with the given payload.",
                "operationId": "updateType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Type name identifier is case-sensitive",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-types-{name}-put",
                "x-filename-id": "management-api-v1.1-types-name-put"
            },
            "delete": {
                "tags": [
                    "Types"
                ],
                "summary": "Delete a Type",
                "description": "Deletes a type.",
                "operationId": "deleteType",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Type name identifier is case-sensitive",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Requested-With",
                        "in": "header",
                        "description": "A custom header to mitigate CSRF attacks.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "XMLHttpRequest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-types-{name}-delete",
                "x-filename-id": "management-api-v1.1-types-name-delete"
            }
        },
        "/management/api/v1.1/types/{name}/permissions": {
            "get": {
                "tags": [
                    "Types"
                ],
                "summary": "List All Permissions on a Type",
                "description": "List all permissions on a Type.",
                "operationId": "listTypePermissions",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Type name identifier is case-sensitive",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the start index of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "This parameter accepts a non negative integer and is used to control the size of the result.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "format": "int32"
                        }
                    },
                    {
                        "name": "totalResults",
                        "in": "query",
                        "description": "This parameter accepts a boolean flag. If specified as <b>true</b>, then the returned result must include the total result count.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "links",
                        "in": "query",
                        "description": "This parameter accepts a comma-separated list of link names. By default, this parameter gives all the links applicable. Possible values are: <i>self</i>, <i>canonical</i>, <i>describedby</i>, <i>first</i>, <i>last</i>, <i>prev</i>, <i>next</i>",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourcePermissions"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not modified."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "x-internal-id": "management-api-v1.1-types-{name}-permissions-get",
                "x-filename-id": "management-api-v1.1-types-name-permissions-get"
            }
        }
    },
    "components": {
        "schemas": {
            "AddToRepository": {
                "type": "object",
                "properties": {
                    "storageProvider": {
                        "type": "string",
                        "description": "source storageProvider of the externalIds",
                        "enum": [
                            "docs"
                        ]
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "repositoryId"
                    },
                    "externalIds": {
                        "type": "array",
                        "description": "externalIds",
                        "items": {
                            "type": "string"
                        }
                    },
                    "channels": {
                        "type": "array",
                        "description": "Channels",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "collections": {
                        "type": "array",
                        "description": "Collections",
                        "items": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    "taxonomies": {
                        "type": "array",
                        "description": "taxonomies",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyCategories"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "description": "Add tags to items",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        }
                    },
                    "failedExternalIds": {
                        "description": "externalIds on which the action failed",
                        "$ref": "#/components/schemas/FailedExternalIds"
                    },
                    "failedChannels": {
                        "description": "Channels to which items are not added",
                        "$ref": "#/components/schemas/FailedChannels"
                    },
                    "failedTaxonomies": {
                        "description": "List of taxonomies and categories not assigned to the requested items",
                        "$ref": "#/components/schemas/FailedTaxonomyCategories"
                    },
                    "connectorId": {
                        "type": "string",
                        "description": "connectorId"
                    },
                    "failedTags": {
                        "description": "Tags which are not added to items",
                        "$ref": "#/components/schemas/FailedTags"
                    },
                    "failedCollections": {
                        "description": "Collections to which items are not added",
                        "$ref": "#/components/schemas/FailedCollections"
                    }
                },
                "description": "AddToRepository"
            },
            "AggregatedTypes": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/Type"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "AggregatedTypes"
            },
            "AttributeCategories": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/AttributeCategory"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "AttributeCategories"
            },
            "AttributeCategory": {
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Category. This is a required propety in the get response and ignored in post/put requests."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Category. It is a required property in the get response and cannot be empty in post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Category."
                    },
                    "type": {
                        "type": "string",
                        "description": "The Type of the Category.  This can be set to \"standard\" or \"custom\". Parameters can be added, updated and deleted in custom categories only."
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "AttributeCatgegory"
            },
            "AudienceAttributes": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/audienceAttributeInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "AudienceAttributes"
            },
            "BooleanOperation": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "boolean",
                        "description": "value"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    }
                },
                "description": "BooleanOperation"
            },
            "BulkItemsOperations": {
                "type": "object",
                "properties": {
                    "q": {
                        "type": "string",
                        "example": "id eq \"COREBE1BDF66159849B790CC9ACE49BD2199\" OR id eq \"CONT22AA154CDD884D81A3678E1BD37333B7\"",
                        "description": "This parameter accepts a query expression condition that matches the field values. Many such query conditions can be joined using OR operators. The value of query condition follows the format of <b><i>id eq \"{itemId}\"</i></b>. Query condition on any item field other than id is not supported. Any operator other than eq (Equals) in the query condition is not supported."
                    },
                    "operations": {
                        "description": "Operations to perform. It is a required property in the post request.",
                        "$ref": "#/components/schemas/BulkItemsOperationsActions"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the bulk items operations resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item Bulk Operations"
            },
            "BulkItemsOperationsActions": {
                "type": "object",
                "properties": {
                    "addCollections": {
                        "description": "Add items to collections.",
                        "$ref": "#/components/schemas/CollectionIds"
                    },
                    "removeCollections": {
                        "description": "Remove items from collections.",
                        "$ref": "#/components/schemas/CollectionIds"
                    },
                    "addChannels": {
                        "description": "Add channels to items.",
                        "$ref": "#/components/schemas/ChannelIds"
                    },
                    "removeChannels": {
                        "description": "Remove channels from items.",
                        "$ref": "#/components/schemas/ChannelIds"
                    },
                    "addCategories": {
                        "description": "add categories",
                        "$ref": "#/components/schemas/CategoryIds"
                    },
                    "removeCategories": {
                        "description": "remove categories",
                        "$ref": "#/components/schemas/CategoryIds"
                    },
                    "rejectSuggestedCategories": {
                        "description": "reject Suggested Categories",
                        "$ref": "#/components/schemas/CategoryIds"
                    },
                    "makeTranslatable": {
                        "description": "Make items as translatable/non-translatable.",
                        "$ref": "#/components/schemas/BooleanOperation"
                    },
                    "setAsTranslated": {
                        "description": "Set items as translated/non-translated.",
                        "$ref": "#/components/schemas/BooleanOperation"
                    },
                    "submitForApproval": {
                        "description": "Submit items for approval.",
                        "$ref": "#/components/schemas/BooleanOperation"
                    },
                    "approve": {
                        "description": "Approve/Reject items.",
                        "$ref": "#/components/schemas/BooleanOperation"
                    },
                    "deleteItems": {
                        "description": "Delete item in bulk along with its existing translations. Only one item to be passed in q param.",
                        "$ref": "#/components/schemas/DeleteItems"
                    },
                    "validatePublish": {
                        "description": "Validate items for publish.",
                        "$ref": "#/components/schemas/ValidatePublish"
                    },
                    "publish": {
                        "description": "Publish items. It is a persisted operation and only asynchronous interaction is supported. It cannot be given with any other operation.",
                        "$ref": "#/components/schemas/Publish"
                    },
                    "unpublish": {
                        "description": "Unpublish items. It is a persisted operation and only asynchronous interaction is supported. It cannot be given with any other operation.",
                        "$ref": "#/components/schemas/Unpublish"
                    },
                    "addToRepository": {
                        "description": "Add Digital Assets to repository",
                        "$ref": "#/components/schemas/AddToRepository"
                    },
                    "copy": {
                        "description": "Copy items from one repository to another",
                        "$ref": "#/components/schemas/CopyItems"
                    },
                    "rollback": {
                        "description": "Roll back items to given date or versions",
                        "$ref": "#/components/schemas/Rollback"
                    },
                    "addTags": {
                        "description": "Add tags to items",
                        "$ref": "#/components/schemas/Tags"
                    },
                    "removeTags": {
                        "description": "Remove tags from items",
                        "$ref": "#/components/schemas/Tags"
                    }
                },
                "description": "Operations that can be performed. Currently only one operation at a time is supported."
            },
            "BulkItemsOperationsStatus": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "status id of the original request. It is a required property in the get response."
                    },
                    "startTime": {
                        "description": "Time when the original request started",
                        "$ref": "#/components/schemas/date"
                    },
                    "endTime": {
                        "description": "Time when the original request ended",
                        "$ref": "#/components/schemas/date"
                    },
                    "progress": {
                        "type": "string",
                        "description": "The current progress of the original request. It is a required property in the get response.",
                        "enum": [
                            "succeeded",
                            "failed",
                            "processing",
                            "pending",
                            "aborted",
                            "paused",
                            "blocked"
                        ]
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "Whether the original request is completed or not"
                    },
                    "message": {
                        "type": "string",
                        "description": "Human readable message about the current processing status"
                    },
                    "completedPercentage": {
                        "type": "integer",
                        "format": "int32",
                        "description": "A number between 0 and 100, capturing how much of the process has been completed."
                    },
                    "requestStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code of the original request. This is not the polling request's status. Value is available only after the request is completed"
                    },
                    "result": {
                        "description": "The response when the original async request finishes",
                        "$ref": "#/components/schemas/ResultBulkItemsOperations"
                    },
                    "error": {
                        "description": "contains error detail of the original request. This is only available when the original request is processed and failed",
                        "$ref": "#/components/schemas/Error"
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the status resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "BulkItemsOperationsStatus"
            },
            "Categories": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/CategoryInCollection"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Categories"
            },
            "CategoryAncestorBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Category ancestor."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Category ancestor."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the Category ancestor"
                    }
                }
            },
            "CategoryId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CategoryIds": {
                "type": "object",
                "properties": {
                    "categories": {
                        "type": "array",
                        "description": "categories",
                        "items": {
                            "$ref": "#/components/schemas/CategoryId"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    },
                    "taxonomyId": {
                        "$ref": "#/components/schemas/TaxonomyId"
                    }
                },
                "description": "CategoryIds"
            },
            "CategoryInCollection": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Category. This is a required property in the get response and ignored in post/put requests."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Category. It is a required property in the get response and cannot be empty in post / put requests."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Category."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the Category. This is an optional property in get and post requests."
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Category. This is a required property in the get response and ignored in post/put requests.",
                        "enum": [
                            "draft",
                            "promoted"
                        ]
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the Category among its siblings. This is a required property in the get response.",
                        "minimum": 0
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The parentId of the Category. This is a required property in get and post requests. When it is provided in a put request it can be used to move a category and the tree below it to another parent category in the taxonomy."
                    },
                    "suggestedItems": {
                        "description": "The suggested items for this Category.",
                        "$ref": "#/components/schemas/ItemSubResourceListItem"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Category in Collection Response"
            },
            "CategoryInformation": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Category. This is a required property in the get response and ignored in post/put requests."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Category. It is a required property in the get response and cannot be empty in post / put requests."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Category."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the Category. This is an optional property in get and post requests."
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the Category among its siblings. This is a required property in the get response.",
                        "minimum": 0
                    },
                    "parent": {
                        "description": "The parent of the Category.",
                        "$ref": "#/components/schemas/CategoryAncestorBean"
                    },
                    "ancestors": {
                        "type": "array",
                        "description": "The ancestors of the Category. First element represents the root category and the last element represents the immediate parent of the category.",
                        "items": {
                            "$ref": "#/components/schemas/CategoryAncestorBean"
                        }
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The parentId of the Category. This is a required property in get and post requests. When it is provided in a put request it can be used to move a category and the tree below it to another parent category in the taxonomy."
                    },
                    "namePath": {
                        "type": "string",
                        "description": "Full name path from the root category to this category separated by '/'. This is an optional property in get requests and ignored in post/put requests."
                    },
                    "idPath": {
                        "type": "string",
                        "description": "Full id path from the root category to this category separated by '/'. This is an optional property in get requests and ignored in post/put requests."
                    },
                    "children": {
                        "type": "object",
                        "description": "Direct children of the Category. This is an expandable property if requested in the expand parameter. Children categories are sorted by position starting from lowest to highest value. Only the first 1000 children categories will be expanded."
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Category. This is a required property in the get response and ignored in post/put requests.",
                        "enum": [
                            "draft",
                            "promoted"
                        ]
                    },
                    "suggestedItems": {
                        "description": "The suggested items for this Category.",
                        "$ref": "#/components/schemas/ItemSubResourceListItem"
                    }
                },
                "description": "Category Information"
            },
            "CategoryNodeBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Category node."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Category node."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the Category node."
                    }
                }
            },
            "CategoryOperationRequest": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Version of a Taxonomy. The version field is currently ignored."
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Taxonomy (draft/promoted). This is ignored for a category copy request since only draft taxonomies can be edited."
                    },
                    "targetParentId": {
                        "type": "string",
                        "description": "The parentId of the copy of the category. This is a required property."
                    },
                    "targetPosition": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the copy of the category among its new siblings. If not provided, the category will be copied in the last position among its new siblings.",
                        "minimum": 0
                    }
                },
                "description": "Category Operation Request"
            },
            "Channel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the channel. It is a required property in the get response and put request whereas it is not required in the post request."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the channel. It is a required property in the get response and post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the channel."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "createdBy user of the channel."
                    },
                    "createdDate": {
                        "description": "date and time Channel createdAt.",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "updatedBy user of the channel."
                    },
                    "updatedDate": {
                        "description": "date and time Channel updatedAt.",
                        "$ref": "#/components/schemas/date"
                    },
                    "channelType": {
                        "type": "string",
                        "description": "The type of the channel.",
                        "enum": [
                            "public",
                            "secure"
                        ]
                    },
                    "isSiteChannel": {
                        "type": "boolean",
                        "description": "Checks whether the channel is site channel."
                    },
                    "publishPolicy": {
                        "type": "string",
                        "description": "The publish policy of the channel.",
                        "enum": [
                            "anythingPublished",
                            "onlyApproved"
                        ]
                    },
                    "localizationPolicy": {
                        "type": "string",
                        "description": "The localization policy of the channel."
                    },
                    "channelTokens": {
                        "type": "array",
                        "description": "A list of tokens for the channel.",
                        "items": {
                            "$ref": "#/components/schemas/channelToken"
                        }
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the role on the channel."
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Channels"
            },
            "ChannelBeanInRepository": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "isSiteChannel": {
                        "type": "boolean",
                        "description": "Checks whether the channel is site channel."
                    },
                    "localizationPolicy": {
                        "type": "string",
                        "description": "The localization policy of the channel."
                    },
                    "defaultLanguage": {
                        "type": "string",
                        "description": "Default Language."
                    },
                    "requiredLanguages": {
                        "type": "array",
                        "description": "Required Languages.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "optionalLanguages": {
                        "type": "array",
                        "description": "Optional Languages.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "ChannelBeanInRepository"
            },
            "ChannelId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "description": "ChannelId"
            },
            "ChannelIds": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "description": "channels",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    }
                },
                "description": "ChannelIds"
            },
            "ChannelInCollections": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the channel."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the channel."
                    }
                },
                "description": "ChannelInCollections"
            },
            "ChannelInTaxonomy": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the channel."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the channel."
                    }
                },
                "description": "ChannelInTaxonomy"
            },
            "ChannelReference": {
                "type": "object",
                "properties": {
                    "variationPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PolicyReference"
                        }
                    },
                    "publishableItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublishItemId"
                        }
                    },
                    "publishPolicy": {
                        "$ref": "#/components/schemas/PolicyReference"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "ChannelSecret": {
                "type": "object",
                "required": [
                    "channelSecret"
                ],
                "properties": {
                    "channelSecret": {
                        "type": "string",
                        "description": "channel secret"
                    }
                },
                "description": "Channel Secret"
            },
            "ChannelSecretService": {
                "type": "object"
            },
            "ChannelValidation": {
                "type": "object",
                "properties": {
                    "channelId": {
                        "type": "string"
                    },
                    "policyStatus": {
                        "type": "string"
                    },
                    "blocking": {
                        "type": "boolean"
                    },
                    "publishable": {
                        "type": "boolean"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PolicyRuleResult"
                        }
                    }
                }
            },
            "Channels": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/Channel"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Channels"
            },
            "ChannelsInCopy": {
                "type": "object",
                "properties": {
                    "targetToChannel": {
                        "type": "array",
                        "description": "targetToChannel",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    }
                }
            },
            "Collection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the collection. It is a required property in the get response and put request whereas it is not required in the post request."
                    },
                    "repository": {
                        "description": "Information of the collection repository.",
                        "$ref": "#/components/schemas/RepositoryIdentifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the collection. It is a required property in the get response and post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the collection."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "createdBy user of the Collection."
                    },
                    "createdDate": {
                        "description": "date and time Collection createdAt.",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "updatedBy user of the Collection."
                    },
                    "updatedDate": {
                        "description": "date and time Collection updatedAt.",
                        "$ref": "#/components/schemas/date"
                    },
                    "channels": {
                        "type": "array",
                        "description": "Channels associated with the collection.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelInCollections"
                        }
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the role on the collection."
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Collection"
            },
            "CollectionId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "description": "CollectionId"
            },
            "CollectionIds": {
                "type": "object",
                "properties": {
                    "collections": {
                        "type": "array",
                        "description": "collections",
                        "items": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    }
                },
                "description": "CollectionIds"
            },
            "CollectionItemMap": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object"
                            }
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "related": {
                        "description": "Related information of the search.",
                        "$ref": "#/components/schemas/Related"
                    }
                },
                "description": "Collection"
            },
            "CollectionProperties": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "type": "object"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "CollectionProperties."
            },
            "CollectionPropertiesItemMap": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object"
                            }
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "CollectionProperties."
            },
            "Collections": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/Collection"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Collections"
            },
            "CollectionsInCopy": {
                "type": "object",
                "properties": {
                    "collectionName": {
                        "type": "string",
                        "description": "Name of the collection to be created"
                    }
                }
            },
            "Connector": {
                "type": "object",
                "properties": {
                    "connectorId": {
                        "type": "string",
                        "description": "Id of the connector. It is a required property in the get response."
                    },
                    "connectorName": {
                        "type": "string",
                        "description": "Name of the connector. It is a required property in the get response."
                    },
                    "connectorType": {
                        "type": "string",
                        "description": "Type of the connector. It is a required property in the get response."
                    },
                    "supportedContentTypes": {
                        "type": "array",
                        "description": "Supported content types of the connector.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Connector"
            },
            "ConnectorInfo": {
                "type": "object",
                "properties": {
                    "connectorId": {
                        "type": "string",
                        "description": "id of the connector."
                    },
                    "connectorSyncEnabled": {
                        "type": "boolean",
                        "description": "Sync status of connector."
                    }
                },
                "description": "ConnectorInfo"
            },
            "Connectors": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/Connector"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Connectors"
            },
            "ContentTypeId": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CopiedItemId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the copied item."
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the item."
                    },
                    "originalId": {
                        "type": "string",
                        "description": "id of the original item."
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the item resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "CopyItems": {
                "type": "object",
                "properties": {
                    "targetRepository": {
                        "description": "target repository id",
                        "$ref": "#/components/schemas/RepositoryId"
                    },
                    "collections": {
                        "description": "Whether the collections itself to be copied or not",
                        "$ref": "#/components/schemas/CollectionsInCopy"
                    },
                    "channels": {
                        "description": "Whether items to be targeted to channels or not",
                        "$ref": "#/components/schemas/ChannelsInCopy"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CopiedItemId"
                        }
                    },
                    "failedItems": {
                        "type": "array",
                        "description": "items on which the action failed",
                        "items": {
                            "$ref": "#/components/schemas/FailedItemId"
                        }
                    },
                    "message": {
                        "type": "array",
                        "description": "message",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "CopyItems"
            },
            "DataType": {
                "type": "object",
                "properties": {
                    "datatype": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "description": "DataType"
            },
            "DataTypes": {
                "type": "object",
                "properties": {
                    "dataTypes": {
                        "type": "array",
                        "description": "dataTypes. List<DataTypeBean>",
                        "items": {
                            "$ref": "#/components/schemas/DataType"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "DataTypes"
            },
            "DefaultSection": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "description": "List of items. This is optional and can be empty.",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    },
                    "sort": {
                        "type": "array",
                        "description": "This is a very simple sort based of the normal quiery syntax.<br><br><b>Example:</b> [systemField | userDefinedfield]<:<random | relevance | asc | desc>><br>Where:<br><br><i>standardAssetField</i> - this is a predefined list of fields the user can choose to sort on. This can be given an ascneding and descending property by adding <i>:asc</i> or <i>:desc</i><br><br><b>Examples:</b> <br><br>publishedDate:asc - sort by published date ascneding<br>userAssetField - This refers to fields defined in the content type as created by the user.<br>field.myText or field.someThing:desc<br>If no systemField or userDefinedField is provided, :random and :relevance can be provided.<br><br><i>:relevance</i> - Default. This will return assets ordered by their relevance.<br><br><i>:random</i> - This will return assets in a random order irrespective of any rules or fields.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Default Section"
            },
            "DeleteItems": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "boolean",
                        "description": "value"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    },
                    "failedItems": {
                        "type": "array",
                        "description": "items on which the action failed",
                        "items": {
                            "$ref": "#/components/schemas/FailedItemId"
                        }
                    }
                },
                "description": "DeleteItems"
            },
            "Error": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Summary error message. It is a required property in the get response."
                    },
                    "detail": {
                        "type": "string",
                        "description": "Detailed error message."
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code."
                    },
                    "type": {
                        "type": "string",
                        "description": "Link to HTTP error code page. It is a required property in the get response."
                    },
                    "o:errorCode": {
                        "type": "string",
                        "description": "Application specific error code."
                    },
                    "o:errorDetails": {
                        "description": "Drill down to the details. Multiple errors can be organized in a hierarchical structure.",
                        "$ref": "#/components/schemas/Error"
                    },
                    "o:errorPath": {
                        "type": "string",
                        "description": "XPath or JSON patch to indicate where the error occurs."
                    },
                    "instance": {
                        "type": "string",
                        "description": "URI to the link that provides more detail about the error."
                    }
                },
                "description": "Error"
            },
            "FailedChannels": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FailedCollections": {
                "type": "object",
                "properties": {
                    "collections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FailedExternalIds": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FailedItemId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the item."
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the item."
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the item resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "message": {
                        "type": "string",
                        "description": "failed item message."
                    }
                }
            },
            "FailedSharePermissionRole": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of the role to be granted."
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FailedUserId"
                        }
                    }
                },
                "description": "Details of share operation role failed."
            },
            "FailedTags": {
                "type": "object",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FailedTaxonomyCategories": {
                "type": "object",
                "properties": {
                    "taxonomies": {
                        "type": "array",
                        "description": "List of taxonomies and categories not assigned to the requested items",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyCategories"
                        }
                    },
                    "items": {
                        "type": "object",
                        "description": "Items that failed to be categorizes.",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FailedUserId": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    },
                    "groupType": {
                        "type": "string",
                        "enum": [
                            "CEC",
                            "IDP"
                        ]
                    },
                    "message": {
                        "type": "string",
                        "description": "failure message."
                    }
                },
                "description": "FailedUserId"
            },
            "FunctionType": {
                "type": "object",
                "required": [
                    "type"
                ],
                "discriminator": {
                    "propertyName": "type"
                },
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The function name. This is a required property in the get response and ignored in post/put requests."
                    }
                },
                "description": "Function Type"
            },
            "Item": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the item. It is a required property in the get response and put request whereas it is not required in the post request."
                    },
                    "type": {
                        "type": "string",
                        "description": "Name of the type. It is a required property in the get response and post/put request."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the item. It is a required property in the get response and post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the item"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Created by."
                    },
                    "createdDate": {
                        "description": "date and time Item createdAt",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "Updated by."
                    },
                    "updatedDate": {
                        "description": "date and time Item updatedAt",
                        "$ref": "#/components/schemas/date"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL slug of the item."
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "Repository of the item. It is a required property in the get response and post/put request."
                    },
                    "language": {
                        "type": "string",
                        "description": "Language of the item. It is a required property in the post/put request."
                    },
                    "translatable": {
                        "type": "boolean",
                        "description": "Whether the item is translatable."
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the item."
                    },
                    "isPublished": {
                        "type": "boolean",
                        "description": "Whether the item is ever published."
                    },
                    "languageIsMaster": {
                        "type": "boolean",
                        "description": "Whether the item is master."
                    },
                    "version": {
                        "type": "string",
                        "description": "The current revision version of this item."
                    },
                    "tags": {
                        "description": "Tags of the item.",
                        "$ref": "#/components/schemas/ItemSubResourceListTag"
                    },
                    "fields": {
                        "type": "object",
                        "description": "User-defined fields data. Map<String,Object>. All the user-defined fields required in the type definition must be provided under this property in PUT and POST request.",
                        "readOnly": true,
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "variations": {
                        "description": "Item variations.",
                        "$ref": "#/components/schemas/ItemSubResourceListVariationsInfo"
                    },
                    "versionInfo": {
                        "description": "Item version info.",
                        "$ref": "#/components/schemas/ItemSubResourceListVersionInfo"
                    },
                    "publishInfo": {
                        "description": "All targets publish info.",
                        "$ref": "#/components/schemas/ItemSubResourceListPublishInfo"
                    },
                    "channels": {
                        "$ref": "#/components/schemas/ItemSubResourceListChannelId"
                    },
                    "publishedChannels": {
                        "$ref": "#/components/schemas/ItemSubResourceListChannelId"
                    },
                    "collections": {
                        "$ref": "#/components/schemas/ItemSubResourceListCollectionId"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/ItemSubResourceRelationships"
                    },
                    "taxonomies": {
                        "$ref": "#/components/schemas/ItemSubResourceListTaxonomyInfo"
                    },
                    "suggestedTaxonomies": {
                        "$ref": "#/components/schemas/ItemSubResourceListSuggestedTaxonomyInfo"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "connectorId": {
                        "type": "string",
                        "description": "Connector Id of the item."
                    },
                    "connectorSyncEnabled": {
                        "type": "boolean",
                        "description": "Connector Sync Enabled flag of the item."
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "Source Id."
                    }
                },
                "description": "Item"
            },
            "ItemCategoryInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the category assigned to the item."
                    },
                    "nodes": {
                        "type": "array",
                        "description": "Nodes in the category assigned to the item.",
                        "items": {
                            "$ref": "#/components/schemas/CategoryNodeBean"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "ItemId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the item."
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the item."
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the item resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "ItemRevisions": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item Revisions"
            },
            "ItemRollBackBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "toVersion": {
                        "type": "string"
                    }
                }
            },
            "ItemSubResource": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "object"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListChannelId": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListCollectionId": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListItem": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListItems": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "SuggestedItems"
            },
            "ItemSubResourceListPublishInfo": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublishInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListPublishedChannelId": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "PublishedChannels"
            },
            "ItemSubResourceListSuggestedTaxonomyId": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SuggestedTaxonomyInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Suggested Taxonomies"
            },
            "ItemSubResourceListSuggestedTaxonomyInfo": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SuggestedTaxonomyInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListTag": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListTags": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Tags"
            },
            "ItemSubResourceListTaxonomyId": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Taxonomies"
            },
            "ItemSubResourceListTaxonomyInfo": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListVariationsInfo": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariationsInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceListVersionInfo": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VersionInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSubResourceRelationships": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data": {
                        "$ref": "#/components/schemas/Relationships"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item SubResource."
            },
            "ItemSuggestedCategoryInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The apiName of the category assigned to the item."
                    },
                    "isRejected": {
                        "type": "boolean",
                        "description": "Status of the Suggested Category for the Item."
                    },
                    "nodes": {
                        "type": "array",
                        "description": "Nodes in the category assigned to the item.",
                        "items": {
                            "$ref": "#/components/schemas/CategoryNodeBean"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "ItemSummary": {
                "type": "object",
                "properties": {
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublishItemId"
                        }
                    },
                    "validations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelValidation"
                        }
                    },
                    "fileId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "ItemVariationId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the variation item. It is a required property in the get response and put request."
                    },
                    "value": {
                        "type": "string",
                        "description": "Variation value."
                    },
                    "status": {
                        "type": "string",
                        "description": "Variation status."
                    },
                    "isPublished": {
                        "type": "boolean",
                        "description": "Whether the item is ever published."
                    },
                    "isMaster": {
                        "type": "boolean",
                        "description": "Is Master."
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Item Variation Id."
            },
            "ItemVariationSetSummary": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublishItemId"
                        }
                    },
                    "validations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelValidation"
                        }
                    },
                    "varType": {
                        "type": "string"
                    },
                    "masterItemId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "Language": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the item."
                    },
                    "value": {
                        "type": "string",
                        "description": "Language value"
                    },
                    "status": {
                        "type": "string",
                        "description": "status of item"
                    },
                    "isPublished": {
                        "type": "boolean",
                        "description": "Whether the item is ever published."
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "LanguageItem"
            },
            "LanguageCodes": {
                "type": "object",
                "properties": {
                    "languageCodes": {
                        "type": "object",
                        "description": "Language codes containing language and territory.",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Language Codes"
            },
            "Link": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "The target resource's URI. It could be template URI. It is a required property in the get response."
                    },
                    "rel": {
                        "type": "string",
                        "description": "Relation type. It is a required property in the get response."
                    },
                    "templated": {
                        "type": "boolean",
                        "description": "Whether the URI is a template."
                    },
                    "method": {
                        "type": "string",
                        "description": "What HTTP method can be used to access the target resource."
                    },
                    "profile": {
                        "type": "string",
                        "description": "Link to the metadata that describes the target resource."
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "Media type."
                    }
                },
                "description": "Link of the resource."
            },
            "LocalizationPolicies": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/LocalizationPolicy"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "LocalizationPolicies"
            },
            "LocalizationPolicy": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the localization policy. It is a required property in the get response and put request whereas it is not required in the post request."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the localization policy. It is a required property in the get response and post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the localization policy."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "created by user of the localization policy."
                    },
                    "createdDate": {
                        "description": "date and time Localization Policy createdAt",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "updated by user of the Localization Policy"
                    },
                    "updatedDate": {
                        "description": "date and time Localization Policy updatedAt",
                        "$ref": "#/components/schemas/date"
                    },
                    "defaultValue": {
                        "type": "string",
                        "description": "Fall back language in case if item of the given language not available. Value should be one of the required languages."
                    },
                    "requiredValues": {
                        "type": "array",
                        "description": "Required language values.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "optionalValues": {
                        "type": "array",
                        "description": "Optional language values.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the Localization Policy resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Localization Policy"
            },
            "MainRulesSection": {
                "type": "object",
                "properties": {
                    "properties": {
                        "description": "Properties for this rule section.",
                        "$ref": "#/components/schemas/RulesProperties"
                    },
                    "rules": {
                        "type": "array",
                        "description": "Main list of Rules. This is optional and can be empty.",
                        "items": {
                            "$ref": "#/components/schemas/Rule"
                        }
                    },
                    "sort": {
                        "type": "array",
                        "description": "This is a very simple sort based of the normal quiery syntax.<br><br><b>Example:</b> [systemField | userDefinedfield]<:<random | relevance | asc | desc>><br>Where:<br><br><i>standardAssetField</i> - this is a predefined list of fields the user can choose to sort on. This can be given an ascneding and descending property by adding <i>:asc</i> or <i>:desc</i><br><br><b>Examples:</b> <br><br>publishedDate:asc - sort by published date ascneding<br>userAssetField - This refers to fields defined in the content type as created by the user.<br>field.myText or field.someThing:desc<br>If no systemField or userDefinedField is provided, :random and :relevance can be provided.<br><br><i>:relevance</i> - Default. This will return assets ordered by their relevance.<br><br><i>:random</i> - This will return assets in a random order irrespective of any rules or fields.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Main Rules Section"
            },
            "OAuthToken": {
                "type": "object",
                "required": [
                    "channelId"
                ],
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "oauth token"
                    },
                    "channelId": {
                        "type": "string",
                        "description": "the channel ID for whom this token is being generated"
                    },
                    "expiration": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the token expiration date"
                    }
                },
                "description": "OAuth Token"
            },
            "Parameter": {
                "type": "object",
                "required": [
                    "type"
                ],
                "discriminator": {
                    "propertyName": "type"
                },
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of the Parameter. This is a required property in the get response and ignored in post/put requests."
                    }
                },
                "description": "Parameter"
            },
            "PermissionOperations": {
                "type": "object",
                "properties": {
                    "operations": {
                        "description": "Operations to perform. It is a required property in the post request.",
                        "$ref": "#/components/schemas/PermissionOperationsActions"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the permission operations resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Permission Operations"
            },
            "PermissionOperationsActions": {
                "type": "object",
                "properties": {
                    "share": {
                        "description": "Share resource with other users or groups.",
                        "$ref": "#/components/schemas/SharePermission"
                    },
                    "unshare": {
                        "description": "Unshare resource with other users or groups.",
                        "$ref": "#/components/schemas/UnSharePermission"
                    }
                },
                "description": "Operations that can be performed. Currently only one operation at a time is supported."
            },
            "PermissionOperationsStatus": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "status id of the original request. It is a required property in the get response."
                    },
                    "startTime": {
                        "description": "Time when the original request started",
                        "$ref": "#/components/schemas/date"
                    },
                    "endTime": {
                        "description": "Time when the original request ended",
                        "$ref": "#/components/schemas/date"
                    },
                    "progress": {
                        "type": "string",
                        "description": "The current progress of the original request. It is a required property in the get response.",
                        "enum": [
                            "succeeded",
                            "failed",
                            "processing",
                            "pending",
                            "aborted",
                            "paused",
                            "blocked"
                        ]
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "Whether the original request is completed or not"
                    },
                    "message": {
                        "type": "string",
                        "description": "Human readable message about the current processing status"
                    },
                    "completedPercentage": {
                        "type": "integer",
                        "format": "int32",
                        "description": "A number between 0 and 100, capturing how much of the process has been completed."
                    },
                    "requestStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code of the original request. This is not the polling request's status. Value is available only after the request is completed"
                    },
                    "result": {
                        "description": "The response when the original async request finishes",
                        "$ref": "#/components/schemas/ResultPermissionOperations"
                    },
                    "error": {
                        "description": "contains error detail of the original request. This is only available when the original request is processed and failed",
                        "$ref": "#/components/schemas/Error"
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the status resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "PermissionOperationsStatus"
            },
            "PolicyReference": {
                "type": "object",
                "properties": {
                    "varType": {
                        "type": "string"
                    },
                    "error": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "PolicyRuleResult": {
                "type": "object",
                "properties": {
                    "policyId": {
                        "type": "string"
                    },
                    "rule": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "pass": {
                        "type": "string"
                    },
                    "fileId": {
                        "type": "string"
                    },
                    "setId": {
                        "type": "string"
                    },
                    "itemId": {
                        "type": "string"
                    },
                    "valid": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "description": "PolicyRuleResult"
            },
            "PolicyValidationResult": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelReference"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemSummary"
                        }
                    },
                    "request": {
                        "$ref": "#/components/schemas/Request"
                    },
                    "ChannelItemDocIds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Table"
                    },
                    "channelItemDocIds": {
                        "$ref": "#/components/schemas/TableStringStringString"
                    },
                    "variationSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemVariationSetSummary"
                        }
                    },
                    "valid": {
                        "type": "boolean"
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "description": "PolicyValidationResult"
            },
            "Publish": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "description": "List of publish channels. If channels is not empty, items in the q are published to the given channels. If the channels is empty, all the items as per q are published to their respective targeted channels.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "validation": {
                        "$ref": "#/components/schemas/PublishValidation"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "description": "links of the detailed published item ids.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Publish"
            },
            "PublishInfo": {
                "type": "object",
                "properties": {
                    "channel": {
                        "type": "string",
                        "description": "Target name"
                    },
                    "publishedBy": {
                        "type": "string",
                        "description": "Published by"
                    },
                    "version": {
                        "type": "string",
                        "description": "Published version"
                    },
                    "publishedDate": {
                        "description": "date and time Item publishedAt.",
                        "$ref": "#/components/schemas/date"
                    }
                },
                "description": "PublishInfo"
            },
            "PublishItemId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                }
            },
            "PublishItemIds": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/PublishedItemId"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Publish Item ids."
            },
            "PublishValidation": {
                "type": "object",
                "properties": {
                    "verbosity": {
                        "type": "string",
                        "enum": [
                            "none",
                            "terse",
                            "normal",
                            "verbose"
                        ]
                    },
                    "testOnly": {
                        "type": "boolean"
                    }
                },
                "description": "PublishValidation"
            },
            "PublishValidationResult": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    },
                    "policyValidation": {
                        "$ref": "#/components/schemas/PolicyValidationResult"
                    }
                },
                "description": "Publish validation result for publishing items to channels"
            },
            "PublishedItemId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "status"
                    },
                    "channels": {
                        "type": "array",
                        "description": "channels",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Publish Item Id"
            },
            "Recommendation": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "repositoryId"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Recommendation. This is a required propety in the get response and ignored in post/put requests."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Recommendation. It is a required property in the get response and cannot be empty in post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Recommendation."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The reference name of the Recommendation.  If a refrence name is not provided, one will be generated by the server. Reference names must be unique among all recommendations. This is the name that is used in API calls that invoke the recommendation."
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "Repositories of the Recommendation. It is a required property in the get response and post/put request."
                    },
                    "contentTypes": {
                        "type": "array",
                        "description": "Content types the Recommenation will return. It is a required property in the get response and post/put request.",
                        "items": {
                            "$ref": "#/components/schemas/ContentTypeId"
                        }
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "publishedChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created the Recommendation."
                    },
                    "createdDate": {
                        "description": "The creation date of the Recommendation.",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The user who last updated the Recommendation."
                    },
                    "updatedDate": {
                        "description": "The date the Recommendation was last updated.",
                        "$ref": "#/components/schemas/date"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the recommendation."
                    },
                    "isPublished": {
                        "type": "boolean",
                        "description": "Whether the recommendation is ever published."
                    },
                    "publishInfo": {
                        "description": "All targets publish info.",
                        "$ref": "#/components/schemas/ItemSubResourceListPublishInfo"
                    },
                    "main": {
                        "type": "array",
                        "description": "The main rule section.",
                        "items": {
                            "$ref": "#/components/schemas/MainRulesSection"
                        }
                    },
                    "defaults": {
                        "type": "array",
                        "description": "The default rule section.",
                        "items": {
                            "$ref": "#/components/schemas/DefaultSection"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "The current revision version of this item."
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Recommendation"
            },
            "RecommendationApproval": {
                "type": "object",
                "properties": {
                    "approve": {
                        "description": "Approve or reject.",
                        "$ref": "#/components/schemas/BooleanOperation"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the Recommendation submit resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Recommendation Approval request"
            },
            "RecommendationInput": {
                "type": "object",
                "required": [
                    "name",
                    "repositoryId"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Recommendation. It is a required property in the get response and cannot be empty in post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Recommendation."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The reference name of the Recommendation.  If a refrence name is not provided, one will be generated by the server. Reference names must be unique among all recommendations. This is the name that is used in API calls that invoke the recommendation."
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "Repositories of the Recommendation. It is a required property in the get response and post/put request."
                    },
                    "contentTypes": {
                        "type": "array",
                        "description": "Content types the Recommenation will return. It is a required property in the get response and post/put request.",
                        "items": {
                            "$ref": "#/components/schemas/ContentTypeId"
                        }
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "main": {
                        "type": "array",
                        "description": "The main rule section.",
                        "items": {
                            "$ref": "#/components/schemas/MainRulesSection"
                        }
                    },
                    "defaults": {
                        "type": "array",
                        "description": "The default rule section.",
                        "items": {
                            "$ref": "#/components/schemas/DefaultSection"
                        }
                    }
                },
                "description": "Recommendation Input Bean"
            },
            "RecommendationPublish": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "description": "List of publish channels. If channels is not empty, the recommendation and defaults are published to the given channels. If channels is empty, the recommendation and its defaults are published to the targeted channels.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "validation": {
                        "$ref": "#/components/schemas/PublishValidation"
                    }
                },
                "description": "Recommendation Publish Request"
            },
            "RecommendationPublishJobStatus": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "status id of the original request. It is a required property in the get response."
                    },
                    "startTime": {
                        "description": "Time when the original request started",
                        "$ref": "#/components/schemas/date"
                    },
                    "endTime": {
                        "description": "Time when the original request ended",
                        "$ref": "#/components/schemas/date"
                    },
                    "progress": {
                        "type": "string",
                        "description": "The current progress of the original request. It is a required property in the get response.",
                        "enum": [
                            "succeeded",
                            "failed",
                            "processing",
                            "pending",
                            "aborted",
                            "paused",
                            "blocked"
                        ]
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "Whether the original request is completed or not"
                    },
                    "message": {
                        "type": "string",
                        "description": "Human readable message about the current processing status"
                    },
                    "completedPercentage": {
                        "type": "integer",
                        "format": "int32",
                        "description": "A number between 0 and 100, capturing how much of the process has been completed."
                    },
                    "requestStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code of the original request. This is not the polling request's status. Value is available only after the request is completed"
                    },
                    "result": {
                        "description": "The response when the original async request finishes",
                        "$ref": "#/components/schemas/ResultRecommendationPublishResult"
                    },
                    "error": {
                        "description": "contains error detail of the original request. This is only available when the original request is processed and failed",
                        "$ref": "#/components/schemas/Error"
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the status resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "RecommendationPublishJobStatus"
            },
            "RecommendationPublishResult": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "description": "Links of the Recommendation publish operations resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "channels": {
                        "type": "array",
                        "description": "List of unpublish channels. If channels is not empty, items in the q are unpublished to the given channels. If the channels is empty, all the items as per q are unpublished to their respective targeted channels.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "allowUnpublishFromActiveSite": {
                        "type": "boolean",
                        "description": "whether to allow active site items to be unpublished.(defaults to false)"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "description": "links of the detailed unpublished item ids.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Recommendation Publish Result"
            },
            "RecommendationTest": {
                "type": "object",
                "required": [
                    "assetState",
                    "audienceAttributes"
                ],
                "properties": {
                    "audienceAttributes": {
                        "type": "object",
                        "description": "Array of audience attributes to be used in testing the recommendation.  Each attribute can be proprovided as a single value: <br/> \"\\<category\\>.\\<attribute\\>\" : \"\\<value\\>\" <br/> or as an array for multi value attributes: <br/>\"\\<category\\>.\\<attribute\\>\" : [\"\\<value1\\>\", \"\\<value2\\>\" ... ]",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "assetState": {
                        "type": "string",
                        "description": "A Enum that is used to determine if only published assets should be returned in the testing of the recommendation.  Valida values are <i>ALL</i> and <i>PUBLISHED</i>. Default value is <i>ALL</i>e.",
                        "enum": [
                            "PUBLISHED",
                            "ALL"
                        ]
                    }
                },
                "description": "Recommendation Test"
            },
            "RecommendationTestResults": {
                "type": "object",
                "required": [
                    "results"
                ],
                "properties": {
                    "results": {
                        "description": "The list of items return as a result of the recommendation.",
                        "$ref": "#/components/schemas/CollectionItemMap"
                    },
                    "resultsDetails": {
                        "description": "Details on how the results of the recommendation was constructed.",
                        "$ref": "#/components/schemas/RecommendationTestResultsDetails"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Recommendation Test Results"
            },
            "RecommendationTestResultsDetails": {
                "type": "object",
                "properties": {
                    "defaultsUsed": {
                        "type": "boolean",
                        "description": "Set to true if the results were created from the default items."
                    }
                },
                "description": "Recommendation Test Results Details"
            },
            "RecommendationUnpublish": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "description": "List of unpublish channels. If channels are not empty, the recommendation is unpublished to the given channels. If the channels are empty, the recommendation is unpublished from its targeted channels.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "allowUnpublishFromActiveSite": {
                        "type": "boolean",
                        "description": "whether to allow active site items (recommendtion and defaults) to be unpublished.(defaults to false)"
                    }
                },
                "description": "Recommendation Unpublish Request"
            },
            "RecommendationUnpublishJobStatus": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "status id of the original request. It is a required property in the get response."
                    },
                    "startTime": {
                        "description": "Time when the original request started",
                        "$ref": "#/components/schemas/date"
                    },
                    "endTime": {
                        "description": "Time when the original request ended",
                        "$ref": "#/components/schemas/date"
                    },
                    "progress": {
                        "type": "string",
                        "description": "The current progress of the original request. It is a required property in the get response.",
                        "enum": [
                            "succeeded",
                            "failed",
                            "processing",
                            "pending",
                            "aborted",
                            "paused",
                            "blocked"
                        ]
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "Whether the original request is completed or not"
                    },
                    "message": {
                        "type": "string",
                        "description": "Human readable message about the current processing status"
                    },
                    "completedPercentage": {
                        "type": "integer",
                        "format": "int32",
                        "description": "A number between 0 and 100, capturing how much of the process has been completed."
                    },
                    "requestStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code of the original request. This is not the polling request's status. Value is available only after the request is completed"
                    },
                    "result": {
                        "description": "The response when the original async request finishes",
                        "$ref": "#/components/schemas/ResultRecommendationPublishResult"
                    },
                    "error": {
                        "description": "contains error detail of the original request. This is only available when the original request is processed and failed",
                        "$ref": "#/components/schemas/Error"
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the status resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "RecommendationUnpublishJobStatus"
            },
            "RecommendationValidate": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "description": "List of validation channels. If channels is not empty, the recommendation and defaults are validated to the given channels. If channels is empty, the recommendation and its defaults are validated to the targeted channels.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "validation": {
                        "$ref": "#/components/schemas/PublishValidation"
                    }
                },
                "description": "Recommendation Validate Request"
            },
            "Recommendations": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/Recommendation"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Recommendations"
            },
            "References": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the item."
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "References"
            },
            "Related": {
                "type": "object",
                "properties": {
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "related"
            },
            "Relationships": {
                "type": "object",
                "properties": {
                    "references": {
                        "type": "array",
                        "description": "Reference ids",
                        "items": {
                            "$ref": "#/components/schemas/References"
                        }
                    },
                    "referencedBy": {
                        "type": "array",
                        "description": "Referenced by ids",
                        "items": {
                            "$ref": "#/components/schemas/References"
                        }
                    }
                },
                "description": "Relationships"
            },
            "Repositories": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/Repository"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Repositories"
            },
            "Repository": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the repository. It is a required property in the get response and put request whereas it is not required in the post request."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the repository. It is a required property in the get response and post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the repository."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "createdBy user of the Repository."
                    },
                    "createdDate": {
                        "description": "date and time Repository createdAt.",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "updatedBy user of the Repository."
                    },
                    "updatedDate": {
                        "description": "date and time Repository updatedAt.",
                        "$ref": "#/components/schemas/date"
                    },
                    "autoTagEnabled": {
                        "type": "boolean",
                        "description": "Whether auto tagging is enabled for the repository."
                    },
                    "contentTypes": {
                        "type": "array",
                        "description": "Types associated with the repository.",
                        "items": {
                            "$ref": "#/components/schemas/ContentTypeId"
                        }
                    },
                    "channels": {
                        "type": "array",
                        "description": "Channels associated with the repository.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelBeanInRepository"
                        }
                    },
                    "taxonomies": {
                        "type": "array",
                        "description": "Taxonomies associated with the repository.",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyId"
                        }
                    },
                    "connectors": {
                        "type": "array",
                        "description": "Connectors associated with the repository.",
                        "items": {
                            "$ref": "#/components/schemas/Connector"
                        }
                    },
                    "defaultLanguage": {
                        "type": "string",
                        "description": "Default language of the repository. It is a required property in the get response and post/put request."
                    },
                    "languageOptions": {
                        "type": "array",
                        "description": "Language options for the repository.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "configuredLanguages": {
                        "type": "array",
                        "description": "Configured Languages of the repository.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the role on the repository."
                    },
                    "advancedVideoEnabled": {
                        "type": "boolean",
                        "description": "Whether advanced video is enabled for the repository."
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Repository"
            },
            "RepositoryId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "description": "RepositoryId"
            },
            "RepositoryIdentifier": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the collection repository. It is a required property in the get response."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the collection repository. It is a required property in the get response."
                    },
                    "role": {
                        "type": "string",
                        "description": "Role on the collection repository."
                    }
                },
                "description": "RepositoryIdentifier"
            },
            "Request": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublishItemId"
                        }
                    },
                    "validation": {
                        "$ref": "#/components/schemas/PublishValidation"
                    }
                }
            },
            "ResourceId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the resource."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the resource.",
                        "enum": [
                            "repository",
                            "collection",
                            "channel",
                            "type"
                        ]
                    }
                },
                "description": "ResourceId"
            },
            "ResourcePermission": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "userId login name of the user."
                    },
                    "roleName": {
                        "type": "string",
                        "description": "name of the role on the resource."
                    },
                    "type": {
                        "type": "string",
                        "description": "type of the user.",
                        "enum": [
                            "user",
                            "group"
                        ]
                    },
                    "groupType": {
                        "type": "string",
                        "description": "type of the group.",
                        "enum": [
                            "CEC",
                            "IDP"
                        ]
                    },
                    "email": {
                        "type": "string",
                        "description": "email of the user."
                    },
                    "fullName": {
                        "type": "string",
                        "description": "full name of the user."
                    }
                },
                "description": "ResourcePermission"
            },
            "ResourcePermissions": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/ResourcePermission"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "ResourcePermissions"
            },
            "Result": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "HTTP status line of the response to the original async request",
                        "$ref": "#/components/schemas/ResultHTTPStatus"
                    },
                    "headers": {
                        "type": "array",
                        "description": "List of the HTTP headers of the response to the original async request",
                        "items": {
                            "$ref": "#/components/schemas/ResultHTTPHeader"
                        }
                    },
                    "body": {
                        "type": "object",
                        "description": "HTTP body of the response to the original async request"
                    }
                },
                "description": "Result"
            },
            "ResultBulkItemsOperations": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "HTTP status line of the response to the original async request",
                        "$ref": "#/components/schemas/ResultHTTPStatus"
                    },
                    "headers": {
                        "type": "array",
                        "description": "List of the HTTP headers of the response to the original async request",
                        "items": {
                            "$ref": "#/components/schemas/ResultHTTPHeader"
                        }
                    },
                    "body": {
                        "description": "HTTP body of the response to the original async request",
                        "$ref": "#/components/schemas/BulkItemsOperations"
                    }
                },
                "description": "Result"
            },
            "ResultHTTPHeader": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "HTTP response header name"
                    },
                    "value": {
                        "type": "string",
                        "description": "HTTP response header value"
                    }
                },
                "description": "ResultHTTPHeader"
            },
            "ResultHTTPStatus": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP response status code"
                    },
                    "reason": {
                        "type": "string",
                        "description": "HTTP response reason phrase"
                    }
                },
                "description": "ResultHTTPStatus"
            },
            "ResultObject": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "HTTP status line of the response to the original async request",
                        "$ref": "#/components/schemas/ResultHTTPStatus"
                    },
                    "headers": {
                        "type": "array",
                        "description": "List of the HTTP headers of the response to the original async request",
                        "items": {
                            "$ref": "#/components/schemas/ResultHTTPHeader"
                        }
                    },
                    "body": {
                        "type": "object",
                        "description": "HTTP body of the response to the original async request"
                    }
                },
                "description": "Result"
            },
            "ResultPermissionOperations": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "HTTP status line of the response to the original async request",
                        "$ref": "#/components/schemas/ResultHTTPStatus"
                    },
                    "headers": {
                        "type": "array",
                        "description": "List of the HTTP headers of the response to the original async request",
                        "items": {
                            "$ref": "#/components/schemas/ResultHTTPHeader"
                        }
                    },
                    "body": {
                        "description": "HTTP body of the response to the original async request",
                        "$ref": "#/components/schemas/PermissionOperations"
                    }
                },
                "description": "Result"
            },
            "ResultRecommendationPublishResult": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "HTTP status line of the response to the original async request",
                        "$ref": "#/components/schemas/ResultHTTPStatus"
                    },
                    "headers": {
                        "type": "array",
                        "description": "List of the HTTP headers of the response to the original async request",
                        "items": {
                            "$ref": "#/components/schemas/ResultHTTPHeader"
                        }
                    },
                    "body": {
                        "description": "HTTP body of the response to the original async request",
                        "$ref": "#/components/schemas/RecommendationPublishResult"
                    }
                },
                "description": "Result"
            },
            "ResultSimilarItemsJobResponseBean": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "HTTP status line of the response to the original async request",
                        "$ref": "#/components/schemas/ResultHTTPStatus"
                    },
                    "headers": {
                        "type": "array",
                        "description": "List of the HTTP headers of the response to the original async request",
                        "items": {
                            "$ref": "#/components/schemas/ResultHTTPHeader"
                        }
                    },
                    "body": {
                        "description": "HTTP body of the response to the original async request",
                        "$ref": "#/components/schemas/SimilarItemsJobResponseBean"
                    }
                },
                "description": "Result"
            },
            "Rollback": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemRollBackBean"
                        }
                    },
                    "toDate": {
                        "type": "string"
                    }
                },
                "description": "Rollback"
            },
            "Rule": {
                "type": "object",
                "properties": {
                    "operator": {
                        "type": "string",
                        "description": "The operator. This is a required value in the put/get/post requests.",
                        "enum": [
                            "bestMatch",
                            "equal",
                            "notEqual",
                            "greaterThan",
                            "lessThan",
                            "greaterThanOrEqual",
                            "lessThanOrEqual",
                            "inDateRange",
                            "inRange"
                        ]
                    },
                    "parameters": {
                        "type": "array",
                        "description": "The list of parameters the operator applies to. This is a required value in the put/get/post requests.",
                        "items": {
                            "$ref": "#/components/schemas/Parameter"
                        }
                    }
                },
                "description": "Rule"
            },
            "RulesProperties": {
                "type": "object",
                "properties": {
                    "operator": {
                        "type": "string",
                        "description": "The operator that will be used to combine the rules in this group. This is optional and defaults to ALL if omitted.",
                        "enum": [
                            "ALL",
                            "ANY"
                        ]
                    }
                },
                "description": "RulesProperties"
            },
            "SearchItems": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Search Items"
            },
            "SharePermission": {
                "type": "object",
                "properties": {
                    "resource": {
                        "description": "resource to be shared.",
                        "$ref": "#/components/schemas/ResourceId"
                    },
                    "roles": {
                        "type": "array",
                        "description": "details of the roles to be granted.",
                        "items": {
                            "$ref": "#/components/schemas/SharePermissionRole"
                        }
                    },
                    "successRoles": {
                        "type": "array",
                        "description": "successful share list.",
                        "items": {
                            "$ref": "#/components/schemas/SuccessSharePermissionRole"
                        }
                    },
                    "failedRoles": {
                        "type": "array",
                        "description": "failed share list.",
                        "items": {
                            "$ref": "#/components/schemas/FailedSharePermissionRole"
                        }
                    }
                },
                "description": "Details of the share operation"
            },
            "SharePermissionRole": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of the role to be granted."
                    },
                    "message": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    }
                },
                "description": "Details of share operation role."
            },
            "SimilarItemsJobResponseBean": {
                "type": "object",
                "properties": {
                    "similarItems": {
                        "$ref": "#/components/schemas/CollectionPropertiesItemMap"
                    }
                }
            },
            "SimilarItemsJobStatus": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "status id of the original request. It is a required property in the get response."
                    },
                    "startTime": {
                        "description": "Time when the original request started",
                        "$ref": "#/components/schemas/date"
                    },
                    "endTime": {
                        "description": "Time when the original request ended",
                        "$ref": "#/components/schemas/date"
                    },
                    "progress": {
                        "type": "string",
                        "description": "The current progress of the original request. It is a required property in the get response.",
                        "enum": [
                            "succeeded",
                            "failed",
                            "processing",
                            "pending",
                            "aborted",
                            "paused",
                            "blocked"
                        ]
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "Whether the original request is completed or not"
                    },
                    "message": {
                        "type": "string",
                        "description": "Human readable message about the current processing status"
                    },
                    "completedPercentage": {
                        "type": "integer",
                        "format": "int32",
                        "description": "A number between 0 and 100, capturing how much of the process has been completed."
                    },
                    "requestStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code of the original request. This is not the polling request's status. Value is available only after the request is completed"
                    },
                    "result": {
                        "description": "The response when the original async request finishes",
                        "$ref": "#/components/schemas/ResultSimilarItemsJobResponseBean"
                    },
                    "error": {
                        "description": "contains error detail of the original request. This is only available when the original request is processed and failed",
                        "$ref": "#/components/schemas/Error"
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the status resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "SimilarItemsJobStatus"
            },
            "Status": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "status id of the original request. It is a required property in the get response."
                    },
                    "startTime": {
                        "description": "Time when the original request started",
                        "$ref": "#/components/schemas/date"
                    },
                    "endTime": {
                        "description": "Time when the original request ended",
                        "$ref": "#/components/schemas/date"
                    },
                    "progress": {
                        "type": "string",
                        "description": "The current progress of the original request. It is a required property in the get response.",
                        "enum": [
                            "succeeded",
                            "failed",
                            "processing",
                            "pending",
                            "aborted",
                            "paused",
                            "blocked"
                        ]
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "Whether the original request is completed or not"
                    },
                    "message": {
                        "type": "string",
                        "description": "Human readable message about the current processing status"
                    },
                    "completedPercentage": {
                        "type": "integer",
                        "format": "int32",
                        "description": "A number between 0 and 100, capturing how much of the process has been completed."
                    },
                    "requestStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code of the original request. This is not the polling request's status. Value is available only after the request is completed"
                    },
                    "result": {
                        "description": "The response when the original async request finishes",
                        "$ref": "#/components/schemas/ResultObject"
                    },
                    "error": {
                        "description": "contains error detail of the original request. This is only available when the original request is processed and failed",
                        "$ref": "#/components/schemas/Error"
                    },
                    "links": {
                        "type": "array",
                        "description": "links of the status resource",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Status"
            },
            "SuccessSharePermissionRole": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of the role granted."
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    }
                },
                "description": "Details of successful share operation role."
            },
            "SuggestedTaxonomyInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "shortName": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "description": "Categories in the Suggested Taxonomy the item belongs to.",
                        "items": {
                            "$ref": "#/components/schemas/ItemSuggestedCategoryInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "SuggestedTaxonomyInfo"
            },
            "Table": {
                "type": "object",
                "properties": {
                    "empty": {
                        "type": "boolean"
                    }
                }
            },
            "TableStringStringString": {
                "type": "object",
                "properties": {
                    "empty": {
                        "type": "boolean"
                    }
                }
            },
            "Tag": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the tag."
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Tag."
            },
            "Tags": {
                "type": "object",
                "properties": {
                    "tags": {
                        "type": "array",
                        "description": "Tags of the item.",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    }
                },
                "description": "Tags."
            },
            "Taxonomies": {
                "type": "object",
                "properties": {
                    "hasMore": {
                        "type": "boolean",
                        "description": "Check whether there are more pages to fetch."
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The actual index from which the singular resources are returned."
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of records in the current response."
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Actual page size used by the server. This might not be the same as what the client requests."
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of rows that satisfy the client request (excluding the paging parameters.)"
                    },
                    "items": {
                        "type": "array",
                        "description": "Singular resources contained in the collection.",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyInCollection"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links of the resource.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Taxonomies"
            },
            "Taxonomy": {
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Taxonomy. This is a required property in the get response and ignored in post/put requests."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Taxonomy. It is a required property in the get response and cannot be empty in post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Taxonomy."
                    },
                    "shortName": {
                        "type": "string",
                        "description": "The short name of the Taxonomy. This is a required property in the get response. Up to 3 characters can be provided in a put/post request. If no value is provided, a default one will be generated."
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Taxonomy. This is a required property in the get response and ignored in post/put requests.",
                        "enum": [
                            "draft",
                            "promoted"
                        ]
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The version of this Taxonomy. Version information is only returned for promoted taxonomies. It is ignored in post/put requests.",
                        "minimum": 1
                    },
                    "isPublishable": {
                        "type": "boolean"
                    },
                    "availableStates": {
                        "type": "array",
                        "description": "List all states of the Taxonomy. This is an optional property and is only returned if requested in the fields parameter. It is ignored in post/put requests.",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyStatus"
                        }
                    },
                    "customProperties": {
                        "type": "object",
                        "description": "Custom properties of the Taxonomy. This consists of a name value pairs defined by the user.  Single entries cannot be updated, the entire list of custom properties have to be provided to update entries.",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "publishedChannels": {
                        "type": "array",
                        "description": "Taxonomy published channels.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ChannelInTaxonomy"
                        }
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created the Taxonomy."
                    },
                    "createdDate": {
                        "description": "The creation date of the Taxonomy.",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The user who last updated the Taxonomy."
                    },
                    "updatedDate": {
                        "description": "The date the Taxonomy was last updated.",
                        "$ref": "#/components/schemas/date"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Taxonomy"
            },
            "TaxonomyCategories": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Taxonomy."
                    },
                    "categories": {
                        "type": "array",
                        "description": "Categories to be assigned",
                        "items": {
                            "$ref": "#/components/schemas/CategoryId"
                        }
                    }
                }
            },
            "TaxonomyId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "shortName": {
                        "type": "string"
                    }
                },
                "description": "TaxonomyId"
            },
            "TaxonomyInCollection": {
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Taxonomy. This is a required property in the get response and ignored in post/put requests."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Taxonomy. It is a required property in the get response and cannot be empty in post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Taxonomy."
                    },
                    "shortName": {
                        "type": "string",
                        "description": "The short name of the Taxonomy. This is a required property in the get response. Up to 3 characters can be provided in a put/post request. If no value is provided, a default one will be generated."
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Taxonomy. This is a required property in the get response and ignored in post/put requests.",
                        "enum": [
                            "draft",
                            "promoted"
                        ]
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The version of this Taxonomy. Version information is only returned for promoted taxonomies. It is ignored in post/put requests.",
                        "minimum": 1
                    },
                    "isPublishable": {
                        "type": "boolean"
                    },
                    "availableStates": {
                        "type": "array",
                        "description": "List all states of the Taxonomy. This is an optional property and is only returned if requested in the fields parameter. It is ignored in post/put requests.",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyStatus"
                        }
                    },
                    "customProperties": {
                        "type": "object",
                        "description": "Custom properties of the Taxonomy. This consists of a name value pairs defined by the user.  Single entries cannot be updated, the entire list of custom properties have to be provided to update entries.",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created the Taxonomy."
                    },
                    "createdDate": {
                        "description": "The creation date of the Taxonomy.",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The user who last updated the Taxonomy."
                    },
                    "updatedDate": {
                        "description": "The date the Taxonomy was last updated.",
                        "$ref": "#/components/schemas/date"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Taxonomy in Collection Response"
            },
            "TaxonomyInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "shortName": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "description": "Categories in the Taxonomy the item belongs to.",
                        "items": {
                            "$ref": "#/components/schemas/ItemCategoryInfo"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "TaxonomyInfo"
            },
            "TaxonomyJobInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "errorDetails": {
                        "type": "string"
                    }
                },
                "description": "TaxonomyJobInfo"
            },
            "TaxonomyOperationCreateDraftRequest": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Status of the Taxonomy (draft/promoted). Currently, only promoted taxonomies can be used to create a new draft."
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Version of a Taxonomy. The version field is currently ignored."
                    }
                },
                "description": "Taxonomy Operation Create Draft Request"
            },
            "TaxonomyOperationPromoteRequest": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Status of the Taxonomy (draft/promoted). This is ignored for a promotion request since only draft taxonomies can be promoted."
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Version of a Taxonomy. The version field is currently ignored."
                    },
                    "isPublishable": {
                        "type": "boolean",
                        "description": "Whether taxonomy is publishable. (defaults to false)"
                    }
                },
                "description": "Taxonomy Operation Promote Request"
            },
            "TaxonomyOperationPublishRequest": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Status of the Taxonomy (draft/promoted). This is ignored for a publishing request since only promoted taxonomies can be published."
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Version of a Taxonomy. The version field is currently ignored."
                    },
                    "channels": {
                        "type": "array",
                        "description": "List of publish channels. Parameter channels is mandatory for the first taxonomy publishing. If channels is empty for the first time, an error message will be returned. If channels is empty but taxonomy is still published to other channels, a new version will be published to the current channels. If channels is not empty, taxonomy is published to given channels and any previously published channels (in case a new promoted version is available).",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    }
                },
                "description": "Taxonomy Operation Publish Request"
            },
            "TaxonomyOperationUnPublishRequest": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Status of the Taxonomy (draft/promoted). This is ignored for unpublishing request since only published taxonomies can be unpublished."
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Version of a Taxonomy. The version field is currently ignored."
                    },
                    "channels": {
                        "type": "array",
                        "description": "List of unpublish channels. If channels is not empty, taxonomy is unpublished from given channels. Only channels in the list will be used to unpublish the taxonomy. Parameter channels is mandatory and, in case it is empty, an error message will be returned.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    }
                },
                "description": "Taxonomy Operation UnPublish Request"
            },
            "TaxonomyStatus": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "published": {
                        "type": "boolean"
                    },
                    "jobs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyJobInfo"
                        }
                    }
                },
                "description": "TaxonomyStatus"
            },
            "TimeZones": {
                "type": "object",
                "properties": {
                    "timeZones": {
                        "type": "array",
                        "description": "TZDB timezones. List<String>",
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Time Zones."
            },
            "Token": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "description": "Token"
            },
            "Type": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the type. It is a required property in the get response and put request whereas it is not required in the post request."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the type. It is a required property in the get response and post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the type."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Created by"
                    },
                    "createdDate": {
                        "description": "date and time Type createdAt.",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "Updated by"
                    },
                    "updatedDate": {
                        "description": "date and time Type updatedAt.",
                        "$ref": "#/components/schemas/date"
                    },
                    "fields": {
                        "type": "array",
                        "description": "Fields used in the type.",
                        "items": {
                            "$ref": "#/components/schemas/TypeField"
                        }
                    },
                    "properties": {
                        "type": "object",
                        "description": "Type specific properties.",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the role on the content type."
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "allowedActions": {
                        "type": "array",
                        "description": "allowedActions on Type.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "preview",
                                "read",
                                "write",
                                "update",
                                "delete"
                            ]
                        }
                    },
                    "connectorInfos": {
                        "type": "array",
                        "description": "connectorInfos on Type.",
                        "items": {
                            "$ref": "#/components/schemas/ConnectorInfo"
                        }
                    }
                },
                "description": "AggregatedType"
            },
            "TypeField": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the field. It is a required property in the get response and put request whereas it is not required in the post request."
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the field. It is a required property in the get response and post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the field."
                    },
                    "datatype": {
                        "type": "string",
                        "description": "Data Type Enum. It is a required property in the get response and post/put request.",
                        "enum": [
                            "int",
                            "float",
                            "string",
                            "large_text",
                            "reference",
                            "datetime",
                            "boolean"
                        ]
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Required or optional value for the Field. It is a required property in the get response and post/put request."
                    },
                    "valuecount": {
                        "type": "string",
                        "description": "Value count as a single or list. It is a required property in the get response and post/put request.",
                        "enum": [
                            "single",
                            "list"
                        ]
                    },
                    "defaultValue": {
                        "type": "object",
                        "description": "defaultValue for field."
                    },
                    "properties": {
                        "type": "object",
                        "description": "Field specific properties.",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "settings": {
                        "type": "object",
                        "description": "Field specific settings.",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                },
                "description": "FieldInAggrType."
            },
            "UnSharePermission": {
                "type": "object",
                "properties": {
                    "resource": {
                        "description": "resource to be unshared.",
                        "$ref": "#/components/schemas/ResourceId"
                    },
                    "message": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    },
                    "successUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    },
                    "failedUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FailedUserId"
                        }
                    }
                },
                "description": "Details of the unshare operation"
            },
            "Unpublish": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "description": "List of unpublish channels. If channels is not empty, items in the q are unpublished to the given channels. If the channels is empty, all the items as per q are unpublished to their respective targeted channels.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "allowUnpublishFromActiveSite": {
                        "type": "boolean",
                        "description": "whether to allow active site items to be unpublished.(defaults to false)"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "description": "links of the detailed unpublished item ids.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Unpublish"
            },
            "UserId": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    },
                    "groupType": {
                        "type": "string",
                        "enum": [
                            "CEC",
                            "IDP"
                        ]
                    }
                },
                "description": "UserId"
            },
            "ValidatePublish": {
                "type": "object",
                "properties": {
                    "channels": {
                        "type": "array",
                        "description": "List of channels to be validated for publish. If channels is not empty, items in the q are validated for publish against the given channels. If the channels is empty, all the items as per q are validated for publish against their respective targeted channels.",
                        "items": {
                            "$ref": "#/components/schemas/ChannelId"
                        }
                    },
                    "validation": {
                        "$ref": "#/components/schemas/PublishValidation"
                    },
                    "validationResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublishValidationResult"
                        }
                    }
                },
                "description": "ValidatePublish"
            },
            "VariationItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the item. It is a required property in the get response and put request whereas it is not required in the post request."
                    },
                    "type": {
                        "type": "string",
                        "description": "Name of the type. It is a required property in the get response and post/put request."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the item. It is a required property in the get response and post/put request."
                    },
                    "isMaster": {
                        "type": "boolean",
                        "description": "Whether the content item is master of the set."
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the item"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Created by."
                    },
                    "createdDate": {
                        "description": "date and time Item createdAt",
                        "$ref": "#/components/schemas/date"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "Updated by."
                    },
                    "updatedDate": {
                        "description": "date and time Item updatedAt",
                        "$ref": "#/components/schemas/date"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL slug of the item."
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "Repository of the item. It is a required property in the get response and post/put request."
                    },
                    "language": {
                        "type": "string",
                        "description": "Language of the item. It is a required property in the post/put request."
                    },
                    "translatable": {
                        "type": "boolean",
                        "description": "Whether the item is translatable."
                    },
                    "fields": {
                        "type": "object",
                        "description": "User-defined fields data. Map<String,Object>. All the user-defined fields required in the type definition must be provided under this property in PUT and POST request.",
                        "readOnly": true,
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "variations": {
                        "description": "Item variations.",
                        "$ref": "#/components/schemas/ItemSubResourceListVariationsInfo"
                    },
                    "publishInfo": {
                        "description": "All targets publish info.",
                        "$ref": "#/components/schemas/ItemSubResourceListPublishInfo"
                    },
                    "channels": {
                        "$ref": "#/components/schemas/ItemSubResourceListChannelId"
                    },
                    "collections": {
                        "$ref": "#/components/schemas/ItemSubResourceListCollectionId"
                    },
                    "relationships": {
                        "$ref": "#/components/schemas/ItemSubResourceRelationships"
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the item."
                    },
                    "languageIsMaster": {
                        "type": "boolean",
                        "description": "Whether the item is master."
                    },
                    "isPublished": {
                        "type": "boolean",
                        "description": "Whether the item is ever published."
                    },
                    "version": {
                        "type": "string",
                        "description": "The current revision version of this item."
                    },
                    "connectorId": {
                        "type": "string",
                        "description": "Connector Id of the item."
                    },
                    "connectorSyncEnabled": {
                        "type": "boolean",
                        "description": "Connector Sync Enabled flag of the item."
                    },
                    "tags": {
                        "description": "Tags of the item.",
                        "$ref": "#/components/schemas/ItemSubResourceListTag"
                    },
                    "versionInfo": {
                        "description": "Item version info.",
                        "$ref": "#/components/schemas/ItemSubResourceListVersionInfo"
                    },
                    "publishedChannels": {
                        "$ref": "#/components/schemas/ItemSubResourceListChannelId"
                    },
                    "taxonomies": {
                        "$ref": "#/components/schemas/ItemSubResourceListTaxonomyInfo"
                    },
                    "suggestedTaxonomies": {
                        "$ref": "#/components/schemas/ItemSubResourceListSuggestedTaxonomyInfo"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "Source Id."
                    }
                },
                "description": "VariationItem"
            },
            "VariationsInfo": {
                "type": "object",
                "properties": {
                    "setId": {
                        "type": "string",
                        "description": "Variation set id."
                    },
                    "varType": {
                        "type": "string",
                        "description": "Variation type name."
                    },
                    "masterItem": {
                        "type": "string",
                        "description": "Master item."
                    },
                    "items": {
                        "type": "array",
                        "description": "Content item variations.",
                        "items": {
                            "$ref": "#/components/schemas/Language"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Variations Info."
            },
            "VersionInfo": {
                "type": "object",
                "properties": {
                    "latestVersion": {
                        "type": "string",
                        "description": "Latest version"
                    },
                    "publishedVersion": {
                        "type": "string",
                        "description": "Published version"
                    }
                },
                "description": "VersionInfo"
            },
            "audienceAttribute": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Parameter"
                    },
                    {
                        "type": "object",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The id of the Audience Attribute. This is a required propety in the get response and ignored in post/put requests."
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the Audience Attribute."
                            }
                        },
                        "description": "Recommendation Audience Attribute"
                    }
                ]
            },
            "audienceAttributeInfo": {
                "type": "object",
                "required": [
                    "categoryId",
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Audience Attribute. This is a required propety in the get response and ignored in post/put requests."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Audience Attribute. It is a required property in the get response and cannot be empty in post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Audience Attribute."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The reference name of the Audience Attribute.  This is the name that is used in API calls that invoke the recommendation. If no reference name is provided the server will generate one from the name field. The referene name should be unique in a category."
                    },
                    "categoryId": {
                        "type": "string",
                        "description": "The id of the Category the property belongs to. "
                    },
                    "links": {
                        "type": "array",
                        "description": "Links",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "description": "Audience Attribute Information"
            },
            "audienceAttributeInputInfo": {
                "type": "object",
                "required": [
                    "categoryId",
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Audience Attribute. It is a required property in the get response and cannot be empty in post/put request."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Audience Attribute."
                    },
                    "apiName": {
                        "type": "string",
                        "description": "The reference name of the Audience Attribute.  This is the name that is used in API calls that invoke the recommendation. If no reference name is provided the server will generate one from the name field. The referene name should be unique in a category."
                    },
                    "categoryId": {
                        "type": "string",
                        "description": "The id of the Category the property belongs to. "
                    }
                },
                "description": "Audience Attribute Input Information"
            },
            "channelToken": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the token."
                    },
                    "token": {
                        "type": "string",
                        "description": "Value of the token."
                    },
                    "expirationDate": {
                        "description": "ExpirationDate of the token.",
                        "$ref": "#/components/schemas/date"
                    }
                },
                "description": "channelToken"
            },
            "date": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "description": "date"
            },
            "dateField": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Parameter"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "Value of the date in ISO8601 format. This is a required value in the put/get/post requests."
                            },
                            "timezone": {
                                "type": "string",
                                "description": "Value of the timezone."
                            }
                        },
                        "description": "Date Field"
                    }
                ]
            },
            "endOfDay": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "Current day"
                    }
                ]
            },
            "endOfMonth": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "End of current month"
                    }
                ]
            },
            "endOfQuarter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "End of current quarter"
                    }
                ]
            },
            "endOfWeek": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "End of current week"
                    }
                ]
            },
            "endOfYear": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "End of Year"
                    }
                ]
            },
            "function": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Parameter"
                    },
                    {
                        "type": "object",
                        "required": [
                            "function"
                        ],
                        "properties": {
                            "function": {
                                "description": "The function definition. This is a required property in the get response and ignored in post/put requests.",
                                "$ref": "#/components/schemas/FunctionType"
                            }
                        },
                        "description": "Function"
                    }
                ]
            },
            "literal": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Parameter"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "Value of the literal. This is a required value in the put/get/post requests."
                            }
                        },
                        "description": "Literal"
                    }
                ]
            },
            "ruleGroup": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Parameter"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "properties": {
                                "type": "array",
                                "description": "Properties for this rule section.",
                                "items": {
                                    "$ref": "#/components/schemas/RulesProperties"
                                }
                            },
                            "rules": {
                                "type": "array",
                                "description": "Main list of Rules. This is optional and can be empty.",
                                "items": {
                                    "$ref": "#/components/schemas/Rule"
                                }
                            }
                        },
                        "description": "Rule Group"
                    }
                ]
            },
            "standardAssetField": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Parameter"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "fieldId": {
                                "type": "string",
                                "description": "Id of a standard asset field. This is a required value in the put/get/post requests."
                            }
                        },
                        "description": "Standard Asset Field"
                    }
                ]
            },
            "startOfDay": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "Current day"
                    }
                ]
            },
            "startOfMonth": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "End of current month"
                    }
                ]
            },
            "startOfQuarter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "End of current quarter"
                    }
                ]
            },
            "startOfWeek": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "End of current week"
                    }
                ]
            },
            "startOfYear": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "duration": {
                                "type": "string",
                                "description": "The duration in ISO 8601 Duration format : P[-]n<D|W|M|Y>. Example: P3D for days. This is an optional value in the put/get/post requests."
                            }
                        },
                        "description": "End of Year"
                    }
                ]
            },
            "userAssetField": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Parameter"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "contentType": {
                                "description": "The content type referenced. This is a required value in the put/get/post requests.",
                                "$ref": "#/components/schemas/ContentTypeId"
                            },
                            "id": {
                                "type": "string",
                                "description": "The id of the field in the content type if available."
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the standard field in the item."
                            }
                        },
                        "description": "User Asset Field"
                    }
                ]
            }
        }
    },
    "tags": [
        {
            "name": "Channel Secret",
            "description": "The operations from the Channel Secret category."
        },
        {
            "name": "Channels",
            "description": "The resources to manage channels."
        },
        {
            "name": "Collections",
            "description": "The resources to manage collections."
        },
        {
            "name": "Connectors",
            "description": "The operations from the Connectors category."
        },
        {
            "name": "Digital Item Renditions",
            "description": "The resources to manage digital item renditions."
        },
        {
            "name": "Item Revisions",
            "description": "The operations from the Item Revisions category."
        },
        {
            "name": "Item Variations",
            "description": "The resources to manage items variations."
        },
        {
            "name": "Items",
            "description": "The resources to manage items."
        },
        {
            "name": "Items Bulk Operations",
            "description": "The resources to manage bulk items operations."
        },
        {
            "name": "Items Search",
            "description": "The resources to manage items search."
        },
        {
            "name": "Items by slug",
            "description": "The resources to manage items by slug."
        },
        {
            "name": "Languages",
            "description": "The resources to manage languages."
        },
        {
            "name": "Localization Policies",
            "description": "The resources to manage localization policies."
        },
        {
            "name": "OAuth Tokens",
            "description": "The operations from the OAuth Tokens category."
        },
        {
            "name": "Permission Operations",
            "description": "The operations from the Permission Operations category."
        },
        {
            "name": "Recommendations",
            "description": "The resource to manage recommendations."
        },
        {
            "name": "Repositories",
            "description": "The resources to manage repositories."
        },
        {
            "name": "Taxonomies",
            "description": "Management taxonomies resources provides access to management taxonomies and categories."
        },
        {
            "name": "Tokens",
            "description": "The resource to read token."
        },
        {
            "name": "Types",
            "description": "The resources to manage types."
        }
    ]
}